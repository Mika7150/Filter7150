/*@ define:module:header
hidden: true
name: header
*/

/* Built on: Wed Jul 30 16:11:42 UTC 2025 */
/* Commit: c8724fe */
meta { name = "Filter7150 V2 (Main)"; description = "Mika7150's V2 filter, primary version, mostly intended for mains and/or people who will edit the filter"; }






/*@ define:module:default_styling
---
name: Default Styling
subtitle: The first layer of styling items
description: |
  This contains the default styles and options to configure style programmatically.
  
  *Note: These styles can be overridden by modules below.*
*/

/*@ define:input:default_styling
type: style
label: Default Style
exampleItem: Santa hat
exampleItemId: 1050
*/
#define VAR_GLOBAL_CUSTOMSTYLE textColor = "#FFFFFFFF";showDespawn = false;

apply (true) {
    VAR_GLOBAL_CUSTOMSTYLE 
}

/*@ define:input:default_styling
type: style
label: "Default Stackable/Noted Style"
exampleItem: Magic shortbow (u)
exampleItemId: 73
*/
#define VAR_DEFAULT_STACKABLE_NOTED_CUSTOMSTYLE

apply (stackable:true || noted:true) {
    VAR_DEFAULT_STACKABLE_NOTED_CUSTOMSTYLE 
}

/*@ define:input:default_styling
type: style
label: Default Untradeable Style
exampleItem: Long bone
exampleItemId: 10976
*/
#define VAR_DEFAULT_UNTRADEABLE_CUSTOMSTYLE

apply (tradeable:false && !name:CONST_GLOBAL_TRADEABLE_NON_TRADEABLE_ITEMS) {
    VAR_DEFAULT_UNTRADEABLE_CUSTOMSTYLE 
}

/*@ define:input:default_styling
type: boolean
label: Show Value for Tradeable Items
*/
#define VAR_GLOBAL_SHOW_TRADEABLE_VALUE false

apply ((tradeable:true || name:CONST_GLOBAL_TRADEABLE_NON_TRADEABLE_ITEMS) && VAR_GLOBAL_SHOW_TRADEABLE_VALUE) {
    showValue = true;
}

/*@ define:input:default_styling
type: boolean
label: Show Value for Untradeable Items
*/
#define VAR_GLOBAL_SHOW_UNTRADEABLE_VALUE false

apply (tradeable:false && VAR_GLOBAL_SHOW_UNTRADEABLE_VALUE) {
    showValue = true;
}

/*@ define:input:default_styling
type: number
label: Hide despawn timer for items below this value
group: Value-Based Style Settings
*/
#define VAR_GLOBAL_DESPAWN_TIMER_MINIMUM_VALUE 0

apply ((tradeable:true || name:CONST_GLOBAL_TRADEABLE_NON_TRADEABLE_ITEMS) && value:<VAR_GLOBAL_DESPAWN_TIMER_MINIMUM_VALUE) {
    showDespawn = false;
}

/*@ define:input:default_styling
type: number
label: Hide prices for items below this value
group: Value-Based Style Settings
*/
#define VAR_GLOBAL_SHOW_PRICES_MINIMUM_VALUE 5000

apply ((tradeable:true || name:CONST_GLOBAL_TRADEABLE_NON_TRADEABLE_ITEMS) && value:<VAR_GLOBAL_SHOW_PRICES_MINIMUM_VALUE) {
    showValue = false;
}

/*@ define:input:default_styling
type: number
label: Hide icons for items below this value
group: Value-Based Style Settings
*/
#define VAR_GLOBAL_ICON_MINIMUM_VALUE 0

apply ((tradeable:true || name:CONST_GLOBAL_TRADEABLE_NON_TRADEABLE_ITEMS) && value:<VAR_GLOBAL_ICON_MINIMUM_VALUE) {
    // this is a hack to turn off the icon
    icon = Sprite(9000000, 0);
}

/*@ define:input:default_styling
type: stringlist
label: Items to show icons for (if not showing for all items)
*/
#define VAR_GLOBAL_SHOW_ICONS_ITEMLIST []

apply (name:VAR_GLOBAL_SHOW_ICONS_ITEMLIST) {
    icon = CurrentItem();
}





/*@ define:module:sorting
---
name: Sorting
subtitle: Picking up the good stuff first
description: |
  This allows you to order the pickup menu in a few different ways.

  NOTE: This requires that "Price Sort" in the "Custom Menu Swaps" plugin under "Ground Item Sort" to be DISABLED.
*/

/*@ define:input:sorting
type: boolean
label: Sort by value
*/
#define VAR_SORTING_MENU_SORT_BY_VALUE true

/*@ define:input:sorting
type: boolean
label: Prioritize Stackable/noted
*/
#define VAR_SORTING_MENU_SORT_BY_VALUE_STACKABLES_FIRST false

/*@ define:input:sorting
type: boolean
label: Prioritize Untradeables
*/
#define VAR_SORTING_MENU_SORT_UNTRADEABLE_FIRST false

/*@ define:input:sorting
type: stringlist
label: Items to always show first
*/
#define VAR_MENU_SORT_ITEMS_FIRST []





/*@ define:module:filtering
---
name: Filtering
subtitle: Sifting through the junk
description: |
  Provides a few different ways to filter out items.
*/


/*@ define:input:filtering
type: stringlist
label: Items to hide
group: Individual Items
*/
#define VAR_GLOBAL_HIDE []

apply (name:VAR_GLOBAL_HIDE) {
    hidden = true;
}

/*@ define:input:filtering
type: stringlist
label: Items to show
group: Individual Items
*/
#define VAR_GLOBAL_SHOW ["rope","small fishing net"]

apply (name:VAR_GLOBAL_SHOW) {
    hidden = false;
}


/*@ define:input:filtering
type: number
label: Hide items below this value
group: Value-Based
*/
#define VAR_GLOBAL_MINIMUM_VALUE 1000

apply ((tradeable:true || name:CONST_GLOBAL_TRADEABLE_NON_TRADEABLE_ITEMS) && value:<VAR_GLOBAL_MINIMUM_VALUE) {
    hidden = true;
}

/*@ define:input:filtering
type: number
label: Hide stackable items below this value
group: Value-Based
*/
#define VAR_GLOBAL_STACKABLE_MINIMUM_VALUE 0

apply ((tradeable:true || name:CONST_GLOBAL_TRADEABLE_NON_TRADEABLE_ITEMS) && (stackable:true || noted:true) && value:<VAR_GLOBAL_STACKABLE_MINIMUM_VALUE) {
    hidden = true;
}

/*@ define:input:filtering
type: number
label: Hide non-stackable items below this value
group: Value-Based
*/
#define VAR_GLOBAL_NON_STACKABLE_MINIMUM_VALUE 0

apply ((tradeable:true || name:CONST_GLOBAL_TRADEABLE_NON_TRADEABLE_ITEMS) && stackable:false && noted:false && value:<VAR_GLOBAL_NON_STACKABLE_MINIMUM_VALUE) {
    hidden = true;
}


/*@ define:input:filtering
type: boolean
label: Hide others' drops
group: Ownership
*/
#define VAR_GLOBAL_HIDE_OTHER_PLAYERS_ITEMS true

/*@ define:input:filtering
type: boolean
label: Hide world spawns
group: Ownership
*/
#define VAR_GLOBAL_HIDE_SPAWN_ITEMS false

/*@ define:input:filtering
type: stringlist
label: Exceptions to ownership
group: Ownership
*/
#define VAR_OWNERSHIP_FILTERING_EXCEPTIONS ["Water container","Dawnbringer","Elder*","Twisted*","Kodai*","Revitalisation*","Prayer enhance*","Xeric's aid*","Antipoison*","Overload*","Golpar seed","Buchu seed","Noxifer seed","Endarkened juice","Stinkhorn mushroom","Cicely","Mallignum root plank"]

rule (ownership:OWNERSHIP_NONE && VAR_GLOBAL_HIDE_SPAWN_ITEMS  && !name:VAR_OWNERSHIP_FILTERING_EXCEPTIONS) {
    hidden = true;
    sound = 2411; // sound name: silence
    notify = false;
}

rule (ownership:OWNERSHIP_OTHER && VAR_GLOBAL_HIDE_OTHER_PLAYERS_ITEMS && !name:VAR_OWNERSHIP_FILTERING_EXCEPTIONS) {
    hidden = true;
    sound = 2411; // sound name: silence
    notify = false;
}


/*@ define:input:filtering
type: enumlist
label: Clue tiers to force hidden
group: Clue Scrolls
enum: [
  {
    "value": "Clue scroll (beginner)",
    "label": "Beginner"
  },
  {
    "value": "Clue scroll (easy)",
    "label": "Easy"
  },
  {
    "value": "Clue scroll (medium)",
    "label": "Medium"
  },
  {
    "value": "Clue scroll (hard)",
    "label": "Hard"
  },
  {
    "value": "Clue scroll (elite)",
    "label": "Elite"
  },
  {
    "value": "Clue scroll (master)",
    "label": "Master"
  }
]
*/
#define VAR_CLUE_SCROLLS_HIDE []

apply (name:VAR_CLUE_SCROLLS_HIDE) {
    hidden = true;
}


/*@ define:input:remains
type: number
label: Minimum value to display remains at
group: Remains
*/
#define VAR_REMAINS_MINIMUM_VALUE 0

apply (name:CONST_BONES_LIST && value:<VAR_REMAINS_MINIMUM_VALUE) {
    hidden = true;
}

apply (name:CONST_ASHES_LIST && value:<VAR_REMAINS_MINIMUM_VALUE) {
    hidden = true;
}

apply (name:CONST_SHADES_REMAINS_LIST && value:<VAR_REMAINS_MINIMUM_VALUE) {
    hidden = true;
}

apply (name:CONST_ENSOULED_HEAD_LIST && value:<VAR_REMAINS_MINIMUM_VALUE) {
    hidden = true;
}

/*@ define:input:remains
type: enumlist
label: Bones to force hidden
group: Remains
enum: [
  "Bones",
  "Wolf bones",
  "Burnt bones",
  "Monkey bones",
  "Bat bones",
  "Big bones",
  "Jogre bones",
  "Wyrmling bones",
  "Zogre bones",
  "Shaikahan bones",
  "Babydragon bones",
  "Wyrm bones",
  "Wyvern bones",
  "Dragon bones",
  "Drake bones",
  "Fayrg bones",
  "Lava dragon bones",
  "Raurg bones",
  "Hydra bones",
  "Dagannoth bones",
  "Ourg bones",
  "Superior dragon bones",
  "Bleached bones",
  "Small zombie monkey bones",
  "Large zombie monkey bones",
  "Small ninja monkey bones",
  "Medium ninja monkey bones",
  "Gorilla bones",
  "Bearded gorilla bones"
]
*/
#define VAR_BONES_HIDE []

apply (name:VAR_BONES_HIDE) {
    hidden = true;
}

/*@ define:input:remains
type: enumlist
label: Ashes to force hidden
group: Remains
enum: [
  "Fiendish ashes",
  "Vile ashes",
  "Malicious ashes",
  "Abyssal ashes",
  "Infernal ashes"
]
*/
#define VAR_ASHES_HIDE []

apply (name:VAR_ASHES_HIDE) {
    hidden = true;
}

/*@ define:input:remains
type: enumlist
label: Shades of morton remains to force hidden
group: Remains
enum: [
  "Loar remains",
  "Phrin remains",
  "Riyl remains",
  "Asyn remains",
  "Fiyr remains",
  "Urium remains"
]
*/
#define VAR_SHADES_REMAINS_HIDE []

apply (name:VAR_SHADES_REMAINS_HIDE) {
    hidden = true;
}

/*@ define:input:remains
type: enumlist
label: Ensouled heads to force hidden
group: Remains
enum: [
  "Ensouled goblin head",
  "Ensouled monkey head",
  "Ensouled imp head",
  "Ensouled minotaur head",
  "Ensouled scorpion head",
  "Ensouled bear head",
  "Ensouled unicorn head",
  "Ensouled dog head",
  "Ensouled chaos druid head",
  "Ensouled giant head",
  "Ensouled ogre head",
  "Ensouled elf head",
  "Ensouled troll head",
  "Ensouled horror head",
  "Ensouled kalphite head",
  "Ensouled dagannoth head",
  "Ensouled bloodveld head",
  "Ensouled tzHaar head",
  "Ensouled demon head",
  "Ensouled hellhound head",
  "Ensouled aviansie head",
  "Ensouled abyssal head",
  "Ensouled dragon head"
]
*/
#define VAR_ENSOULED_HEADS_HIDE []

apply (name:VAR_ENSOULED_HEADS_HIDE) {
    hidden = true;
}


/*@ define:input:food
type: stringlist
label: Food to hide
group: Food
*/
#define VAR_FOOD_HIDE []

apply (name:VAR_FOOD_HIDE) {
    hidden = true;
}

/*@ define:input:food
type: stringlist
label: Food to show
group: Food
*/
#define VAR_FOOD_SHOW []

apply (name:VAR_FOOD_SHOW) {
    hidden = false;
}


/*@ define:input:potions
type: enumlist
label: Potions to force hidden
group: Potions
enum: [
  {
    "value": "Attack potion(*",
    "label": "Attack potion"
  },
  {
    "value": "Antipoison(*",
    "label": "Antipoison"
  },
  {
    "value": "Strength potion(*",
    "label": "Strength potion"
  },
  {
    "value": "Serum 207(*",
    "label": "Serum 207"
  },
  {
    "value": "Compost potion(*",
    "label": "Compost potion"
  },
  {
    "value": "Restore potion(*",
    "label": "Restore potion"
  },
  {
    "value": "Energy potion(*",
    "label": "Energy potion"
  },
  {
    "value": "Defence potion(*",
    "label": "Defence potion"
  },
  {
    "value": "Agility potion(*",
    "label": "Agility potion"
  },
  {
    "value": "Combat potion(*",
    "label": "Combat potion"
  },
  {
    "value": "Prayer potion(*",
    "label": "Prayer potion"
  },
  {
    "value": "Super attack(*",
    "label": "Super attack"
  },
  {
    "value": "Superantipoison(*",
    "label": "Superantipoison"
  },
  {
    "value": "Fishing potion(*",
    "label": "Fishing potion"
  },
  {
    "value": "Super energy(*",
    "label": "Super energy"
  },
  {
    "value": "Hunter potion(*",
    "label": "Hunter potion"
  },
  {
    "value": "Goading potion(*",
    "label": "Goading potion"
  },
  {
    "value": "Super strength(*",
    "label": "Super strength"
  },
  {
    "value": "Prayer regeneration potion(*",
    "label": "Prayer regeneration potion"
  },
  {
    "value": "Super restore(*",
    "label": "Super restore"
  },
  {
    "value": "Sanfew serum(*",
    "label": "Sanfew serum"
  },
  {
    "value": "Super defence(*",
    "label": "Super defence"
  },
  {
    "value": "Antidote+(*",
    "label": "Antidote+"
  },
  {
    "value": "Antifire potion(*",
    "label": "Antifire potion"
  },
  {
    "value": "Divine super attack potion(*",
    "label": "Divine super attack potion"
  },
  {
    "value": "Divine super defence potion(*",
    "label": "Divine super defence potion"
  },
  {
    "value": "Divine super strength potion(*",
    "label": "Divine super strength potion"
  },
  {
    "value": "Ranging potion(*",
    "label": "Ranging potion"
  },
  {
    "value": "Divine ranging potion(*",
    "label": "Divine ranging potion"
  },
  {
    "value": "Magic potion(*",
    "label": "Magic potion"
  },
  {
    "value": "Stamina potion(*",
    "label": "Stamina potion"
  },
  {
    "value": "Zamorak brew(*",
    "label": "Zamorak brew"
  },
  {
    "value": "Divine magic potion(*",
    "label": "Divine magic potion"
  },
  {
    "value": "Antidote++(*",
    "label": "Antidote++"
  },
  {
    "value": "Bastion potion(*",
    "label": "Bastion potion"
  },
  {
    "value": "Battlemage potion(*",
    "label": "Battlemage potion"
  },
  {
    "value": "Saradomin brew(*",
    "label": "Saradomin brew"
  },
  {
    "value": "Extended antifire(*",
    "label": "Extended antifire"
  },
  {
    "value": "Ancient brew(*",
    "label": "Ancient brew"
  },
  {
    "value": "Divine bastion potion(*",
    "label": "Divine bastion potion"
  },
  {
    "value": "Divine battlemage potion(*",
    "label": "Divine battlemage potion"
  },
  {
    "value": "Anti-venom(*",
    "label": "Anti-venom"
  },
  {
    "value": "Menaphite remedy(*",
    "label": "Menaphite remedy"
  },
  {
    "value": "Super combat potion(*",
    "label": "Super combat potion"
  },
  {
    "value": "Forgotten brew(*",
    "label": "Forgotten brew"
  },
  {
    "value": "Super antifire potion(*",
    "label": "Super antifire potion"
  },
  {
    "value": "Anti-venom+(*",
    "label": "Anti-venom+"
  },
  {
    "value": "Extended anti-venom+(*",
    "label": "Extended anti-venom+"
  },
  {
    "value": "Divine super combat potion(*",
    "label": "Divine super combat potion"
  },
  {
    "value": "Extended super antifire(*",
    "label": "Extended super antifire"
  },
  {
    "value": "Surge potion(*",
    "label": "Surge potion"
  }
]
*/
#define VAR_POTIONS_HIDE []

apply (name:VAR_POTIONS_HIDE) {
    hidden = true;
}

/*@ define:input:potions
type: enumlist
label: Potions to force shown
group: Potions
enum: [
  {
    "value": "Attack potion(*",
    "label": "Attack potion"
  },
  {
    "value": "Antipoison(*",
    "label": "Antipoison"
  },
  {
    "value": "Strength potion(*",
    "label": "Strength potion"
  },
  {
    "value": "Serum 207(*",
    "label": "Serum 207"
  },
  {
    "value": "Compost potion(*",
    "label": "Compost potion"
  },
  {
    "value": "Restore potion(*",
    "label": "Restore potion"
  },
  {
    "value": "Energy potion(*",
    "label": "Energy potion"
  },
  {
    "value": "Defence potion(*",
    "label": "Defence potion"
  },
  {
    "value": "Agility potion(*",
    "label": "Agility potion"
  },
  {
    "value": "Combat potion(*",
    "label": "Combat potion"
  },
  {
    "value": "Prayer potion(*",
    "label": "Prayer potion"
  },
  {
    "value": "Super attack(*",
    "label": "Super attack"
  },
  {
    "value": "Superantipoison(*",
    "label": "Superantipoison"
  },
  {
    "value": "Fishing potion(*",
    "label": "Fishing potion"
  },
  {
    "value": "Super energy(*",
    "label": "Super energy"
  },
  {
    "value": "Hunter potion(*",
    "label": "Hunter potion"
  },
  {
    "value": "Goading potion(*",
    "label": "Goading potion"
  },
  {
    "value": "Super strength(*",
    "label": "Super strength"
  },
  {
    "value": "Prayer regeneration potion(*",
    "label": "Prayer regeneration potion"
  },
  {
    "value": "Super restore(*",
    "label": "Super restore"
  },
  {
    "value": "Sanfew serum(*",
    "label": "Sanfew serum"
  },
  {
    "value": "Super defence(*",
    "label": "Super defence"
  },
  {
    "value": "Antidote+(*",
    "label": "Antidote+"
  },
  {
    "value": "Antifire potion(*",
    "label": "Antifire potion"
  },
  {
    "value": "Divine super attack potion(*",
    "label": "Divine super attack potion"
  },
  {
    "value": "Divine super defence potion(*",
    "label": "Divine super defence potion"
  },
  {
    "value": "Divine super strength potion(*",
    "label": "Divine super strength potion"
  },
  {
    "value": "Ranging potion(*",
    "label": "Ranging potion"
  },
  {
    "value": "Divine ranging potion(*",
    "label": "Divine ranging potion"
  },
  {
    "value": "Magic potion(*",
    "label": "Magic potion"
  },
  {
    "value": "Stamina potion(*",
    "label": "Stamina potion"
  },
  {
    "value": "Zamorak brew(*",
    "label": "Zamorak brew"
  },
  {
    "value": "Divine magic potion(*",
    "label": "Divine magic potion"
  },
  {
    "value": "Antidote++(*",
    "label": "Antidote++"
  },
  {
    "value": "Bastion potion(*",
    "label": "Bastion potion"
  },
  {
    "value": "Battlemage potion(*",
    "label": "Battlemage potion"
  },
  {
    "value": "Saradomin brew(*",
    "label": "Saradomin brew"
  },
  {
    "value": "Extended antifire(*",
    "label": "Extended antifire"
  },
  {
    "value": "Ancient brew(*",
    "label": "Ancient brew"
  },
  {
    "value": "Divine bastion potion(*",
    "label": "Divine bastion potion"
  },
  {
    "value": "Divine battlemage potion(*",
    "label": "Divine battlemage potion"
  },
  {
    "value": "Anti-venom(*",
    "label": "Anti-venom"
  },
  {
    "value": "Menaphite remedy(*",
    "label": "Menaphite remedy"
  },
  {
    "value": "Super combat potion(*",
    "label": "Super combat potion"
  },
  {
    "value": "Forgotten brew(*",
    "label": "Forgotten brew"
  },
  {
    "value": "Super antifire potion(*",
    "label": "Super antifire potion"
  },
  {
    "value": "Anti-venom+(*",
    "label": "Anti-venom+"
  },
  {
    "value": "Extended anti-venom+(*",
    "label": "Extended anti-venom+"
  },
  {
    "value": "Divine super combat potion(*",
    "label": "Divine super combat potion"
  },
  {
    "value": "Extended super antifire(*",
    "label": "Extended super antifire"
  },
  {
    "value": "Surge potion(*",
    "label": "Surge potion"
  }
]
*/
#define VAR_POTIONS_SHOW []

apply (name:VAR_POTIONS_SHOW) {
    hidden = false;
}


/*@ define:input:ammo
type: enumlist
label: Standard arrows to force hidden
group: Ammo
enum: [
  {
    "value": "Bronze*",
    "label": "Bronze Arrows"
  },
  {
    "value": "Iron*",
    "label": "Iron Arrows"
  },
  {
    "value": "Steel*",
    "label": "Steel Arrows"
  },
  {
    "value": "Mithril*",
    "label": "Mithril Arrows"
  },
  {
    "value": "Adamant*",
    "label": "Adamant Arrows"
  },
  {
    "value": "Rune*",
    "label": "Rune Arrows"
  },
  {
    "value": "Amethyst*",
    "label": "Amethyst Arrows"
  },
  {
    "value": "Dragon*",
    "label": "Dragon Arrows"
  }
]
*/
#define VAR_AMMO_STANDARD_ARROWS_HIDE []

/*@ define:input:ammo
type: number
label: Standard Arrows minimum value
group: Ammo
*/
#define VAR_AMMO_STANDARD_ARROWS_MIN_VALUE 0

apply (name:CONST_AMMO_STANDARD_ARROWS_LIST && (name:VAR_AMMO_STANDARD_ARROWS_HIDE || value:<VAR_AMMO_STANDARD_ARROWS_MIN_VALUE)) {
    hidden = true;
}

/*@ define:input:ammo
type: enumlist
label: Darts to force hidden
group: Ammo
enum: [
  {
    "value": "Bronze dart*",
    "label": "Bronze darts"
  },
  {
    "value": "Iron dart*",
    "label": "Iron darts"
  },
  {
    "value": "Steel dart*",
    "label": "Steel darts"
  },
  {
    "value": "Black dart*",
    "label": "Black darts"
  },
  {
    "value": "Mithril dart*",
    "label": "Mithril darts"
  },
  {
    "value": "Adamant dart*",
    "label": "Adamant darts"
  },
  {
    "value": "Rune dart*",
    "label": "Rune darts"
  },
  {
    "value": "Amethyst dart*",
    "label": "Amethyst darts"
  },
  {
    "value": "Dragon dart*",
    "label": "Dragon darts"
  },
  {
    "value": "Atlatl dart",
    "label": "Atlatl darts"
  }
]
*/
#define VAR_AMMO_DARTS_HIDE []

/*@ define:input:ammo
type: number
label: Darts minimum value
group: Ammo
*/
#define VAR_AMMO_DARTS_MIN_VALUE 0

apply (name:CONST_AMMO_DARTS_LIST && (name:VAR_AMMO_DARTS_HIDE || value:<VAR_AMMO_DARTS_MIN_VALUE)) {
    hidden = true;
}

/*@ define:input:ammo
type: enumlist
label: Bolts to force hidden
group: Ammo
enum: [
  {
    "value": "Bronze bolts*",
    "label": "Bronze bolts"
  },
  {
    "value": "Blurite bolts*",
    "label": "Blurite bolts"
  },
  {
    "value": "Silver bolts*",
    "label": "Silver bolts"
  },
  {
    "value": "Iron bolts*",
    "label": "Iron bolts"
  },
  {
    "value": "Steel bolts*",
    "label": "Steel bolts"
  },
  {
    "value": "Mithril bolts*",
    "label": "Mithril bolts"
  },
  {
    "value": "Adamant bolts*",
    "label": "Adamant bolts"
  },
  {
    "value": "Runite bolts*",
    "label": "Runite bolts"
  },
  {
    "value": "Dragon bolts*",
    "label": "Dragon bolts"
  }
]
*/
#define VAR_AMMO_BOLTS_HIDE []

/*@ define:input:ammo
type: number
label: Bolts minimum value
group: Ammo
*/
#define VAR_AMMO_BOLTS_MIN_VALUE 0

apply (name:CONST_AMMO_BOLTS_LIST && (name:VAR_AMMO_BOLTS_HIDE || value:<VAR_AMMO_BOLTS_MIN_VALUE)) {
    hidden = true;
}

/*@ define:input:ammo
type: enumlist
label: Enchanted bolts to force hidden
group: Ammo
enum: [
  {
    "value": "Opal bolts (e)",
    "label": "Opal bolts (e)"
  },
  {
    "value": "Jade bolts (e)",
    "label": "Jade bolts (e)"
  },
  {
    "value": "Pearl bolts (e)",
    "label": "Pearl bolts (e)"
  },
  {
    "value": "Topaz bolts (e)",
    "label": "Topaz bolts (e)"
  },
  {
    "value": "Sapphire bolts (e)",
    "label": "Sapphire bolts (e)"
  },
  {
    "value": "Emerald bolts (e)",
    "label": "Emerald bolts (e)"
  },
  {
    "value": "Ruby bolts (e)",
    "label": "Ruby bolts (e)"
  },
  {
    "value": "Diamond bolts (e)",
    "label": "Diamond bolts (e)"
  },
  {
    "value": "Dragonstone bolts (e)",
    "label": "Dragonstone bolts (e)"
  },
  {
    "value": "Onyx bolts (e)",
    "label": "Onyx bolts (e)"
  }
]
*/
#define VAR_AMMO_BOLTS_E_HIDE []

/*@ define:input:ammo
type: number
label: Enchanted bolts minimum value
group: Ammo
*/
#define VAR_AMMO_BOLTS_E_MIN_VALUE 0

apply (name:CONST_AMMO_BOLTS_E_LIST && (name:VAR_AMMO_BOLTS_E_HIDE || value:<VAR_AMMO_BOLTS_E_MIN_VALUE)) {
    hidden = true;
}

/*@ define:input:ammo
type: enumlist
label: Dragon enchanted bolts to force hidden
group: Ammo
enum: [
  {
    "value": "Opal dragon bolts (e)",
    "label": "Opal dragon bolts (e)"
  },
  {
    "value": "Jade dragon bolts (e)",
    "label": "Jade dragon bolts (e)"
  },
  {
    "value": "Pearl dragon bolts (e)",
    "label": "Pearl dragon bolts (e)"
  },
  {
    "value": "Topaz dragon bolts (e)",
    "label": "Topaz dragon bolts (e)"
  },
  {
    "value": "Sapphire dragon bolts (e)",
    "label": "Sapphire dragon bolts (e)"
  },
  {
    "value": "Emerald dragon bolts (e)",
    "label": "Emerald dragon bolts (e)"
  },
  {
    "value": "Ruby dragon bolts (e)",
    "label": "Ruby dragon bolts (e)"
  },
  {
    "value": "Diamond dragon bolts (e)",
    "label": "Diamond dragon bolts (e)"
  },
  {
    "value": "Dragonstone dragon bolts (e)",
    "label": "Dragonstone dragon bolts (e)"
  },
  {
    "value": "Onyx dragon bolts (e)",
    "label": "Onyx dragon bolts (e)"
  }
]
*/
#define VAR_AMMO_DRAGON_BOLTS_E_HIDE []

/*@ define:input:ammo
type: number
label: Dragon enchanted bolts minimum value
group: Ammo
*/
#define VAR_AMMO_DRAGON_BOLTS_E_MIN_VALUE 0

apply (name:CONST_AMMO_DRAGON_BOLTS_E_LIST && (name:VAR_AMMO_DRAGON_BOLTS_E_HIDE || value:<VAR_AMMO_DRAGON_BOLTS_E_MIN_VALUE)) {
    hidden = true;
}

/*@ define:input:ammo
type: enumlist
label: Javelins to force hidden
group: Ammo
enum: [
  "Bronze javelin",
  "Iron javelin",
  "Steel javelin",
  "Mithril javelin",
  "Adamant javelin",
  "Rune javelin",
  "Dragon javelin",
]
*/
#define VAR_AMMO_JAVELINS_HIDE []

/*@ define:input:ammo
type: number
label: Javelins minimum value
group: Ammo
*/
#define VAR_AMMO_JAVELINS_MIN_VALUE 0

apply (name:CONST_AMMO_JAVELINS_LIST && (name:VAR_AMMO_JAVELINS_HIDE || value:<VAR_AMMO_JAVELINS_MIN_VALUE)) {
    hidden = true;
}

/*@ define:input:ammo
type: enumlist
label: Special bolts to force hidden
group: Ammo
enum: [
  {
    "value": "Sunlight antler bolts",
    "label": "Sunlight antler bolts"
  },
  {
    "value": "Moonlight antler bolts",
    "label": "Moonlight antler bolts"
  },
  {
    "value": "Kebbit bolts",
    "label": "Kebbit bolts"
  },
  {
    "value": "Long kebbit bolts",
    "label": "Long kebbit bolts"
  },
  {
    "value": "Broad bolts",
    "label": "Broad bolts"
  },
  {
    "value": "Amethyst broad bolts",
    "label": "Amethyst broad bolts"
  },
  {
    "value": "Barbed bolts",
    "label": "Barbed bolts"
  },
  {
    "value": "Bone bolts",
    "label": "Bone bolts"
  }
]
*/
#define VAR_AMMO_SPECIAL_BOLTS_HIDE []

/*@ define:input:ammo
type: number
label: Special bolts minimum value
group: Ammo
*/
#define VAR_AMMO_SPECIAL_BOLTS_MIN_VALUE 0

apply (name:CONST_AMMO_SPECIAL_BOLTS_LIST && (name:VAR_AMMO_SPECIAL_BOLTS_HIDE || value:<VAR_AMMO_SPECIAL_BOLTS_MIN_VALUE)) {
    hidden = true;
}

/*@ define:input:ammo
type: enumlist
label: Brutal arrows to force hidden
group: Ammo
enum: [
  {
    "value": "Bronze brutal",
    "label": "Bronze brutal arrows"
  },
  {
    "value": "Iron brutal",
    "label": "Iron brutal arrows"
  },
  {
    "value": "Steel brutal",
    "label": "Steel brutal arrows"
  },
  {
    "value": "Black brutal",
    "label": "Black brutal arrows"
  },
  {
    "value": "Mithril brutal",
    "label": "Mithril brutal arrows"
  },
  {
    "value": "Adamant brutal",
    "label": "Adamant brutal arrows"
  },
  {
    "value": "Rune brutal",
    "label": "Rune brutal arrows"
  }
]
*/
#define VAR_AMMO_BRUTAL_ARROWS_HIDE []

/*@ define:input:ammo
type: number
label: Brutal Arrows minimum value
group: Ammo
*/
#define VAR_AMMO_BRUTAL_ARROWS_MIN_VALUE 0

apply (name:CONST_AMMO_BRUTAL_ARROWS_LIST && (name:VAR_AMMO_BRUTAL_ARROWS_HIDE || value:<VAR_AMMO_BRUTAL_ARROWS_MIN_VALUE)) {
    hidden = true;
}

/*@ define:input:ammo
type: enumlist
label: Special arrows to force hidden
group: Ammo
enum: [
  "Training Arrows",
  "Ogre Arrow",
  "Ice Arrows",
  "Broad Arrows"
]
*/
#define VAR_AMMO_SPECIAL_ARROWS_HIDE []

/*@ define:input:ammo
type: number
label: Special Arrows minimum value
group: Ammo
*/
#define VAR_AMMO_SPECIAL_ARROWS_MIN_VALUE 0

apply (name:CONST_AMMO_SPECIAL_ARROWS_LIST && (name:VAR_AMMO_SPECIAL_ARROWS_HIDE || value:<VAR_AMMO_SPECIAL_ARROWS_MIN_VALUE)) {
    hidden = true;
}


/*@ define:input:filtering
type: enumlist
label: Gems to force hidden
group: Gems
enum: [
  {
    "value": "*Sapphire",
    "label": "Sapphire"
  },
  {
    "value": "*Emerald",
    "label": "Emerald"
  },
  {
    "value": "*Ruby",
    "label": "Ruby"
  },
  {
    "value": "*Diamond",
    "label": "Diamond"
  },
  {
    "value": "*Opal",
    "label": "Opal"
  },
  {
    "value": "*Jade",
    "label": "Jade"
  },
  {
    "value": "*Red topaz",
    "label": "Red topaz"
  },
  {
    "value": "*Dragonstone",
    "label": "Dragonstone"
  },
  {
    "value": "*Onyx",
    "label": "Onyx"
  }
]
*/
#define VAR_GEMS_HIDE []

apply (name:VAR_GEMS_HIDE) {
    hidden = true;
}

/*@ define:input:filtering
type: number
label: Sapphire minimum quantity
group: Gems
*/
#define VAR_SAPPHIRE_MIN_QUANTITY 0

apply (name:["Uncut sapphire",   "Sapphire", ] && quantity:<VAR_SAPPHIRE_MIN_QUANTITY) {
    hidden = true;
}

/*@ define:input:filtering
type: number
label: Emerald minimum quantity
group: Gems
*/
#define VAR_EMERALD_MIN_QUANTITY 0

apply (name:["Uncut emerald",   "Emerald", ] && quantity:<VAR_EMERALD_MIN_QUANTITY) {
    hidden = true;
}

/*@ define:input:filtering
type: number
label: Ruby minimum quantity
group: Gems
*/
#define VAR_RUBY_MIN_QUANTITY 0

apply (name:["Uncut ruby",   "Ruby", ] && quantity:<VAR_RUBY_MIN_QUANTITY) {
    hidden = true;
}

/*@ define:input:filtering
type: number
label: Diamond minimum quantity
group: Gems
*/
#define VAR_DIAMOND_MIN_QUANTITY 0

apply (name:["Uncut diamond",   "Diamond", ] && quantity:<VAR_DIAMOND_MIN_QUANTITY) {
    hidden = true;
}

/*@ define:input:filtering
type: number
label: Opal minimum quantity
group: Gems
*/
#define VAR_OPAL_MIN_QUANTITY 0

apply (name:["Uncut opal",   "Opal", ] && quantity:<VAR_OPAL_MIN_QUANTITY) {
    hidden = true;
}

/*@ define:input:filtering
type: number
label: Jade minimum quantity
group: Gems
*/
#define VAR_JADE_MIN_QUANTITY 0

apply (name:["Uncut jade",   "Jade", ] && quantity:<VAR_JADE_MIN_QUANTITY) {
    hidden = true;
}

/*@ define:input:filtering
type: number
label: Red topaz minimum quantity
group: Gems
*/
#define VAR_RED_TOPAZ_MIN_QUANTITY 0

apply (name:["Uncut red topaz",   "Red topaz", ] && quantity:<VAR_RED_TOPAZ_MIN_QUANTITY) {
    hidden = true;
}

/*@ define:input:filtering
type: number
label: Dragonstone minimum quantity
group: Gems
*/
#define VAR_DRAGONSTONE_MIN_QUANTITY 0

apply (name:["Uncut dragonstone",   "Dragonstone", ] && quantity:<VAR_DRAGONSTONE_MIN_QUANTITY) {
    hidden = true;
}

/*@ define:input:filtering
type: number
label: Onyx minimum quantity
group: Gems
*/
#define VAR_ONYX_MIN_QUANTITY 0

apply (name:["Uncut onyx",   "Onyx", ] && quantity:<VAR_ONYX_MIN_QUANTITY) {
    hidden = true;
}


/*@ define:input:runes
type: enumlist
label: Runes to force hidden
group: Runes
enum: [
  "Air rune",
  "Mind rune",
  "Water rune",
  "Earth rune",
  "Fire rune",
  "Body rune",
  "Cosmic rune",
  "Chaos rune",
  "Nature rune",
  "Law rune",
  "Death rune",
  "Sunfire rune",
  "Astral rune",
  "Blood rune",
  "Soul rune",
  "Wrath rune",
  "Mist rune",
  "Dust rune",
  "Mud rune",
  "Smoke rune",
  "Steam rune",
  "Lava rune",
  "Aether rune"
]
*/
#define VAR_RUNES_HIDE []

/*@ define:input:runes
type: boolean
label: Force runes to be shown if they're above min quantity
group: Runes
*/
#define VAR_RUNES_SHOW_ABOVE_MIN_QUANTITY false

/*@ define:input:runes
type: number
label: Air rune minimum quantity
group: Runes
*/
#define VAR_AIR_RUNE_MIN_QUANTITY 0

/*@ define:input:runes
type: number
label: Water rune minimum quantity
group: Runes
*/
#define VAR_WATER_RUNE_MIN_QUANTITY 0

/*@ define:input:runes
type: number
label: Earth rune minimum quantity
group: Runes
*/
#define VAR_EARTH_RUNE_MIN_QUANTITY 0

/*@ define:input:runes
type: number
label: Fire rune minimum quantity
group: Runes
*/
#define VAR_FIRE_RUNE_MIN_QUANTITY 0

/*@ define:input:runes
type: number
label: Mind rune minimum quantity
group: Runes
*/
#define VAR_MIND_RUNE_MIN_QUANTITY 0

/*@ define:input:runes
type: number
label: Body rune minimum quantity
group: Runes
*/
#define VAR_BODY_RUNE_MIN_QUANTITY 0

/*@ define:input:runes
type: number
label: Cosmic rune minimum quantity
group: Runes
*/
#define VAR_COSMIC_RUNE_MIN_QUANTITY 0

/*@ define:input:runes
type: number
label: Chaos rune minimum quantity
group: Runes
*/
#define VAR_CHAOS_RUNE_MIN_QUANTITY 0

/*@ define:input:runes
type: number
label: Nature rune minimum quantity
group: Runes
*/
#define VAR_NATURE_RUNE_MIN_QUANTITY 0

/*@ define:input:runes
type: number
label: Law rune minimum quantity
group: Runes
*/
#define VAR_LAW_RUNE_MIN_QUANTITY 0

/*@ define:input:runes
type: number
label: Death rune minimum quantity
group: Runes
*/
#define VAR_DEATH_RUNE_MIN_QUANTITY 0

/*@ define:input:runes
type: number
label: Sunfire rune minimum quantity
group: Runes
*/
#define VAR_SUNFIRE_RUNE_MIN_QUANTITY 0

/*@ define:input:runes
type: number
label: Astral rune minimum quantity
group: Runes
*/
#define VAR_ASTRAL_RUNE_MIN_QUANTITY 0

/*@ define:input:runes
type: number
label: Blood rune minimum quantity
group: Runes
*/
#define VAR_BLOOD_RUNE_MIN_QUANTITY 0

/*@ define:input:runes
type: number
label: Soul rune minimum quantity
group: Runes
*/
#define VAR_SOUL_RUNE_MIN_QUANTITY 0

/*@ define:input:runes
type: number
label: Wrath rune minimum quantity
group: Runes
*/
#define VAR_WRATH_RUNE_MIN_QUANTITY 0

/*@ define:input:runes
type: number
label: Mist rune minimum quantity
group: Runes
*/
#define VAR_MIST_RUNE_MIN_QUANTITY 0

/*@ define:input:runes
type: number
label: Dust rune minimum quantity
group: Runes
*/
#define VAR_DUST_RUNE_MIN_QUANTITY 0

/*@ define:input:runes
type: number
label: Mud rune minimum quantity
group: Runes
*/
#define VAR_MUD_RUNE_MIN_QUANTITY 0

/*@ define:input:runes
type: number
label: Smoke rune minimum quantity
group: Runes
*/
#define VAR_SMOKE_RUNE_MIN_QUANTITY 0

/*@ define:input:runes
type: number
label: Steam rune minimum quantity
group: Runes
*/
#define VAR_STEAM_RUNE_MIN_QUANTITY 0

/*@ define:input:runes
type: number
label: Lava rune minimum quantity
group: Runes
*/
#define VAR_LAVA_RUNE_MIN_QUANTITY 0

/*@ define:input:runes
type: number
label: Aether rune minimum quantity
group: Runes
*/
#define VAR_AETHER_RUNE_MIN_QUANTITY 0

apply (name:VAR_RUNES_HIDE) {
    hidden = true;
}

apply (name:"Air rune" && quantity:<VAR_AIR_RUNE_MIN_QUANTITY) {
    hidden = true;
}

apply (name:"Mind rune" && quantity:<VAR_MIND_RUNE_MIN_QUANTITY) {
    hidden = true;
}

apply (name:"Water rune" && quantity:<VAR_WATER_RUNE_MIN_QUANTITY) {
    hidden = true;
}

apply (name:"Earth rune" && quantity:<VAR_EARTH_RUNE_MIN_QUANTITY) {
    hidden = true;
}

apply (name:"Fire rune" && quantity:<VAR_FIRE_RUNE_MIN_QUANTITY) {
    hidden = true;
}

apply (name:"Body rune" && quantity:<VAR_BODY_RUNE_MIN_QUANTITY) {
    hidden = true;
}

apply (name:"Cosmic rune" && quantity:<VAR_COSMIC_RUNE_MIN_QUANTITY) {
    hidden = true;
}

apply (name:"Chaos rune" && quantity:<VAR_CHAOS_RUNE_MIN_QUANTITY) {
    hidden = true;
}

apply (name:"Nature rune" && quantity:<VAR_NATURE_RUNE_MIN_QUANTITY) {
    hidden = true;
}

apply (name:"Law rune" && quantity:<VAR_LAW_RUNE_MIN_QUANTITY) {
    hidden = true;
}

apply (name:"Death rune" && quantity:<VAR_DEATH_RUNE_MIN_QUANTITY) {
    hidden = true;
}

apply (name:"Sunfire rune" && quantity:<VAR_SUNFIRE_RUNE_MIN_QUANTITY) {
    hidden = true;
}

apply (name:"Astral rune" && quantity:<VAR_ASTRAL_RUNE_MIN_QUANTITY) {
    hidden = true;
}

apply (name:"Blood rune" && quantity:<VAR_BLOOD_RUNE_MIN_QUANTITY) {
    hidden = true;
}

apply (name:"Soul rune" && quantity:<VAR_SOUL_RUNE_MIN_QUANTITY) {
    hidden = true;
}

apply (name:"Wrath rune" && quantity:<VAR_WRATH_RUNE_MIN_QUANTITY) {
    hidden = true;
}

apply (name:"Mist rune" && quantity:<VAR_MIST_RUNE_MIN_QUANTITY) {
    hidden = true;
}

apply (name:"Dust rune" && quantity:<VAR_DUST_RUNE_MIN_QUANTITY) {
    hidden = true;
}

apply (name:"Mud rune" && quantity:<VAR_MUD_RUNE_MIN_QUANTITY) {
    hidden = true;
}

apply (name:"Smoke rune" && quantity:<VAR_SMOKE_RUNE_MIN_QUANTITY) {
    hidden = true;
}

apply (name:"Steam rune" && quantity:<VAR_STEAM_RUNE_MIN_QUANTITY) {
    hidden = true;
}

apply (name:"Lava rune" && quantity:<VAR_LAVA_RUNE_MIN_QUANTITY) {
    hidden = true;
}

apply (name:"Aether rune" && quantity:<VAR_LAVA_RUNE_MIN_QUANTITY) {
  hidden = true;
}

apply (name:"Air rune" && quantity:>=VAR_AIR_RUNE_MIN_QUANTITY && VAR_RUNES_SHOW_ABOVE_MIN_QUANTITY) {
  hidden = false;
}
apply (name:"Mind rune" && quantity:>=VAR_MIND_RUNE_MIN_QUANTITY && VAR_RUNES_SHOW_ABOVE_MIN_QUANTITY) {
  hidden = false;
}
apply (name:"Water rune" && quantity:>=VAR_WATER_RUNE_MIN_QUANTITY && VAR_RUNES_SHOW_ABOVE_MIN_QUANTITY) {
  hidden = false;
}
apply (name:"Earth rune" && quantity:>=VAR_EARTH_RUNE_MIN_QUANTITY && VAR_RUNES_SHOW_ABOVE_MIN_QUANTITY) {
  hidden = false;
}
apply (name:"Fire rune" && quantity:>=VAR_FIRE_RUNE_MIN_QUANTITY && VAR_RUNES_SHOW_ABOVE_MIN_QUANTITY) {
  hidden = false;
}
apply (name:"Body rune" && quantity:>=VAR_BODY_RUNE_MIN_QUANTITY && VAR_RUNES_SHOW_ABOVE_MIN_QUANTITY) {
  hidden = false;
}
apply (name:"Cosmic rune" && quantity:>=VAR_COSMIC_RUNE_MIN_QUANTITY && VAR_RUNES_SHOW_ABOVE_MIN_QUANTITY) {
  hidden = false;
}
apply (name:"Chaos rune" && quantity:>=VAR_CHAOS_RUNE_MIN_QUANTITY && VAR_RUNES_SHOW_ABOVE_MIN_QUANTITY) {
  hidden = false;
}
apply (name:"Nature rune" && quantity:>=VAR_NATURE_RUNE_MIN_QUANTITY && VAR_RUNES_SHOW_ABOVE_MIN_QUANTITY) {
  hidden = false;
}
apply (name:"Law rune" && quantity:>=VAR_LAW_RUNE_MIN_QUANTITY && VAR_RUNES_SHOW_ABOVE_MIN_QUANTITY) {
  hidden = false;
}
apply (name:"Death rune" && quantity:>=VAR_DEATH_RUNE_MIN_QUANTITY && VAR_RUNES_SHOW_ABOVE_MIN_QUANTITY) {
  hidden = false;
}
apply (name:"Sunfire rune" && quantity:>=VAR_SUNFIRE_RUNE_MIN_QUANTITY && VAR_RUNES_SHOW_ABOVE_MIN_QUANTITY) {
  hidden = false;
}
apply (name:"Astral rune" && quantity:>=VAR_ASTRAL_RUNE_MIN_QUANTITY && VAR_RUNES_SHOW_ABOVE_MIN_QUANTITY) {
  hidden = false;
}
apply (name:"Blood rune" && quantity:>=VAR_BLOOD_RUNE_MIN_QUANTITY && VAR_RUNES_SHOW_ABOVE_MIN_QUANTITY) {
  hidden = false;
}
apply (name:"Soul rune" && quantity:>=VAR_SOUL_RUNE_MIN_QUANTITY && VAR_RUNES_SHOW_ABOVE_MIN_QUANTITY) {
  hidden = false;
}
apply (name:"Wrath rune" && quantity:>=VAR_WRATH_RUNE_MIN_QUANTITY && VAR_RUNES_SHOW_ABOVE_MIN_QUANTITY) {
  hidden = false;
}
apply (name:"Mist rune" && quantity:>=VAR_MIST_RUNE_MIN_QUANTITY && VAR_RUNES_SHOW_ABOVE_MIN_QUANTITY) {
  hidden = false;
}
apply (name:"Dust rune" && quantity:>=VAR_DUST_RUNE_MIN_QUANTITY && VAR_RUNES_SHOW_ABOVE_MIN_QUANTITY) {
  hidden = false;
}
apply (name:"Mud rune" && quantity:>=VAR_MUD_RUNE_MIN_QUANTITY && VAR_RUNES_SHOW_ABOVE_MIN_QUANTITY) {
  hidden = false;
}
apply (name:"Smoke rune" && quantity:>=VAR_SMOKE_RUNE_MIN_QUANTITY && VAR_RUNES_SHOW_ABOVE_MIN_QUANTITY) {
  hidden = false;
}
apply (name:"Steam rune" && quantity:>=VAR_STEAM_RUNE_MIN_QUANTITY && VAR_RUNES_SHOW_ABOVE_MIN_QUANTITY) {
  hidden = false;
}
apply (name:"Lava rune" && quantity:>=VAR_LAVA_RUNE_MIN_QUANTITY && VAR_RUNES_SHOW_ABOVE_MIN_QUANTITY) {
  hidden = false;
}
apply (name:"Aether rune" && quantity:<VAR_LAVA_RUNE_MIN_QUANTITY && VAR_RUNES_SHOW_ABOVE_MIN_QUANTITY) {
  hidden = false;
}


/*@ define:input:herbs
type: number
label: Hide herbs below this value
group: Herbs
*/
#define VAR_HERBS_MINIMUM_VALUE 0

apply (name:CONST_ALL_HERBS && value:<VAR_HERBS_MINIMUM_VALUE) {
    hidden = true;
}

/*@ define:input:herbs
type: enumlist
label: Herbs to force hidden
group: Herbs
enum: [
  {
    "value": "*Guam leaf",
    "label": "Guam leaf"
  },
  {
    "value": "*Marrentill",
    "label": "Marrentill"
  },
  {
    "value": "*Tarromin",
    "label": "Tarromin"
  },
  {
    "value": "*Harralander",
    "label": "Harralander"
  },
  {
    "value": "*Ranarr weed",
    "label": "Ranarr weed"
  },
  {
    "value": "*Toadflax",
    "label": "Toadflax"
  },
  {
    "value": "*Irit leaf",
    "label": "Irit leaf"
  },
  {
    "value": "*Avantoe",
    "label": "Avantoe"
  },
  {
    "value": "*Kwuarm",
    "label": "Kwuarm"
  },
  {
    "value": "*Huasca",
    "label": "Huasca"
  },
  {
    "value": "*Snapdragon",
    "label": "Snapdragon"
  },
  {
    "value": "*Cadantine",
    "label": "Cadantine"
  },
  {
    "value": "*Lantadyme",
    "label": "Lantadyme"
  },
  {
    "value": "*Dwarf weed",
    "label": "Dwarf weed"
  },
  {
    "value": "*Torstol",
    "label": "Torstol"
  }
]
*/
#define VAR_HERBS_HIDE []

apply (name:VAR_HERBS_HIDE) {
    hidden = true;
}

/*@ define:input:herbs
type: enumlist
label: Herbs to force shown
group: Herbs
enum: [
  {
    "value": "*Guam leaf",
    "label": "Guam leaf"
  },
  {
    "value": "*Marrentill",
    "label": "Marrentill"
  },
  {
    "value": "*Tarromin",
    "label": "Tarromin"
  },
  {
    "value": "*Harralander",
    "label": "Harralander"
  },
  {
    "value": "*Ranarr weed",
    "label": "Ranarr weed"
  },
  {
    "value": "*Toadflax",
    "label": "Toadflax"
  },
  {
    "value": "*Irit leaf",
    "label": "Irit leaf"
  },
  {
    "value": "*Avantoe",
    "label": "Avantoe"
  },
  {
    "value": "*Kwuarm",
    "label": "Kwuarm"
  },
  {
    "value": "*Huasca",
    "label": "Huasca"
  },
  {
    "value": "*Snapdragon",
    "label": "Snapdragon"
  },
  {
    "value": "*Cadantine",
    "label": "Cadantine"
  },
  {
    "value": "*Lantadyme",
    "label": "Lantadyme"
  },
  {
    "value": "*Dwarf weed",
    "label": "Dwarf weed"
  },
  {
    "value": "*Torstol",
    "label": "Torstol"
  }
]
*/
#define VAR_HERBS_SHOW []

apply (name:VAR_HERBS_SHOW) {
    hidden = false;
}

/*@ define:input:herbs
type: number
label: Guam leaf minimum quantity
group: Herbs
*/
#define VAR_HERBS_GUAM_LEAF_MIN_QUANTITY 0

apply (name:"*guam leaf" && quantity:<VAR_HERBS_GUAM_LEAF_MIN_QUANTITY) {
    hidden = true;
}

/*@ define:input:herbs
type: number
label: Guam leaf noted minimum quantity
group: Herbs
*/
#define VAR_HERBS_GUAM_LEAF_NOTED_MIN_QUANTITY 0

apply (name:"*guam leaf" && noted:true && quantity:<VAR_HERBS_GUAM_LEAF_NOTED_MIN_QUANTITY) {
    hidden = true;
}

/*@ define:input:herbs
type: number
label: Marrentill minimum quantity
group: Herbs
*/
#define VAR_HERBS_MARRENTILL_MIN_QUANTITY 0

apply (name:"*marrentill" && quantity:<VAR_HERBS_MARRENTILL_MIN_QUANTITY) {
    hidden = true;
}

/*@ define:input:herbs
type: number
label: Marrentill noted minimum quantity
group: Herbs
*/
#define VAR_HERBS_MARRENTILL_NOTED_MIN_QUANTITY 0

apply (name:"*marrentill" && noted:true && quantity:<VAR_HERBS_MARRENTILL_NOTED_MIN_QUANTITY) {
    hidden = true;
}

/*@ define:input:herbs
type: number
label: Tarromin minimum quantity
group: Herbs
*/
#define VAR_HERBS_TARROMIN_MIN_QUANTITY 0

apply (name:"*tarromin" && quantity:<VAR_HERBS_TARROMIN_MIN_QUANTITY) {
    hidden = true;
}

/*@ define:input:herbs
type: number
label: Tarromin noted minimum quantity
group: Herbs
*/
#define VAR_HERBS_TARROMIN_NOTED_MIN_QUANTITY 0

apply (name:"*tarromin" && noted:true && quantity:<VAR_HERBS_TARROMIN_NOTED_MIN_QUANTITY) {
    hidden = true;
}

/*@ define:input:herbs
type: number
label: Harralander minimum quantity
group: Herbs
*/
#define VAR_HERBS_HARRALANDER_MIN_QUANTITY 0

apply (name:"*harralander" && quantity:<VAR_HERBS_HARRALANDER_MIN_QUANTITY) {
    hidden = true;
}

/*@ define:input:herbs
type: number
label: Harralander noted minimum quantity
group: Herbs
*/
#define VAR_HERBS_HARRALANDER_NOTED_MIN_QUANTITY 0

apply (name:"*harralander" && noted:true && quantity:<VAR_HERBS_HARRALANDER_NOTED_MIN_QUANTITY) {
    hidden = true;
}

/*@ define:input:herbs
type: number
label: Ranarr weed minimum quantity
group: Herbs
*/
#define VAR_HERBS_RANARR_WEED_MIN_QUANTITY 0

apply (name:"*ranarr weed" && quantity:<VAR_HERBS_RANARR_WEED_MIN_QUANTITY) {
    hidden = true;
}

/*@ define:input:herbs
type: number
label: Ranarr weed noted minimum quantity
group: Herbs
*/
#define VAR_HERBS_RANARR_WEED_NOTED_MIN_QUANTITY 0

apply (name:"*ranarr weed" && noted:true && quantity:<VAR_HERBS_RANARR_WEED_NOTED_MIN_QUANTITY) {
    hidden = true;
}

/*@ define:input:herbs
type: number
label: Toadflax minimum quantity
group: Herbs
*/
#define VAR_HERBS_TOADFLAX_MIN_QUANTITY 0

apply (name:"*toadflax" && quantity:<VAR_HERBS_TOADFLAX_MIN_QUANTITY) {
    hidden = true;
}

/*@ define:input:herbs
type: number
label: Toadflax noted minimum quantity
group: Herbs
*/
#define VAR_HERBS_TOADFLAX_NOTED_MIN_QUANTITY 0

apply (name:"*toadflax" && noted:true && quantity:<VAR_HERBS_TOADFLAX_NOTED_MIN_QUANTITY) {
    hidden = true;
}

/*@ define:input:herbs
type: number
label: Irit leaf minimum quantity
group: Herbs
*/
#define VAR_HERBS_IRIT_LEAF_MIN_QUANTITY 0

apply (name:"*irit leaf" && quantity:<VAR_HERBS_IRIT_LEAF_MIN_QUANTITY) {
    hidden = true;
}

/*@ define:input:herbs
type: number
label: Irit leaf noted minimum quantity
group: Herbs
*/
#define VAR_HERBS_IRIT_LEAF_NOTED_MIN_QUANTITY 0

apply (name:"*irit leaf" && noted:true && quantity:<VAR_HERBS_IRIT_LEAF_NOTED_MIN_QUANTITY) {
    hidden = true;
}

/*@ define:input:herbs
type: number
label: Avantoe minimum quantity
group: Herbs
*/
#define VAR_HERBS_AVANTOE_MIN_QUANTITY 0

apply (name:"*avantoe" && quantity:<VAR_HERBS_AVANTOE_MIN_QUANTITY) {
    hidden = true;
}

/*@ define:input:herbs
type: number
label: Avantoe noted minimum quantity
group: Herbs
*/
#define VAR_HERBS_AVANTOE_NOTED_MIN_QUANTITY 0

apply (name:"*avantoe" && noted:true && quantity:<VAR_HERBS_AVANTOE_NOTED_MIN_QUANTITY) {
    hidden = true;
}

/*@ define:input:herbs
type: number
label: Kwuarm minimum quantity
group: Herbs
*/
#define VAR_HERBS_KWUARM_MIN_QUANTITY 0

apply (name:"*kwuarm" && quantity:<VAR_HERBS_KWUARM_MIN_QUANTITY) {
    hidden = true;
}

/*@ define:input:herbs
type: number
label: Kwuarm noted minimum quantity
group: Herbs
*/
#define VAR_HERBS_KWUARM_NOTED_MIN_QUANTITY 0

apply (name:"*kwuarm" && noted:true && quantity:<VAR_HERBS_KWUARM_NOTED_MIN_QUANTITY) {
    hidden = true;
}

/*@ define:input:herbs
type: number
label: Huasca minimum quantity
group: Herbs
*/
#define VAR_HERBS_HUASCA_MIN_QUANTITY 0

apply (name:"*huasca" && quantity:<VAR_HERBS_HUASCA_MIN_QUANTITY) {
    hidden = true;
}

/*@ define:input:herbs
type: number
label: Huasca noted minimum quantity
group: Herbs
*/
#define VAR_HERBS_HUASCA_NOTED_MIN_QUANTITY 0

apply (name:"*huasca" && noted:true && quantity:<VAR_HERBS_HUASCA_NOTED_MIN_QUANTITY) {
    hidden = true;
}

/*@ define:input:herbs
type: number
label: Snapdragon minimum quantity
group: Herbs
*/
#define VAR_HERBS_SNAPDRAGON_MIN_QUANTITY 0

apply (name:"*snapdragon" && quantity:<VAR_HERBS_SNAPDRAGON_MIN_QUANTITY) {
    hidden = true;
}

/*@ define:input:herbs
type: number
label: Snapdragon noted minimum quantity
group: Herbs
*/
#define VAR_HERBS_SNAPDRAGON_NOTED_MIN_QUANTITY 0

apply (name:"*snapdragon" && noted:true && quantity:<VAR_HERBS_SNAPDRAGON_NOTED_MIN_QUANTITY) {
    hidden = true;
}

/*@ define:input:herbs
type: number
label: Cadantine minimum quantity
group: Herbs
*/
#define VAR_HERBS_CADANTINE_MIN_QUANTITY 0

apply (name:"*cadantine" && quantity:<VAR_HERBS_CADANTINE_MIN_QUANTITY) {
    hidden = true;
}

/*@ define:input:herbs
type: number
label: Cadantine noted minimum quantity
group: Herbs
*/
#define VAR_HERBS_CADANTINE_NOTED_MIN_QUANTITY 0

apply (name:"*cadantine" && noted:true && quantity:<VAR_HERBS_CADANTINE_NOTED_MIN_QUANTITY) {
    hidden = true;
}

/*@ define:input:herbs
type: number
label: Lantadyme minimum quantity
group: Herbs
*/
#define VAR_HERBS_LANTADYME_MIN_QUANTITY 0

apply (name:"*lantadyme" && quantity:<VAR_HERBS_LANTADYME_MIN_QUANTITY) {
    hidden = true;
}

/*@ define:input:herbs
type: number
label: Lantadyme noted minimum quantity
group: Herbs
*/
#define VAR_HERBS_LANTADYME_NOTED_MIN_QUANTITY 0

apply (name:"*lantadyme" && noted:true && quantity:<VAR_HERBS_LANTADYME_NOTED_MIN_QUANTITY) {
    hidden = true;
}

/*@ define:input:herbs
type: number
label: Dwarf weed minimum quantity
group: Herbs
*/
#define VAR_HERBS_DWARF_WEED_MIN_QUANTITY 0

apply (name:"*dwarf weed" && quantity:<VAR_HERBS_DWARF_WEED_MIN_QUANTITY) {
    hidden = true;
}

/*@ define:input:herbs
type: number
label: Dwarf weed noted minimum quantity
group: Herbs
*/
#define VAR_HERBS_DWARF_WEED_NOTED_MIN_QUANTITY 0

apply (name:"*dwarf weed" && noted:true && quantity:<VAR_HERBS_DWARF_WEED_NOTED_MIN_QUANTITY) {
    hidden = true;
}

/*@ define:input:herbs
type: number
label: Torstol minimum quantity
group: Herbs
*/
#define VAR_HERBS_TORSTOL_MIN_QUANTITY 0

apply (name:"*torstol" && quantity:<VAR_HERBS_TORSTOL_MIN_QUANTITY) {
    hidden = true;
}

/*@ define:input:herbs
type: number
label: Torstol noted minimum quantity
group: Herbs
*/
#define VAR_HERBS_TORSTOL_NOTED_MIN_QUANTITY 0

apply (name:"*torstol" && noted:true && quantity:<VAR_HERBS_TORSTOL_NOTED_MIN_QUANTITY) {
    hidden = true;
}


/*@ define:input:filtering
type: enumlist
label: Fishing equipment to force hidden
group: Fishing
enum: [
  "Small fishing net",
  "Big fishing net",
  "Drift net",
  "Fishing rod",
  "Fly fishing rod",
  "Oily fishing rod",
  "Harpoon",
  "Lobster pot",
  "Karambwan vessel"
]
*/
#define VAR_FISHING_EQUIPMENT_HIDE ["Small fishing net","Big fishing net","Fishing rod","Fly fishing rod","Harpoon","Lobster pot","Karambwan vessel"]

apply (name:VAR_FISHING_EQUIPMENT_HIDE) {
    hidden = true;
}

/*@ define:input:filtering
type: enumlist
label: Fishing bait to force hidden
group: Fishing
enum: [
  "Sandworms",
  "Fishing bait",
  "Feather",
  "Stripy feather",
  "Dark fishing bait",
  "King worm",
  "Fish chunks",
  "Raw karambwanji"
]
*/
#define VAR_FISHING_BAIT_HIDE ["Fishing bait","Feather","Stripy feather","King worm","Fish chunks"]

apply (name:VAR_FISHING_BAIT_HIDE) {
    hidden = true;
}

/*@ define:input:filtering
type: enumlist
label: Raw fish to force hidden
group: Fishing
enum: [
  "Raw shrimps",
  "Raw anchovies",
  "Raw guppy",
  "Raw cavefish",
  "Raw tetra",
  "Frog spawn",
  "Raw monkfish",
  "Minnow",
  "Raw mackerel",
  "Raw cod",
  "Raw bass",
  "Raw catfish",
  "Raw sardine",
  "Raw herring",
  "Raw pike",
  "Raw slimy eel",
  "Raw cave eel",
  "Raw anglerfish",
  "Sacred eel",
  "Raw trout",
  "Raw salmon",
  "Raw rainbow fish",
  "Raw lava eel",
  "Infernal eel",
  "Leaping trout",
  "Leaping salmon",
  "Leaping sturgeon",
  "Raw tuna",
  "Raw swordfish",
  "Raw shark",
  "Raw lobster",
  "Raw dark crab",
  "Bluegill",
  "Common tench",
  "Mottled eel",
  "Greater siren",
  "Raw karambwan"
]
*/
#define VAR_FISHING_RAW_FISH_HIDE ["Raw shrimps","Raw anchovies","Raw guppy","Raw cavefish","Raw tetra","Frog spawn","Raw mackerel","Raw cod","Raw bass","Raw sardine","Raw herring","Raw pike","Raw trout","Raw salmon","Raw rainbow fish","Leaping trout","Leaping salmon","Leaping sturgeon","Raw tuna","Bluegill","Common tench","Mottled eel","Greater siren"]

apply (name:VAR_FISHING_RAW_FISH_HIDE) {
    hidden = true;
}


/*@ define:input:filtering
type: enumlist
label: Ores to force hidden
group: Ores
enum: [
  "Copper ore",
  "Tin ore",
  "Iron ore",
  "Silver ore",
  "Coal",
  "Gold ore",
  "Mithril ore",
  "Adamantite ore",
  "Runite ore",
  "Daeyalt ore",
  "Blasted ore",
  "Blurite ore",
  "Lovakite ore"
]
*/
#define VAR_ORES_HIDE []

apply (name:VAR_ORES_HIDE) {
    hidden = true;
}

/*@ define:input:filtering
type: number
label: Copper ore minimum quantity
group: Ores
*/
#define VAR_COPPER_ORE_MIN_QUANTITY 0

apply (name:"copper ore" && quantity:<VAR_COPPER_ORE_MIN_QUANTITY) {
    hidden = true;
}

/*@ define:input:filtering
type: number
label: Tin ore minimum quantity
group: Ores
*/
#define VAR_TIN_ORE_MIN_QUANTITY 0

apply (name:"tin ore" && quantity:<VAR_TIN_ORE_MIN_QUANTITY) {
    hidden = true;
}

/*@ define:input:filtering
type: number
label: Iron ore minimum quantity
group: Ores
*/
#define VAR_IRON_ORE_MIN_QUANTITY 0

apply (name:"iron ore" && quantity:<VAR_IRON_ORE_MIN_QUANTITY) {
    hidden = true;
}

/*@ define:input:filtering
type: number
label: Silver ore minimum quantity
group: Ores
*/
#define VAR_SILVER_ORE_MIN_QUANTITY 0

apply (name:"silver ore" && quantity:<VAR_SILVER_ORE_MIN_QUANTITY) {
    hidden = true;
}

/*@ define:input:filtering
type: number
label: Coal minimum quantity
group: Ores
*/
#define VAR_COAL_ORE_MIN_QUANTITY 0

apply (name:"coal" && quantity:<VAR_COAL_ORE_MIN_QUANTITY) {
    hidden = true;
}

/*@ define:input:filtering
type: number
label: Gold ore minimum quantity
group: Ores
*/
#define VAR_GOLD_ORE_MIN_QUANTITY 0

apply (name:"gold ore" && quantity:<VAR_GOLD_ORE_MIN_QUANTITY) {
    hidden = true;
}

/*@ define:input:filtering
type: number
label: Mithril ore minimum quantity
group: Ores
*/
#define VAR_MITHRIL_ORE_MIN_QUANTITY 0

apply (name:"mithril ore" && quantity:<VAR_MITHRIL_ORE_MIN_QUANTITY) {
    hidden = true;
}

/*@ define:input:filtering
type: number
label: Adamantite ore minimum quantity
group: Ores
*/
#define VAR_ADAMANTITE_ORE_MIN_QUANTITY 0

apply (name:"adamantite ore" && quantity:<VAR_ADAMANTITE_ORE_MIN_QUANTITY) {
    hidden = true;
}

/*@ define:input:filtering
type: number
label: Runite ore minimum quantity
group: Ores
*/
#define VAR_RUNITE_ORE_MIN_QUANTITY 0

apply (name:"runite ore" && quantity:<VAR_RUNITE_ORE_MIN_QUANTITY) {
    hidden = true;
}

/*@ define:input:filtering
type: number
label: Daeyalt ore minimum quantity
group: Ores
*/
#define VAR_DAEYALT_ORE_MIN_QUANTITY 0

apply (name:"daeyalt ore" && quantity:<VAR_DAEYALT_ORE_MIN_QUANTITY) {
    hidden = true;
}

/*@ define:input:filtering
type: number
label: Blasted ore minimum quantity
group: Ores
*/
#define VAR_BLASTED_ORE_MIN_QUANTITY 0

apply (name:"blasted ore" && quantity:<VAR_BLASTED_ORE_MIN_QUANTITY) {
    hidden = true;
}

/*@ define:input:filtering
type: number
label: Blurite ore minimum quantity
group: Ores
*/
#define VAR_BLURITE_ORE_MIN_QUANTITY 0

apply (name:"blurite ore" && quantity:<VAR_BLURITE_ORE_MIN_QUANTITY) {
    hidden = true;
}

/*@ define:input:filtering
type: number
label: Lovakite ore minimum quantity
group: Ores
*/
#define VAR_LOVAKITE_ORE_MIN_QUANTITY 0

apply (name:"lovakite ore" && quantity:<VAR_LOVAKITE_ORE_MIN_QUANTITY) {
    hidden = true;
}


/*@ define:input:bars
type: enumlist
label: Bars to force hidden
group: Bars
enum: [
  "Bronze bar",
  "Iron bar",
  "Silver bar",
  "Steel bar",
  "Gold bar",
  "Mithril bar",
  "Adamantite bar",
  "Runite bar",
  "Elemental metal",
  "Primed bar",
  "Primed mind bar",
  "Blurite bar",
  "Enchanted bar",
  "Lovakite bar",
  "'Perfect' gold bar"
]
*/
#define VAR_BARS_HIDE []

apply (name:VAR_BARS_HIDE) {
    hidden = true;
}

/*@ define:input:bars
type: number
label: Bronze bar minimum quantity
group: Bars
*/
#define VAR_BRONZE_BAR_MIN_QUANTITY 0

apply (name:"Bronze bar" && quantity:<VAR_BRONZE_BAR_MIN_QUANTITY) {
    hidden = true;
}

/*@ define:input:bars
type: number
label: Iron bar minimum quantity
group: Bars
*/
#define VAR_IRON_BAR_MIN_QUANTITY 0

apply (name:"Iron bar" && quantity:<VAR_IRON_BAR_MIN_QUANTITY) {
    hidden = true;
}

/*@ define:input:bars
type: number
label: Silver bar minimum quantity
group: Bars
*/
#define VAR_SILVER_BAR_MIN_QUANTITY 0

apply (name:"Silver bar" && quantity:<VAR_SILVER_BAR_MIN_QUANTITY) {
    hidden = true;
}

/*@ define:input:bars
type: number
label: Steel bar minimum quantity
group: Bars
*/
#define VAR_STEEL_BAR_MIN_QUANTITY 0

apply (name:"Steel bar" && quantity:<VAR_STEEL_BAR_MIN_QUANTITY) {
    hidden = true;
}

/*@ define:input:bars
type: number
label: Gold bar minimum quantity
group: Bars
*/
#define VAR_GOLD_BAR_MIN_QUANTITY 0

apply (name:"Gold bar" && quantity:<VAR_GOLD_BAR_MIN_QUANTITY) {
    hidden = true;
}

/*@ define:input:bars
type: number
label: Mithril bar minimum quantity
group: Bars
*/
#define VAR_MITHRIL_BAR_MIN_QUANTITY 0

apply (name:"Mithril bar" && quantity:<VAR_MITHRIL_BAR_MIN_QUANTITY) {
    hidden = true;
}

/*@ define:input:bars
type: number
label: Adamantite bar minimum quantity
group: Bars
*/
#define VAR_ADAMANTITE_BAR_MIN_QUANTITY 0

apply (name:"Adamantite bar" && quantity:<VAR_ADAMANTITE_BAR_MIN_QUANTITY) {
    hidden = true;
}

/*@ define:input:bars
type: number
label: Runite bar minimum quantity
group: Bars
*/
#define VAR_RUNITE_BAR_MIN_QUANTITY 0

apply (name:"Runite bar" && quantity:<VAR_RUNITE_BAR_MIN_QUANTITY) {
    hidden = true;
}

/*@ define:input:bars
type: number
label: Elemental metal minimum quantity
group: Bars
*/
#define VAR_ELEMENTAL_METAL_MIN_QUANTITY 0

apply (name:"Elemental metal" && quantity:<VAR_ELEMENTAL_METAL_MIN_QUANTITY) {
    hidden = true;
}

/*@ define:input:bars
type: number
label: Primed bar minimum quantity
group: Bars
*/
#define VAR_PRIMED_BAR_MIN_QUANTITY 0

apply (name:"Primed bar" && quantity:<VAR_PRIMED_BAR_MIN_QUANTITY) {
    hidden = true;
}

/*@ define:input:bars
type: number
label: Primed mind bar minimum quantity
group: Bars
*/
#define VAR_PRIMED_MIND_BAR_MIN_QUANTITY 0

apply (name:"Primed mind bar" && quantity:<VAR_PRIMED_MIND_BAR_MIN_QUANTITY) {
    hidden = true;
}

/*@ define:input:bars
type: number
label: Blurite bar minimum quantity
group: Bars
*/
#define VAR_BLURITE_BAR_MIN_QUANTITY 0

apply (name:"Blurite bar" && quantity:<VAR_BLURITE_BAR_MIN_QUANTITY) {
    hidden = true;
}

/*@ define:input:bars
type: number
label: Enchanted bar minimum quantity
group: Bars
*/
#define VAR_ENCHANTED_BAR_MIN_QUANTITY 0

apply (name:"Enchanted bar" && quantity:<VAR_ENCHANTED_BAR_MIN_QUANTITY) {
    hidden = true;
}

/*@ define:input:bars
type: number
label: Lovakite bar minimum quantity
group: Bars
*/
#define VAR_LOVAKITE_BAR_MIN_QUANTITY 0

apply (name:"Lovakite bar" && quantity:<VAR_LOVAKITE_BAR_MIN_QUANTITY) {
    hidden = true;
}

/*@ define:input:bars
type: number
label: "'Perfect' gold bar minimum quantity"
group: Bars
*/
#define VAR_PERFECT_GOLD_BAR_MIN_QUANTITY 0

apply (name:"'Perfect' gold bar" && quantity:<VAR_PERFECT_GOLD_BAR_MIN_QUANTITY) {
    hidden = true;
}


/*@ define:input:logs
type: enumlist
label: Logs to force hidden
group: Logs
enum: [
  "Logs",
  "Oak logs",
  "Willow logs",
  "Maple logs",
  "Yew logs",
  "Magic logs",
  "Redwood logs",
  "Teak logs",
  "Mahogany logs",
  "Achey tree logs",
  "Arctic pine logs",
  "Scrapey tree logs",
  "Juniper logs",
  "Bark",
  "Blisterwood logs"
]
*/
#define VAR_LOGS_HIDE []

/*@ define:input:logs
type: number
label: Logs minimum quantity
group: Logs
*/
#define VAR_LOGS_MIN_QUANTITY 0

/*@ define:input:logs
type: number
label: Oak logs minimum quantity
group: Logs
*/
#define VAR_OAK_LOGS_MIN_QUANTITY 0

/*@ define:input:logs
type: number
label: Willow logs minimum quantity
group: Logs
*/
#define VAR_WILLOW_LOGS_MIN_QUANTITY 0

/*@ define:input:logs
type: number
label: Maple logs minimum quantity
group: Logs
*/
#define VAR_MAPLE_LOGS_MIN_QUANTITY 0

/*@ define:input:logs
type: number
label: Yew logs minimum quantity
group: Logs
*/
#define VAR_YEW_LOGS_MIN_QUANTITY 0

/*@ define:input:logs
type: number
label: Magic logs minimum quantity
group: Logs
*/
#define VAR_MAGIC_LOGS_MIN_QUANTITY 0

/*@ define:input:logs
type: number
label: Redwood logs minimum quantity
group: Logs
*/
#define VAR_REDWOOD_LOGS_MIN_QUANTITY 0

/*@ define:input:logs
type: number
label: Teak logs minimum quantity
group: Logs
*/
#define VAR_TEAK_LOGS_MIN_QUANTITY 0

/*@ define:input:logs
type: number
label: Mahogany logs minimum quantity
group: Logs
*/
#define VAR_MAHOGANY_LOGS_MIN_QUANTITY 0

/*@ define:input:logs
type: number
label: Achey tree logs minimum quantity
group: Logs
*/
#define VAR_ACHEY_TREE_LOGS_MIN_QUANTITY 0

/*@ define:input:logs
type: number
label: Arctic pine logs minimum quantity
group: Logs
*/
#define VAR_ARCTIC_PINE_LOGS_MIN_QUANTITY 0

/*@ define:input:logs
type: number
label: Scrapey tree logs minimum quantity
group: Logs
*/
#define VAR_SCRAPEY_TREE_LOGS_MIN_QUANTITY 0

/*@ define:input:logs
type: number
label: Juniper logs minimum quantity
group: Logs
*/
#define VAR_JUNIPER_LOGS_MIN_QUANTITY 0

/*@ define:input:logs
type: number
label: Bark minimum quantity
group: Logs
*/
#define VAR_BARK_MIN_QUANTITY 0

/*@ define:input:logs
type: number
label: Blisterwood logs minimum quantity
group: Logs
*/
#define VAR_BLISTERWOOD_LOGS_MIN_QUANTITY 0

apply (name:VAR_LOGS_HIDE) {
    hidden = true;
}

apply (name:"Logs" && quantity:<VAR_LOGS_MIN_QUANTITY) {
    hidden = true;
}

apply (name:"Oak logs" && quantity:<VAR_OAK_LOGS_MIN_QUANTITY) {
    hidden = true;
}

apply (name:"Willow logs" && quantity:<VAR_WILLOW_LOGS_MIN_QUANTITY) {
    hidden = true;
}

apply (name:"Maple logs" && quantity:<VAR_MAPLE_LOGS_MIN_QUANTITY) {
    hidden = true;
}

apply (name:"Yew logs" && quantity:<VAR_YEW_LOGS_MIN_QUANTITY) {
    hidden = true;
}

apply (name:"Magic logs" && quantity:<VAR_MAGIC_LOGS_MIN_QUANTITY) {
    hidden = true;
}

apply (name:"Redwood logs" && quantity:<VAR_REDWOOD_LOGS_MIN_QUANTITY) {
    hidden = true;
}

apply (name:"Teak logs" && quantity:<VAR_TEAK_LOGS_MIN_QUANTITY) {
    hidden = true;
}

apply (name:"Mahogany logs" && quantity:<VAR_MAHOGANY_LOGS_MIN_QUANTITY) {
    hidden = true;
}

apply (name:"Achey tree logs" && quantity:<VAR_ACHEY_TREE_LOGS_MIN_QUANTITY) {
    hidden = true;
}

apply (name:"Arctic pine logs" && quantity:<VAR_ARCTIC_PINE_LOGS_MIN_QUANTITY) {
    hidden = true;
}

apply (name:"Scrapey tree logs" && quantity:<VAR_SCRAPEY_TREE_LOGS_MIN_QUANTITY) {
    hidden = true;
}

apply (name:"Juniper logs" && quantity:<VAR_JUNIPER_LOGS_MIN_QUANTITY) {
    hidden = true;
}

apply (name:"Bark" && quantity:<VAR_BARK_MIN_QUANTITY) {
    hidden = true;
}

apply (name:"Blisterwood logs" && quantity:<VAR_BLISTERWOOD_LOGS_MIN_QUANTITY) {
    hidden = true;
}


/*@ define:input:farming_seeds
type: number
label: Hide seeds below this value
group: Farming seeds
*/
#define VAR_FARMING_SEEDS_MINIMUM_VALUE 0

apply ((name:CONST_FARMING_SEEDS_ALLOTMENT_LIST || name:CONST_FARMING_SEEDS_FLOWER_LIST || name:CONST_FARMING_SEEDS_HERB_LIST || name:CONST_FARMING_SEEDS_HOPS_LIST || name:CONST_FARMING_SEEDS_BUSH_LIST || name:CONST_FARMING_SEEDS_TREE_LIST || name:CONST_FARMING_SEEDS_FRUIT_TREE_LIST || name:CONST_FARMING_SEEDS_SPECIAL_TREE_LIST || name:CONST_FARMING_SEEDS_SPECIAL_LIST || name:CONST_FARMING_SEEDS_ANIMA_LIST) && value:<VAR_FARMING_SEEDS_MINIMUM_VALUE) {
    hidden = true;
}

/*@ define:input:farming_seeds
type: enumlist
label: Allotment seeds to force hidden
group: Farming seeds
enum: [
  "Potato seed",
  "Onion seed",
  "Cabbage seed",
  "Tomato seed",
  "Sweetcorn seed",
  "Strawberry seed",
  "Watermelon seed",
  "Snape grass seed"
]
*/
#define VAR_FARMING_SEEDS_ALLOTMENT_HIDE []

apply (name:VAR_FARMING_SEEDS_ALLOTMENT_HIDE) {
    hidden = true;
}

/*@ define:input:farming_seeds
type: enumlist
label: Flower seeds to force hidden
group: Farming seeds
enum: [
  "Marigold seed",
  "Rosemary seed",
  "Nasturtium seed",
  "Woad seed",
  "Limpwurt seed",
  "White lily seed"
]
*/
#define VAR_FARMING_SEEDS_FLOWER_HIDE []

apply (name:VAR_FARMING_SEEDS_FLOWER_HIDE) {
    hidden = true;
}

/*@ define:input:farming_seeds
type: enumlist
label: Herb seeds to force hidden
group: Farming seeds
enum: [
  "Guam seed",
  "Marrentill seed",
  "Tarromin seed",
  "Harralander seed",
  "Ranarr seed",
  "Toadflax seed",
  "Irit seed",
  "Avantoe seed",
  "Kwuarm seed",
  "Snapdragon seed",
  "Huasca seed",
  "Cadantine seed",
  "Lantadyme seed",
  "Dwarf weed seed",
  "Torstol seed"
]
*/
#define VAR_FARMING_SEEDS_HERB_HIDE []

apply (name:VAR_FARMING_SEEDS_HERB_HIDE) {
    hidden = true;
}

/*@ define:input:farming_seeds
type: enumlist
label: Hops seeds to force hidden
group: Farming seeds
enum: [
  "Barley seed",
  "Hammerstone seed",
  "Asgarnian seed",
  "Jute seed",
  "Yanillian seed",
  "Krandorian seed",
  "Wildblood seed"
]
*/
#define VAR_FARMING_SEEDS_HOPS_HIDE []

apply (name:VAR_FARMING_SEEDS_HOPS_HIDE) {
    hidden = true;
}

/*@ define:input:farming_seeds
type: enumlist
label: Bush seeds to force hidden
group: Farming seeds
enum: [
  "Redberry seed",
  "Cadavaberry seed",
  "Dwellberry seed",
  "Jangerberry seed",
  "Whiteberry seed",
  "Poison ivy seed"
]
*/
#define VAR_FARMING_SEEDS_BUSH_HIDE []

apply (name:VAR_FARMING_SEEDS_BUSH_HIDE) {
    hidden = true;
}

/*@ define:input:farming_seeds
type: enumlist
label: Tree seeds to force hidden
group: Farming seeds
enum: [
  "Acorn",
  "Willow seed",
  "Maple seed",
  "Yew seed",
  "Magic seed"
]
*/
#define VAR_FARMING_SEEDS_TREE_HIDE []

apply (name:VAR_FARMING_SEEDS_TREE_HIDE) {
    hidden = true;
}

/*@ define:input:farming_seeds
type: enumlist
label: Fruit tree seeds to force hidden
group: Farming seeds
enum: [
  "Apple tree seed",
  "Banana tree seed",
  "Orange tree seed",
  "Curry tree seed",
  "Pineapple seed",
  "Papaya tree seed",
  "Palm tree seed",
  "Dragonfruit tree seed"
]
*/
#define VAR_FARMING_SEEDS_FRUIT_TREE_HIDE []

apply (name:VAR_FARMING_SEEDS_FRUIT_TREE_HIDE) {
    hidden = true;
}

/*@ define:input:farming_seeds
type: enumlist
label: Fruit tree seeds to force hidden
group: Farming seeds
enum: [
  "Teak seed",
  "Mahogany seed",
  "Calquat tree seed",
  "Crystal acorn",
  "Spirit seed",
  "Celastrus seed",
  "Redwood tree seed"
]
*/
#define VAR_FARMING_SEEDS_SPECIAL_TREE_HIDE []

apply (name:VAR_FARMING_SEEDS_SPECIAL_TREE_HIDE) {
    hidden = true;
}

/*@ define:input:farming_seeds
type: enumlist
label: Special seeds to force hidden
group: Farming seeds
enum: [
  "Seaweed spore",
  "Grape seed",
  "Mushroom spore",
  "Belladonna seed",
  "Hespori seed",
  "Cactus seed",
  "Potato cactus seed"
]
*/
#define VAR_FARMING_SEEDS_SPECIAL_HIDE []

apply (name:VAR_FARMING_SEEDS_SPECIAL_HIDE) {
    hidden = true;
}

/*@ define:input:farming_seeds
type: enumlist
label: Anima seeds to force hidden
group: Farming seeds
enum: [
  "Kronos seed",
  "Iasor seed",
  "Attas seed"
]
*/
#define VAR_FARMING_SEEDS_ANIMA_HIDE []

apply (name:VAR_FARMING_SEEDS_ANIMA_HIDE) {
    hidden = true;
}


/*@ define:input:farming_seeds
type: enumlist
label: Allotment seeds to force shown
group: Farming seeds
enum: [
  "Potato seed",
  "Onion seed",
  "Cabbage seed",
  "Tomato seed",
  "Sweetcorn seed",
  "Strawberry seed",
  "Watermelon seed",
  "Snape grass seed"
]
*/
#define VAR_FARMING_SEEDS_ALLOTMENT_SHOW []

apply (name:VAR_FARMING_SEEDS_ALLOTMENT_SHOW) {
    hidden = false;
}

/*@ define:input:farming_seeds
type: enumlist
label: Flower seeds to force shown
group: Farming seeds
enum: [
  "Marigold seed",
  "Rosemary seed",
  "Nasturtium seed",
  "Woad seed",
  "Limpwurt seed",
  "White lily seed"
]
*/
#define VAR_FARMING_SEEDS_FLOWER_SHOW []

apply (name:VAR_FARMING_SEEDS_FLOWER_SHOW) {
    hidden = false;
}

/*@ define:input:farming_seeds
type: enumlist
label: Herb seeds to force shown
group: Farming seeds
enum: [
  "Guam seed",
  "Marrentill seed",
  "Tarromin seed",
  "Harralander seed",
  "Ranarr seed",
  "Toadflax seed",
  "Irit seed",
  "Avantoe seed",
  "Kwuarm seed",
  "Snapdragon seed",
  "Huasca seed",
  "Cadantine seed",
  "Lantadyme seed",
  "Dwarf weed seed",
  "Torstol seed"
]
*/
#define VAR_FARMING_SEEDS_HERB_SHOW []

apply (name:VAR_FARMING_SEEDS_HERB_SHOW) {
    hidden = false;
}

/*@ define:input:farming_seeds
type: enumlist
label: Hops seeds to force shown
group: Farming seeds
enum: [
  "Barley seed",
  "Hammerstone seed",
  "Asgarnian seed",
  "Jute seed",
  "Yanillian seed",
  "Krandorian seed",
  "Wildblood seed"
]
*/
#define VAR_FARMING_SEEDS_HOPS_SHOW []

apply (name:VAR_FARMING_SEEDS_HOPS_SHOW) {
    hidden = false;
}

/*@ define:input:farming_seeds
type: enumlist
label: Bush seeds to force shown
group: Farming seeds
enum: [
  "Redberry seed",
  "Cadavaberry seed",
  "Dwellberry seed",
  "Jangerberry seed",
  "Whiteberry seed",
  "Poison ivy seed"
]
*/
#define VAR_FARMING_SEEDS_BUSH_SHOW []

apply (name:VAR_FARMING_SEEDS_BUSH_SHOW) {
    hidden = false;
}

/*@ define:input:farming_seeds
type: enumlist
label: Tree seeds to force shown
group: Farming seeds
enum: [
  "Acorn",
  "Willow seed",
  "Maple seed",
  "Yew seed",
  "Magic seed"
]
*/
#define VAR_FARMING_SEEDS_TREE_SHOW []

apply (name:VAR_FARMING_SEEDS_TREE_SHOW) {
    hidden = false;
}

/*@ define:input:farming_seeds
type: enumlist
label: Fruit tree seeds to force shown
group: Farming seeds
enum: [
  "Apple seed",
  "Banana seed",
  "Orange seed",
  "Curry seed",
  "Pineapple seed",
  "Papaya seed",
  "Palm tree seed",
  "Dragonfruit seed"
]
*/
#define VAR_FARMING_SEEDS_FRUIT_TREE_SHOW []

apply (name:VAR_FARMING_SEEDS_FRUIT_TREE_SHOW) {
    hidden = false;
}

/*@ define:input:farming_seeds
type: enumlist
label: Fruit tree seeds to force shown
group: Farming seeds
enum: [
  "Teak seed",
  "Mahogany seed",
  "Calquat tree seed",
  "Crystal acorn",
  "Spirit seed",
  "Celastrus seed",
  "Redwood tree seed"
]
*/
#define VAR_FARMING_SEEDS_SPECIAL_TREE_SHOW []

apply (name:VAR_FARMING_SEEDS_SPECIAL_TREE_SHOW) {
    hidden = false;
}

/*@ define:input:farming_seeds
type: enumlist
label: Special seeds to force shown
group: Farming seeds
enum: [
  "Seaweed spore",
  "Grape seed",
  "Mushroom spore",
  "Belladonna seed",
  "Hespori seed",
  "Cactus seed",
  "Potato cactus seed"
]
*/
#define VAR_FARMING_SEEDS_SPECIAL_SHOW []

apply (name:VAR_FARMING_SEEDS_SPECIAL_SHOW) {
    hidden = false;
}

/*@ define:input:farming_seeds
type: enumlist
label: Anima seeds to force shown
group: Farming seeds
enum: [
  "Kronos seed",
  "Iasor seed",
  "Attas seed"
]
*/
#define VAR_FARMING_SEEDS_ANIMA_SHOW []

apply (name:VAR_FARMING_SEEDS_ANIMA_SHOW) {
    hidden = false;
}


/*@ define:input:herblore_secondaries
type: enumlist
label: Secondaries to force hidden
group: Herblore secondaries
enum: [
  "Eye of newt",
  "Unicorn horn dust",
  "Limpwurt root",
  "Volcanic ash",
  "Red spiders' eggs",
  "Chocolate dust",
  "White berries",
  "Toad's legs",
  "Goat horn dust",
  "Snape grass",
  "Mort myre fungus",
  "Kebbit teeth dust",
  "Dragon scale dust",
  "Nail beast nails",
  "Yew roots",
  "Wine of zamorak",
  "Potato cactus",
  "Jangerberries",
  "Magic roots",
  "Crushed nest",
  "Poison ivy berries",
  "Nihil dust",
  "Lily of the sands",
  "Aldarium",
  "Araxyte venom sack"
]
*/
#define VAR_SECONDARIES_HIDE []

/*@ define:input:herblore_secondaries
type: enumlist
label: Secondaries to force shown
group: Herblore secondaries
enum: [
  "Eye of newt",
  "Unicorn horn dust",
  "Limpwurt root",
  "Volcanic ash",
  "Red spiders' eggs",
  "Chocolate dust",
  "White berries",
  "Toad's legs",
  "Goat horn dust",
  "Snape grass",
  "Mort myre fungus",
  "Kebbit teeth dust",
  "Dragon scale dust",
  "Nail beast nails",
  "Yew roots",
  "Wine of zamorak",
  "Potato cactus",
  "Jangerberries",
  "Magic roots",
  "Crushed nest",
  "Poison ivy berries",
  "Nihil dust",
  "Lily of the sands",
  "Aldarium",
  "Araxyte venom sack"
]
*/
#define VAR_SECONDARIES_SHOW []

/*@ define:input:herblore_secondaries
type: number
label: Minimum value to display secondaries at
group: Herblore secondaries
*/
#define VAR_SECONDARIES_MINIMUM_VALUE 0

apply (name:CONST_SECONDARIES_LIST && value:<VAR_SECONDARIES_MINIMUM_VALUE) {
    hidden = true;
}

apply (name:VAR_SECONDARIES_HIDE) {
    hidden = true;
}

apply (name:VAR_SECONDARIES_SHOW) {
    hidden = false;
}


/*@ define:input:currency
type: stringlist
label: Currency to force hidden
group: Currency
*/
#define VAR_CURRENCY_HIDE []

apply (name:VAR_CURRENCY_HIDE) {
    hidden = true;
}

/*@ define:input:currency
type: number
label: Abyssal pearls minimum quantity
group: Currency
*/
#define VAR_ABYSSAL_PEARLS_MIN_QUANTITY 0

apply (name:"Archery ticket" && quantity:<VAR_ARCHERY_TICKET_MIN_QUANTITY) {
    hidden = true;
}

/*@ define:input:currency
type: number
label: Agility arena ticket minimum quantity
group: Currency
*/
#define VAR_AGILITY_ARENA_TICKET_MIN_QUANTITY 0

apply (name:"Coins" && quantity:<VAR_COINS_MIN_QUANTITY) {
    hidden = true;
}

/*@ define:input:currency
type: number
label: Anima-infused bark minimum quantity
group: Currency
*/
#define VAR_ANIMA_INFUSED_BARK_MIN_QUANTITY 0

apply (name:"Mole claw" && quantity:<VAR_MOLE_CLAW_MIN_QUANTITY) {
    hidden = true;
}

/*@ define:input:currency
type: number
label: Archery ticket minimum quantity
group: Currency
*/
#define VAR_ARCHERY_TICKET_MIN_QUANTITY 0

apply (name:"Mole skin" && quantity:<VAR_MOLE_SKIN_MIN_QUANTITY) {
    hidden = true;
}

/*@ define:input:currency
type: number
label: Barronite shards minimum quantity
group: Currency
*/
#define VAR_BARRONITE_SHARDS_MIN_QUANTITY 0

apply (name:"Numulite" && quantity:<VAR_NUMULITE_MIN_QUANTITY) {
    hidden = true;
}

/*@ define:input:currency
type: number
label: Blood money minimum quantity
group: Currency
*/
#define VAR_BLOOD_MONEY_MIN_QUANTITY 0

apply (name:"Platinum token" && quantity:<VAR_PLATINUM_TOKEN_MIN_QUANTITY) {
    hidden = true;
}

/*@ define:input:currency
type: number
label: Brimhaven voucher minimum quantity
group: Currency
*/
#define VAR_BRIMHAVEN_VOUCHER_MIN_QUANTITY 0

apply (name:"Trading sticks" && quantity:<VAR_TRADING_STICKS_MIN_QUANTITY) {
    hidden = true;
}

/*@ define:input:currency
type: number
label: Castle wars ticket minimum quantity
group: Currency
*/
#define VAR_CASTLE_WARS_TICKET_MIN_QUANTITY 0

apply (name:"Shantay pass" && quantity:<VAR_SHANTAY_PASS_MIN_QUANTITY) {
    hidden = true;
}

/*@ define:input:currency
type: number
label: Coins minimum quantity
group: Currency
*/
#define VAR_COINS_MIN_QUANTITY 0

apply (name:"Ship ticket" && quantity:<VAR_SHIP_TICKET_MIN_QUANTITY) {
    hidden = true;
}

/*@ define:input:currency
type: number
label: Ecto-token minimum quantity
group: Currency
*/
#define VAR_ECTO_TOKEN_MIN_QUANTITY 0

apply (name:"Abyssal pearls" && quantity:<VAR_ABYSSAL_PEARLS_MIN_QUANTITY) {
    hidden = true;
}

/*@ define:input:currency
type: number
label: Frog token minimum quantity
group: Currency
*/
#define VAR_FROG_TOKEN_MIN_QUANTITY 0

apply (name:"Anima-infused bark" && quantity:<VAR_ANIMA_INFUSED_BARK_MIN_QUANTITY) {
    hidden = true;
}

/*@ define:input:currency
type: number
label: Glistening tear minimum quantity
group: Currency
*/
#define VAR_GLISTENING_TEAR_MIN_QUANTITY 0

apply (name:"Agility arena ticket" && quantity:<VAR_AGILITY_ARENA_TICKET_MIN_QUANTITY) {
    hidden = true;
}

/*@ define:input:currency
type: number
label: Golden nugget minimum quantity
group: Currency
*/
#define VAR_GOLDEN_NUGGET_MIN_QUANTITY 0

apply (name:"Barronite shards" && quantity:<VAR_BARRONITE_SHARDS_MIN_QUANTITY) {
    hidden = true;
}

/*@ define:input:currency
type: number
label: Hallowed mark minimum quantity
group: Currency
*/
#define VAR_HALLOWED_MARK_MIN_QUANTITY 0

apply (name:"Blood money" && quantity:<VAR_BLOOD_MONEY_MIN_QUANTITY) {
    hidden = true;
}

/*@ define:input:currency
type: number
label: Intelligence minimum quantity
group: Currency
*/
#define VAR_INTELLIGENCE_MIN_QUANTITY 0

apply (name:"Brimhaven voucher" && quantity:<VAR_BRIMHAVEN_VOUCHER_MIN_QUANTITY) {
    hidden = true;
}

/*@ define:input:currency
type: number
label: Mark of grace minimum quantity
group: Currency
*/
#define VAR_MARK_OF_GRACE_MIN_QUANTITY 0

apply (name:"Castle wars ticket" && quantity:<VAR_CASTLE_WARS_TICKET_MIN_QUANTITY) {
    hidden = true;
}

/*@ define:input:currency
type: number
label: Mermaid's tear minimum quantity
group: Currency
*/
#define VAR_MERMAIDS_TEAR_MIN_QUANTITY 0

apply (name:"Ecto-token" && quantity:<VAR_ECTO_TOKEN_MIN_QUANTITY) {
    hidden = true;
}

/*@ define:input:currency
type: number
label: Minnow minimum quantity
group: Currency
*/
#define VAR_MINNOW_MIN_QUANTITY 0

apply (name:"Frog token" && quantity:<VAR_FROG_TOKEN_MIN_QUANTITY) {
    hidden = true;
}

/*@ define:input:currency
type: number
label: Molch pearl minimum quantity
group: Currency
*/
#define VAR_MOLCH_PEARL_MIN_QUANTITY 0

apply (name:"Golden nugget" && quantity:<VAR_GOLDEN_NUGGET_MIN_QUANTITY) {
    hidden = true;
}

/*@ define:input:currency
type: number
label: Mole claw minimum quantity
group: Currency
*/
#define VAR_MOLE_CLAW_MIN_QUANTITY 0

apply (name:"Glistening tear" && quantity:<VAR_GLISTENING_TEAR_MIN_QUANTITY) {
    hidden = true;
}

/*@ define:input:currency
type: number
label: Mole skin minimum quantity
group: Currency
*/
#define VAR_MOLE_SKIN_MIN_QUANTITY 0

apply (name:"Hallowed mark" && quantity:<VAR_HALLOWED_MARK_MIN_QUANTITY) {
    hidden = true;
}

/*@ define:input:currency
type: number
label: Nuggets minimum quantity
group: Currency
*/
#define VAR_NUGGETS_MIN_QUANTITY 0

apply (name:"Intelligence" && quantity:<VAR_INTELLIGENCE_MIN_QUANTITY) {
    hidden = true;
}

/*@ define:input:currency
type: number
label: Numulite minimum quantity
group: Currency
*/
#define VAR_NUMULITE_MIN_QUANTITY 0

apply (name:"Mark of grace" && quantity:<VAR_MARK_OF_GRACE_MIN_QUANTITY) {
    hidden = true;
}

/*@ define:input:currency
type: number
label: Paramaya ticket minimum quantity
group: Currency
*/
#define VAR_PARAMAYA_TICKET_MIN_QUANTITY 0

apply (name:"Mermaid's tear" && quantity:<VAR_MERMAIDS_TEAR_MIN_QUANTITY) {
    hidden = true;
}

/*@ define:input:currency
type: number
label: Platinum token minimum quantity
group: Currency
*/
#define VAR_PLATINUM_TOKEN_MIN_QUANTITY 0

apply (name:"Minnow" && quantity:<VAR_MINNOW_MIN_QUANTITY) {
    hidden = true;
}

/*@ define:input:currency
type: number
label: Rare creature parts minimum quantity
group: Currency
*/
#define VAR_RARE_CREATURE_PARTS_MIN_QUANTITY 0

apply (name:"Molch pearl" && quantity:<VAR_MOLCH_PEARL_MIN_QUANTITY) {
    hidden = true;
}

/*@ define:input:currency
type: number
label: Reward token credits minimum quantity
group: Currency
*/
#define VAR_REWARD_TOKEN_CREDITS_MIN_QUANTITY 0

apply (name:"Nuggets" && quantity:<VAR_NUGGETS_MIN_QUANTITY) {
    hidden = true;
}

/*@ define:input:currency
type: number
label: Shantay pass minimum quantity
group: Currency
*/
#define VAR_SHANTAY_PASS_MIN_QUANTITY 0

apply (name:"Paramaya ticket" && quantity:<VAR_PARAMAYA_TICKET_MIN_QUANTITY) {
    hidden = true;
}

/*@ define:input:currency
type: number
label: Ship ticket minimum quantity
group: Currency
*/
#define VAR_SHIP_TICKET_MIN_QUANTITY 0

apply (name:"Rare creature parts" && quantity:<VAR_RARE_CREATURE_PARTS_MIN_QUANTITY) {
    hidden = true;
}

/*@ define:input:currency
type: number
label: Stardust minimum quantity
group: Currency
*/
#define VAR_STARDUST_MIN_QUANTITY 0

apply (name:"Reward token credits" && quantity:<VAR_REWARD_TOKEN_CREDITS_MIN_QUANTITY) {
    hidden = true;
}

/*@ define:input:currency
type: number
label: Termites minimum quantity
group: Currency
*/
#define VAR_TERMITES_MIN_QUANTITY 0

apply (name:"Stardust" && quantity:<VAR_STARDUST_MIN_QUANTITY) {
    hidden = true;
}

/*@ define:input:currency
type: number
label: Tokkul minimum quantity
group: Currency
*/
#define VAR_TOKKUL_MIN_QUANTITY 0

apply (name:"Tokkul" && quantity:<VAR_TOKKUL_MIN_QUANTITY) {
    hidden = true;
}

/*@ define:input:currency
type: number
label: Trading sticks minimum quantity
group: Currency
*/
#define VAR_TRADING_STICKS_MIN_QUANTITY 0

apply (name:"Termites" && quantity:<VAR_TERMITES_MIN_QUANTITY) {
    hidden = true;
}

/*@ define:input:currency
type: number
label: Unidentified minerals minimum quantity
group: Currency
*/
#define VAR_UNIDENTIFIED_MINERALS_MIN_QUANTITY 0

apply (name:"Unidentified minerals" && quantity:<VAR_UNIDENTIFIED_MINERALS_MIN_QUANTITY) {
    hidden = true;
}

/*@ define:input:currency
type: number
label: Warrior guild token minimum quantity
group: Currency
*/
#define VAR_WARRIOR_GUILD_TOKEN_MIN_QUANTITY 0

apply (name:"Warrior guild token" && quantity:<VAR_WARRIOR_GUILD_TOKEN_MIN_QUANTITY) {
    hidden = true;
}


/*@ define:input:metal_equipment
type: enumlist
label: Metal equipment to force hidden
group: Metal Equipment
enum: [
  "Bronze*",
  "Iron*",
  "Steel*",
  "Black*",
  "Mithril*",
  "Adamant*",
  "Rune*",
  "Dragon*"
]
*/
#define VAR_METAL_EQUIPMENT_TIERS_HIDE ["Bronze*","Iron*","Steel*","Mithril*","Black*"]

apply ((name:CONST_BRONZE_ONE_HANDED_MELEE_WEAPONS || name:CONST_BRONZE_TWO_HANDED_MELEE_WEAPONS || name:CONST_BRONZE_RANGED_WEAPONS || name:CONST_BRONZE_AMMO || name:CONST_BRONZE_ARMOUR || name:CONST_BRONZE_OTHER) && name:VAR_METAL_EQUIPMENT_TIERS_HIDE && !name:CONST_DEFENDERS_LIST) {
    hidden = true;
}
apply ((name:CONST_IRON_ONE_HANDED_MELEE_WEAPONS || name:CONST_IRON_TWO_HANDED_MELEE_WEAPONS || name:CONST_IRON_RANGED_WEAPONS || name:CONST_IRON_AMMO || name:CONST_IRON_ARMOUR || name:CONST_IRON_OTHER) && name:VAR_METAL_EQUIPMENT_TIERS_HIDE && !name:CONST_DEFENDERS_LIST) {
    hidden = true;
}
apply ((name:CONST_STEEL_ONE_HANDED_MELEE_WEAPONS || name:CONST_STEEL_TWO_HANDED_MELEE_WEAPONS || name:CONST_STEEL_RANGED_WEAPONS || name:CONST_STEEL_AMMO || name:CONST_STEEL_ARMOUR || name:CONST_STEEL_OTHER) && name:VAR_METAL_EQUIPMENT_TIERS_HIDE && !name:CONST_DEFENDERS_LIST) {
    hidden = true;
}
apply ((name:CONST_BLACK_ONE_HANDED_MELEE_WEAPONS || name:CONST_BLACK_TWO_HANDED_MELEE_WEAPONS || name:CONST_BLACK_RANGED_WEAPONS || name:CONST_BLACK_AMMO || name:CONST_BLACK_ARMOUR || name:CONST_BLACK_OTHER) && name:VAR_METAL_EQUIPMENT_TIERS_HIDE && !name:CONST_DEFENDERS_LIST) {
    hidden = true;
}
apply ((name:CONST_MITHRIL_ONE_HANDED_MELEE_WEAPONS || name:CONST_MITHRIL_TWO_HANDED_MELEE_WEAPONS || name:CONST_MITHRIL_RANGED_WEAPONS || name:CONST_MITHRIL_AMMO || name:CONST_MITHRIL_ARMOUR || name:CONST_MITHRIL_OTHER) && name:VAR_METAL_EQUIPMENT_TIERS_HIDE && !name:CONST_DEFENDERS_LIST) {
    hidden = true;
}
apply ((name:CONST_ADAMANT_ONE_HANDED_MELEE_WEAPONS || name:CONST_ADAMANT_TWO_HANDED_MELEE_WEAPONS || name:CONST_ADAMANT_RANGED_WEAPONS || name:CONST_ADAMANT_AMMO || name:CONST_ADAMANT_ARMOUR || name:CONST_ADAMANT_OTHER) && name:VAR_METAL_EQUIPMENT_TIERS_HIDE && !name:CONST_DEFENDERS_LIST) {
    hidden = true;
}
apply ((name:CONST_RUNE_ONE_HANDED_MELEE_WEAPONS || name:CONST_RUNE_TWO_HANDED_MELEE_WEAPONS || name:CONST_RUNE_RANGED_WEAPONS || name:CONST_RUNE_AMMO || name:CONST_RUNE_ARMOUR) && name:VAR_METAL_EQUIPMENT_TIERS_HIDE && !name:CONST_DEFENDERS_LIST) {
    hidden = true;
}
apply ((name:CONST_DRAGON_ONE_HANDED_MELEE_WEAPONS || name:CONST_DRAGON_TWO_HANDED_MELEE_WEAPONS || name:CONST_DRAGON_RANGED_WEAPONS || name:CONST_DRAGON_AMMO || name:CONST_DRAGON_ARMOUR) && name:VAR_METAL_EQUIPMENT_TIERS_HIDE && !name:CONST_DEFENDERS_LIST) {
    hidden = true;
}


/*@ define:module:item_category_styles
name: Item Styles
subtitle: Individual items and categories
description: |
  Add custom styling to specific items.
*/


/*@ define:input:item_category_styles
type: style
label: Currency Style
group: Currency
exampleItem: Coins
exampleItemId: 1004
*/
#define VAR_CURRENCY_CUSTOMSTYLE textColor = "#ffffe500";borderColor = "#ffffe500";menuTextColor = "#ffffe500";

apply (name:CONST_CURRENCY_LIST) {
    VAR_CURRENCY_CUSTOMSTYLE 
}

/*@ define:input:item_category_styles
type: style
label: Beginner clue scroll custom style
group: Clue Scrolls Styles
exampleItem: Clue scroll (beginner)
exampleItemId: 23182
*/
#define VAR_CLUE_SCROLLS_BEGINNER_CUSTOMSTYLE textColor = "#FFCFC8C8";backgroundColor = "#2bcfc8c8";borderColor = "#FFCFC8C8";menuTextColor = "#FFCFC8C8";textAccent = 1;icon = CurrentItem();

apply (name:"Clue scroll (beginner)" || name:"Scroll box (beginner)") {
    VAR_CLUE_SCROLLS_BEGINNER_CUSTOMSTYLE 
}

/*@ define:input:item_category_styles
type: style
label: Easy clue scroll custom style
group: Clue Scrolls Styles
exampleItem: Clue scroll (easy)
exampleItemId: 2677
*/
#define VAR_CLUE_SCROLLS_EASY_CUSTOMSTYLE textColor = "#FF248F26";backgroundColor = "#2e448c46";borderColor = "#FF248F26";menuTextColor = "#FF248F26";textAccent = 1;icon = CurrentItem();

apply (name:"Clue scroll (easy)" || name:"Scroll box (easy)") {
    VAR_CLUE_SCROLLS_EASY_CUSTOMSTYLE 
}

/*@ define:input:item_category_styles
type: style
label: Medium clue scroll custom style
group: Clue Scrolls Styles
exampleItem: Clue scroll (medium)
exampleItemId: 2801
*/
#define VAR_CLUE_SCROLLS_MEDIUM_CUSTOMSTYLE textColor = "#FF6CBBBF";backgroundColor = "#386dbbbf";borderColor = "#FF6CBBBF";menuTextColor = "#FF6CBBBF";textAccent = 1;icon = CurrentItem();

apply (name:"Clue scroll (medium)" || name:"Scroll box (medium)" || name:"Challenge scroll (medium)") {
    VAR_CLUE_SCROLLS_MEDIUM_CUSTOMSTYLE 
}

/*@ define:input:item_category_styles
type: style
label: Hard clue scroll custom style
group: Clue Scrolls Styles
exampleItem: Clue scroll (hard)
exampleItemId: 2722
*/
#define VAR_CLUE_SCROLLS_HARD_CUSTOMSTYLE textColor = "#FFA343BD";backgroundColor = "#3b5b256b";borderColor = "#FFA343BD";menuTextColor = "#FFA343BD";textAccent = 1;icon = CurrentItem();

apply (name:"Clue scroll (hard)" || name:"Scroll box (hard)" || name:"Challenge scroll (hard)") {
    VAR_CLUE_SCROLLS_HARD_CUSTOMSTYLE 
}

/*@ define:input:item_category_styles
type: style
label: Elite clue scroll custom style
group: Clue Scrolls Styles
exampleItem: Clue scroll (elite)
exampleItemId: 12073
*/
#define VAR_CLUE_SCROLLS_ELITE_CUSTOMSTYLE textColor = "#FFEED11D";backgroundColor = "#36b49f17";borderColor = "#FFEED11D";menuTextColor = "#ffedd11c";textAccent = 1;icon = CurrentItem();

apply (name:"Clue scroll (elite)" || name:"Scroll box (elite)" || name:"Challenge scroll (elite)") {
    VAR_CLUE_SCROLLS_ELITE_CUSTOMSTYLE 
}

/*@ define:input:item_category_styles
type: style
label: Master clue scroll custom style
group: Clue Scrolls Styles
exampleItem: Clue scroll (master)
exampleItemId: 19835
*/
#define VAR_CLUE_SCROLLS_MASTER_CUSTOMSTYLE textColor = "#FFC33C30";backgroundColor = "#36c23d30";borderColor = "#b8c23d30";menuTextColor = "#FFC33C30";textAccent = 1;icon = CurrentItem();

apply (name:"Clue scroll (master)" || name:"Scroll box (master)") {
    VAR_CLUE_SCROLLS_MASTER_CUSTOMSTYLE 
}


/*@ define:input:item_category_styles
type: style
label: Larran's key
group: Slayer Styles
exampleItem: Larran's key
*/
#define VAR_SLAYER_LARRANS_KEY_CUSTOMSTYLE textColor = "#A48614";backgroundColor = "#57a38614";borderColor = "#A48614";lootbeamColor = "#A48614";menuTextColor = "#A48614";textAccent = 4;fontType = 3;showLootbeam = true;icon = CurrentItem();

apply (name:"Larran's key") {
    VAR_SLAYER_LARRANS_KEY_CUSTOMSTYLE 
}

/*@ define:input:item_category_styles
type: style
label: Brimstone key
group: Slayer Styles
exampleItem: Brimstone key
*/
#define VAR_SLAYER_BRIMSTONE_KEY_CUSTOMSTYLE textColor = "#1F545C";backgroundColor = "#66274347";borderColor = "#FF000000";lootbeamColor = "#1F545C";menuTextColor = "#ff00aac5";textAccent = 4;fontType = 3;showLootbeam = true;icon = CurrentItem();

apply (name:"Brimstone key") {
    VAR_SLAYER_BRIMSTONE_KEY_CUSTOMSTYLE 
}

/*@ define:input:item_category_styles
type: style
label: Eternal gem
group: Slayer Styles
exampleItem: Eternal gem
*/
#define VAR_SLAYER_ETERNAL_GEM_CUSTOMSTYLE textColor = "#42B9C6";backgroundColor = "#7d65bf9b";borderColor = "#A3C74E";lootbeamColor = "#42B9C6";menuTextColor = "#42B9C6";textAccent = 4;fontType = 3;showLootbeam = true;icon = CurrentItem();

apply (name:"Eternal gem") {
    VAR_SLAYER_ETERNAL_GEM_CUSTOMSTYLE 
}

/*@ define:input:item_category_styles
type: style
label: Imbued heart
group: Slayer Styles
exampleItem: Imbued heart
*/
#define VAR_SLAYER_IMBUED_HEART_CUSTOMSTYLE textColor = "#6B3C52";backgroundColor = "#91ffffff";borderColor = "#6B3C52";lootbeamColor = "#6B3C52";menuTextColor = "#ffbf0059";textAccent = 1;fontType = 3;showLootbeam = true;icon = CurrentItem();

apply (name:"Imbued heart") {
    VAR_SLAYER_IMBUED_HEART_CUSTOMSTYLE 
}

/*@ define:input:item_category_styles
type: boolean
label: Dont let Eternal gem get filtered out or restyled in future modules
group: Power User
*/
#define VAR_SLAYER_ETERNAL_GEM_TERMINATE true

/*@ define:input:item_category_styles
type: boolean
label: Dont let Imbued heart get filtered out or restyled in future modules
group: Power User
*/
#define VAR_SLAYER_IMBUED_HEART_TERMINATE true

rule (VAR_SLAYER_ETERNAL_GEM_TERMINATE && name:"Eternal gem") {}
rule (VAR_SLAYER_IMBUED_HEART_TERMINATE && name:"Imbued heart") {}


/*@ define:module:highlighted
---
name: Highlighted Items
subtitle: Highlight individual items within one style.
description: |
  Add styling to any item. 
*/

/*@ define:input:highlighted
type: style
label: Highlight style
exampleItem: Lizardman fang
exampleItemId: 13391
*/
#define VAR_HIGHLIGHTED_CUSTOMSTYLE textColor = "#ff5effb2";backgroundColor = "#145effb1";borderColor = "#595effb1";menuTextColor = "#ff5effb2";textAccent = 4;showLootbeam = false;icon = CurrentItem();



/*@ define:input:highlighted
type: stringlist
label: Highlighted Items
group: Highlighted Items List
*/
#define VAR_HIGHLIGHTED_LIST ["Lizardman fang","mark of grace","xeric's talisman (inert)","alchemist's signet"]

apply (name:VAR_HIGHLIGHTED_LIST) {
    VAR_HIGHLIGHTED_CUSTOMSTYLE 
}

/*@ define:input:highlighted
type: boolean
label: Dont let highlighted items get filtered out or restyled in future modules
group: Power User
*/
#define VAR_HIGHLIGHTED_TERMINATE false

rule (VAR_HIGHLIGHTED_TERMINATE && name:VAR_HIGHLIGHTED_LIST) {}


/*@ define:module:item_tiers
---
name: Item tiers
subtitle: Pick out the good stuff
description: |
  This highlights items based on their values. Set the values yourself, or add in the items manually!
*/

/*@ define:input:item_tiers
type: number
label: Put items above this value in tier 1
group: Tier 1
*/
#define VAR_VALUES_TIER_1_VALUE 20000

/*@ define:input:item_tiers
type: stringlist
label: Manually add items to tier 1
group: Tier 1
*/
#define VAR_VALUES_TIER_1_SHOW []

/*@ define:input:item_tiers
type: style
label: Tier 1 custom style
group: Tier 1
exampleItem: Rune Scimitar
exampleItemId: 1333
*/
#define VAR_VALUES_TIER_1_CUSTOMSTYLE textColor = "#ff47a900";backgroundColor = "#2e46a800";borderColor = "#6346a800";menuTextColor = "#ff47a900";textAccent = 1;showLootbeam = false;

apply ((value:>=VAR_VALUES_TIER_1_VALUE && value:<VAR_VALUES_TIER_2_VALUE) || name:VAR_VALUES_TIER_1_SHOW) {
    VAR_VALUES_TIER_1_CUSTOMSTYLE 
}

/*@ define:input:item_tiers
type: number
label: Put items above this value in tier 2
group: Tier 2
*/
#define VAR_VALUES_TIER_2_VALUE 50000

/*@ define:input:item_tiers
type: stringlist
label: Manually add items to tier 2
group: Tier 2
*/
#define VAR_VALUES_TIER_2_SHOW []

/*@ define:input:item_tiers
type: style
label: Tier 2 custom style
group: Tier 2
exampleItem: Dragon scimitar
exampleItemId: 4587
*/
#define VAR_VALUES_TIER_2_CUSTOMSTYLE textColor = "#ff3ddbdb";backgroundColor = "#263ddbdb";borderColor = "#8c3ddbdb";menuTextColor = "#ff3ddbdb";textAccent = 1;

apply ((value:>=VAR_VALUES_TIER_2_VALUE && value:<VAR_VALUES_TIER_3_VALUE) || name:VAR_VALUES_TIER_2_SHOW) {
    VAR_VALUES_TIER_2_CUSTOMSTYLE 
}


/*@ define:input:item_tiers
type: number
label: Put items above this value in tier 3
group: Tier 3
*/
#define VAR_VALUES_TIER_3_VALUE 250000

/*@ define:input:item_tiers
type: stringlist
label: Manually add items to tier 3
group: Tier 3
*/
#define VAR_VALUES_TIER_3_SHOW ["Obsidian cape","Toktz-ket-xil","Tzhaar-ket-om","Toktz-xil-ak","Toktz-xil-ek","Toktz-mej-tal","Toktz-xil-ul","Obsidian helmet","Obsidian platebody","Obsidian platelegs","Dark bow","Uncharged trident"]

/*@ define:input:item_tiers
type: style
label: Tier 3 custom style
group: Tier 3
exampleItem: Dragon pickaxe
exampleItemId: 11920
*/
#define VAR_VALUES_TIER_3_CUSTOMSTYLE textColor = "#ff2d6eff";backgroundColor = "#5715193d";borderColor = "#ff2d6eff";lootbeamColor = "#ff2d6eff";menuTextColor = "#ff2d6eff";textAccent = 1;showLootbeam = true;icon = CurrentItem();

apply ((value:>=VAR_VALUES_TIER_3_VALUE && value:<VAR_VALUES_TIER_4_VALUE) || name:VAR_VALUES_TIER_3_SHOW) {
    VAR_VALUES_TIER_3_CUSTOMSTYLE 
}



/*@ define:input:item_tiers
type: number
label: Put items above this value in tier 4
group: Tier 4
*/
#define VAR_VALUES_TIER_4_VALUE 2000000000

/*@ define:input:item_tiers
type: stringlist
label: Manually add items to tier 4
group: Tier 4
*/
#define VAR_VALUES_TIER_4_SHOW ["Granite gloves","Granite ring","Granite hammer","Smouldering stone","Araxyte fang","Noxious point","Noxious blade","Noxious pommel","Hydra tail","Hydra leather","Hydra's fang","Hydra's eye","Hydra's heart","Warrior ring","Seers ring","Dragon axe","Staff of the dead","Zamorak hilt","Ancient hilt","Parasitic egg","Bryophyta's essence","Dragon harpoon","Zalcano shard","Hill giant club","Burning claw","Dragon metal slice","Dragon metal lump","Drake's tooth","Drake's claw","Soulflame horn"]
/*@ define:input:item_tiers
type: style
label: Tier 4 custom style
group: Tier 4
exampleItem: Abyssal whip
exampleItemId: 4151
*/
#define VAR_VALUES_TIER_4_CUSTOMSTYLE textColor = "#ffb52db8";backgroundColor = "#a6281630";borderColor = "#d6b52cb8";lootbeamColor = "#ffb52db8";menuTextColor = "#ffb52db8";textAccent = 1;fontType = 2;showLootbeam = true;icon = CurrentItem();

apply ((value:>=VAR_VALUES_TIER_4_VALUE && value:<VAR_VALUES_TIER_5_VALUE) || name:VAR_VALUES_TIER_4_SHOW) {
    VAR_VALUES_TIER_4_CUSTOMSTYLE 
}



/*@ define:input:item_tiers
type: number
label: Put items above this value in tier 5
group: Tier 5
*/
#define VAR_VALUES_TIER_5_VALUE 2000000001

/*@ define:input:item_tiers
type: stringlist
label: Manually add items to tier 5
group: Tier 5
*/
#define VAR_VALUES_TIER_5_SHOW ["Black tourmaline core","Abyssal dagger","Abyssal whip","Kraken tentacle","Trident of the seas","Primordial crystal","Eternal crystal","Pegasian crystal","Occult necklace","Hydra's claw","Archers ring","Berserker ring","Armadyl helmet","Armadyl chestplate","Armadyl chainskirt","Armadyl hilt","Armadyl crossbow","Saradomin hilt","Bandos chestplate","Bandos tassets","Bandos boots","Bandos hilt","Zamorakian spear","Nihil horn","Zaryte vambraces","Torva full helm (damaged)","Torva platebody (damaged)","Torva platelegs (damaged)","Draconic visage","Amulet of avarice","Craw's bow (u)","Thammaron's sceptre (u)","Viggora's chainmace (u)","Ring of the gods","Voidwaker blade","Voidwaker gem","Voidwaker hilt","Elysian sigil","Spectral sigil","Arcane sigil","Dragon hunter wand","Tanzanite mutagen","Magma mutagen","Magic fang","Serpentine visage","Tanzanite fang","Uncut onyx","Skeletal visage","Venator shard","Inquisitor's mace","Inquisitor's great helm","Inquisitor's hauberk","Inquisitor's plateskirt","Nightmare staff","Volatile orb","Harmonised orb","Eldritch orb","Virtus mask","Virtus robe top","Virtus robe bottom","Magus vestige","Eye of the duke","Venator vestige","Leviathan's lure","Bellator vestige","Siren's staff","Ultor vestige","Executioner's axe head","Crystal tool seed","Zenyte shard","Tormented synapse","Dragon warhammer","Oathplate helm","Oathplate chest","Oathplate legs"]

/*@ define:input:item_tiers
type: style
label: Tier 5 custom style
group: Tier 5
exampleItem: Twisted bow
exampleItemId: 20997
*/
#define VAR_VALUES_TIER_5_CUSTOMSTYLE textColor = "#ffff9d09";backgroundColor = "#ff2f2900";borderColor = "#ffff9d09";lootbeamColor = "#ffff9d09";menuTextColor = "#ffff9d09";textAccent = 4;fontType = 3;showLootbeam = true;icon = CurrentItem();

apply (value:>=VAR_VALUES_TIER_5_VALUE || name:VAR_VALUES_TIER_5_SHOW) {
    VAR_VALUES_TIER_5_CUSTOMSTYLE 
}



/*@ define:input:item_tiers
type: boolean
label: Dont let tier 1 items get filtered out or restyled in future modules
group: Power User
*/
#define VAR_VALUES_TIER_1_TERMINATE false

/*@ define:input:item_tiers
type: boolean
label: Dont let tier 2 items get filtered out or restyled in future modules
group: Power User
*/
#define VAR_VALUES_TIER_2_TERMINATE false

/*@ define:input:item_tiers
type: boolean
label: Dont let tier 3 items get filtered out or restyled in future modules
group: Power User
*/
#define VAR_VALUES_TIER_3_TERMINATE true

/*@ define:input:item_tiers
type: boolean
label: Dont let tier 4 items get filtered out or restyled in future modules
group: Power User
*/
#define VAR_VALUES_TIER_4_TERMINATE true

/*@ define:input:item_tiers
type: boolean
label: Dont let tier 5 items get filtered out or restyled in future modules
group: Power User
*/
#define VAR_VALUES_TIER_5_TERMINATE true

rule (VAR_VALUES_TIER_1_TERMINATE && ((value:>=VAR_VALUES_TIER_1_VALUE && value:<VAR_VALUES_TIER_2_VALUE) || name:VAR_VALUES_TIER_1_SHOW)) {}
rule (VAR_VALUES_TIER_2_TERMINATE && ((value:>=VAR_VALUES_TIER_2_VALUE && value:<VAR_VALUES_TIER_3_VALUE) || name:VAR_VALUES_TIER_2_SHOW)) {}
rule (VAR_VALUES_TIER_3_TERMINATE && ((value:>=VAR_VALUES_TIER_3_VALUE && value:<VAR_VALUES_TIER_4_VALUE) || name:VAR_VALUES_TIER_3_SHOW)) {}
rule (VAR_VALUES_TIER_4_TERMINATE && ((value:>=VAR_VALUES_TIER_4_VALUE && value:<VAR_VALUES_TIER_5_VALUE) || name:VAR_VALUES_TIER_4_SHOW)) {}
rule (VAR_VALUES_TIER_5_TERMINATE && ((value:>=VAR_VALUES_TIER_5_VALUE) || name:VAR_VALUES_TIER_5_SHOW)) {}






/*@ define:module:uniques
---
name: Uniques
subtitle: Uniques are special! (even if they're not worth a lot)
description: |
  Add custom styling to unique items. By default this gives uniques on this list a loot beam and bold text. This can layer with other styling such as item tiers.
*/

/*@ define:input:uniques
type: style
label: Uniques custom style
exampleItem: Tanzanite fang
exampleItemId: 12922
*/
#define VAR_UNIQUES_CUSTOMSTYLE textColor = "#ffffffff";lootbeamColor = "#ffffffff";textAccent = 4;fontType = 3;showLootbeam = true;



/*@ define:input:uniques
type: stringlist
label: Uniques
group: Uniques List
*/
#define VAR_UNIQUES_LIST ["Jar of dirt","Jar of swamp","Jar of sand","Jar of souls","Jar of miasma","Jar of darkness","Jar of stone","Jar of decay","Jar of chemicals","Jar of eyes","Jar of dreams","Jar of spirits","Jar of smoke","Jar of venom","Black tourmaline core","Granite gloves","Granite ring","Granite hammer","Abyssal head","Bludgeon spine","Bludgeon claw","Bludgeon axon","Abyssal dagger","Abyssal whip","Kraken tentacle","Trident of the seas","Eternal crystal","Pegasian crystal","Primordial crystal","Smouldering stone","Araxyte fang","Noxious point","Noxious blade","Noxious pommel","Araxyte head","Occult necklace","Smoke battlestaff","Dragon chainbody","Hydra's claw","Hydra tail","Hydra leather","Hydra's fang","Hydra's eye","Hydra's heart","Alchemical hydra heads","Ahrim's hood","Ahrim's robetop","Ahrim's robeskirt","Ahrim's staff","Karil's coif","Karil's leathertop","Karil's leatherskirt","Karil's crossbow","Dharok's helm","Dharok's platebody","Dharok's platelegs","Dharok's greataxe","Guthan's helm","Guthan's platebody","Guthan's chainskirt","Guthan's warspear","Torag's helm","Torag's platebody","Torag's platelegs","Torag's hammers","Verac's helm","Verac's brassard","Verac's plateskirt","Verac's flail","Archers ring","Berserker ring","Warrior ring","Seers ring","Dragon axe","Seercull","Mud battlestaff","Sarachnis cudgel","Blood moon helm","Blood moon chestplate","Blood moon tassets","Dual macuahuitl","Blue moon helm","Blue moon chestplate","Blue moon tassets","Blue moon spear","Eclipse moon helm","Eclipse moon chestplate","Eclipse moon tassets","Eclipse atlatl","Godsword shard 1","Godsword shard 2","Godsword shard 3","Armadyl helmet","Armadyl chestplate","Armadyl chainskirt","Armadyl hilt","Armadyl crossbow","Saradomin hilt","Saradomin sword","Saradomin's light","Bandos chestplate","Bandos tassets","Bandos boots","Bandos hilt","Staff of the dead","Zamorakian spear","Steam battlestaff","Zamorak hilt","Ancient hilt","Nihil horn","Zaryte vambraces","Torva full helm (damaged)","Torva platebody (damaged)","Torva platelegs (damaged)","Elder chaos top","Elder chaos robe","Elder chaos hood","Odium shard 1","Malediction shard 1","Odium shard 2","Malediction shard 2","Fedora","Odium shard 3","Malediction shard 3","Kbd heads","Draconic visage","Amulet of avarice","Craw's bow (u)","Thammaron's sceptre (u)","Viggora's chainmace (u)","Ancient crystal","Ring of the gods","Skull of vet'ion","Voidwaker blade","Treasonous ring","Fangs of venenatis","Voidwaker gem","Tyrannical ring","Claws of callisto","Voidwaker hilt","Elysian sigil","Spectral sigil","Arcane sigil","Holy elixir","Spirit shield","Kq head","Dragon chainbody","Dragon hunter wand","Hueycoatl hide","Tome of earth (empty)","Glacial temotli","Fire element staff crown","Ice element staff crown","Tanzanite mutagen","Magma mutagen","Magic fang","Serpentine visage","Tanzanite fang","Uncut onyx","Draconic visage","Skeletal visage","Dragonbone necklace","Venator shard","Inquisitor's mace","Inquisitor's great helm","Inquisitor's hauberk","Inquisitor's plateskirt","Nightmare staff","Volatile orb","Harmonised orb","Eldritch orb","Parasitic egg","Virtus mask","Virtus robe top","Virtus robe bottom","Magus vestige","Eye of the duke","Ice quartz","Venator vestige","Leviathan's lure","Smoke quartz","Bellator vestige","Siren's staff","Shadow quartz","Ultor vestige","Executioner's axe head","Blood quartz","Hill giant club","Bryophyta's essence","Ring of 3rd age","Bottomless compost bucket","Dark claw","Dark totem","Crystal armour seed","Crystal weapon seed","Enhanced crystal weapon seed","Sunfire fanatic cuirass","Sunfire fanatic chausses","Sunfire fanatic helm","Echo crystal","Tonalztics of ralos (uncharged)","Big harpoonfish","Tome of water (empty)","Tackle box","Fish barrel","Dragon harpoon","Tome of fire (empty)","Crystal tool seed","Zalcano shard","Dexterous prayer scroll","Arcane prayer scroll","Twisted buckler","Dragon hunter crossbow","Dinh's bulwark","Ancestral hat","Ancestral robe top","Ancestral robe bottom","Dragon claws","Elder maul","Kodai insignia","Twisted bow","Twisted ancestral colour kit","Metamorphic dust","Avernic defender hilt","Ghrazi rapier","Sanguinesti staff (uncharged)","Justiciar faceguard","Justiciar chestguard","Justiciar legguards","Scythe of vitur (uncharged)","Holy ornament kit","Sanguine ornament kit","Sanguine dust","Masori mask","Masori body","Masori chaps","Lightbearer","Osmumten's fang","Elidinis' ward","Tumeken's shadow","Breach of the scarab","Eye of the corruptor","Jewel of the sun","Zenyte shard","Light frame","Heavy frame","Ballista limbs","Monkey tail","Ballista spring","Tormented synapse","Burning claw","Dragon warhammer","Big swordfish","Big shark","Big bass","Dragonstone full helm","Dragonstone platebody","Dragonstone platelegs","Dragonstone gauntlets","Dragonstone boots","Evil chicken head","Evil chicken wings","Evil chicken legs","Evil chicken feet","Mask of ranul","Elven signet","Dragon metal slice","Dragon metal lump","Obsidian cape","Toktz-ket-xil","Tzhaar-ket-om","Toktz-xil-ak","Toktz-xil-ek","Toktz-mej-tal","Toktz-xil-ul","Obsidian helmet","Obsidian platebody","Obsidian platelegs","Imbued heart","Eternal gem","Dust battlestaff","Mist battlestaff","Broken dragon hasta","Mystic hat (dusk)","Mystic robe top (dusk)","Mystic robe bottom (dusk)","Mystic gloves (dusk)","Mystic boots (dusk)","Basilisk jaw","Dagon'hai hat","Dagon'hai robe top","Dagon'hai robe bottom","Dark bow","Uncharged trident","Dragon sword","Drake's tooth","Drake's claw","Crawling hand","Cockatrice head","Basilisk head","Kurask head","Soulflame horn","Oathplate helm","Oathplate chest","Oathplate legs","Bronze defender","Iron defender","Steel defender","Black defender","Mithril defender","Adamant defender","Rune defender","Dragon defender","Earth Warrior champion scroll","Ghoul champion scroll","Giant champion scroll","Goblin champion scroll","Hobgoblin champion scroll","Imp champion scroll","Jogre champion scroll","Lesser Demon champion scroll","Skeleton champion scroll","Zombie champion scroll","Mokhaiotl cloth","Eye of ayak","Avernic treads","Earthbound tecpatl","Antler guard","Dark totem","Dark totem base","Dark totem middle","Dark totem top"]

apply (name:VAR_UNIQUES_LIST) {
    VAR_UNIQUES_CUSTOMSTYLE 
}



/*@ define:input:uniques
type: boolean
label: Disable loot filters sounds for uniques for bosses that already have a unique sound
group: Power User
*/
#define VAR_DISABLE_UNIQUES_SOUND false

apply (   VAR_DISABLE_UNIQUES_SOUND   && name:VAR_UNIQUES_LIST   && (
    area:CONST_MUSPAH_AREA     || area:CONST_THE_WHISPERER_AREA     || area:CONST_VARDORVIS_AREA     || area:CONST_DUKE_SUCELLUS_AREA     || area:CONST_THE_LEVIATHAN_AREA     || area:CONST_YAMA_AREA     || area:CONST_NEX_AREA     || area:CONST_AMOXLIATL_AREA     || area:CONST_HUEYCOATL_AREA   ) ) {
    sound = 2411; // sound name: silence
}

/*@ define:input:uniques
type: boolean
label: Dont let uniques get filtered out or restyled in future modules
group: Power User
*/
#define VAR_UNIQUES_TERMINATE false

rule (VAR_UNIQUES_TERMINATE && name:VAR_UNIQUES_LIST) {}





/*@ define:module:final
hidden: true
name: final
*/

/* --- hiding and showing specific items --- */

apply (name:VAR_GLOBAL_HIDE) {
    hidden = true;
}
apply (name:VAR_GLOBAL_SHOW) {
    hidden = false;
}

/* --- sorting menu by value --- */

apply ((VAR_SORTING_MENU_SORT_BY_VALUE || VAR_SORTING_MENU_SORT_BY_VALUE_STACKABLES_FIRST) && value:>=0 && value:<10) {
    menuSort = 0;
}
apply ((VAR_SORTING_MENU_SORT_BY_VALUE || VAR_SORTING_MENU_SORT_BY_VALUE_STACKABLES_FIRST) && value:>=10 && value:<20) {
    menuSort = 1;
}
apply ((VAR_SORTING_MENU_SORT_BY_VALUE || VAR_SORTING_MENU_SORT_BY_VALUE_STACKABLES_FIRST) && value:>=20 && value:<30) {
    menuSort = 2;
}
apply ((VAR_SORTING_MENU_SORT_BY_VALUE || VAR_SORTING_MENU_SORT_BY_VALUE_STACKABLES_FIRST) && value:>=30 && value:<40) {
    menuSort = 3;
}
apply ((VAR_SORTING_MENU_SORT_BY_VALUE || VAR_SORTING_MENU_SORT_BY_VALUE_STACKABLES_FIRST) && value:>=40 && value:<50) {
    menuSort = 4;
}
apply ((VAR_SORTING_MENU_SORT_BY_VALUE || VAR_SORTING_MENU_SORT_BY_VALUE_STACKABLES_FIRST) && value:>=50 && value:<60) {
    menuSort = 5;
}
apply ((VAR_SORTING_MENU_SORT_BY_VALUE || VAR_SORTING_MENU_SORT_BY_VALUE_STACKABLES_FIRST) && value:>=60 && value:<70) {
    menuSort = 6;
}
apply ((VAR_SORTING_MENU_SORT_BY_VALUE || VAR_SORTING_MENU_SORT_BY_VALUE_STACKABLES_FIRST) && value:>=70 && value:<80) {
    menuSort = 7;
}
apply ((VAR_SORTING_MENU_SORT_BY_VALUE || VAR_SORTING_MENU_SORT_BY_VALUE_STACKABLES_FIRST) && value:>=80 && value:<90) {
    menuSort = 8;
}
apply ((VAR_SORTING_MENU_SORT_BY_VALUE || VAR_SORTING_MENU_SORT_BY_VALUE_STACKABLES_FIRST) && value:>=90 && value:<100) {
    menuSort = 9;
}
apply ((VAR_SORTING_MENU_SORT_BY_VALUE || VAR_SORTING_MENU_SORT_BY_VALUE_STACKABLES_FIRST) && value:>=100 && value:<200) {
    menuSort = 10;
}
apply ((VAR_SORTING_MENU_SORT_BY_VALUE || VAR_SORTING_MENU_SORT_BY_VALUE_STACKABLES_FIRST) && value:>=200 && value:<300) {
    menuSort = 11;
}
apply ((VAR_SORTING_MENU_SORT_BY_VALUE || VAR_SORTING_MENU_SORT_BY_VALUE_STACKABLES_FIRST) && value:>=300 && value:<400) {
    menuSort = 12;
}
apply ((VAR_SORTING_MENU_SORT_BY_VALUE || VAR_SORTING_MENU_SORT_BY_VALUE_STACKABLES_FIRST) && value:>=400 && value:<500) {
    menuSort = 13;
}
apply ((VAR_SORTING_MENU_SORT_BY_VALUE || VAR_SORTING_MENU_SORT_BY_VALUE_STACKABLES_FIRST) && value:>=500 && value:<600) {
    menuSort = 14;
}
apply ((VAR_SORTING_MENU_SORT_BY_VALUE || VAR_SORTING_MENU_SORT_BY_VALUE_STACKABLES_FIRST) && value:>=600 && value:<700) {
    menuSort = 15;
}
apply ((VAR_SORTING_MENU_SORT_BY_VALUE || VAR_SORTING_MENU_SORT_BY_VALUE_STACKABLES_FIRST) && value:>=700 && value:<800) {
    menuSort = 16;
}
apply ((VAR_SORTING_MENU_SORT_BY_VALUE || VAR_SORTING_MENU_SORT_BY_VALUE_STACKABLES_FIRST) && value:>=800 && value:<900) {
    menuSort = 17;
}
apply ((VAR_SORTING_MENU_SORT_BY_VALUE || VAR_SORTING_MENU_SORT_BY_VALUE_STACKABLES_FIRST) && value:>=900 && value:<1000) {
    menuSort = 18;
}
apply ((VAR_SORTING_MENU_SORT_BY_VALUE || VAR_SORTING_MENU_SORT_BY_VALUE_STACKABLES_FIRST) && value:>=1000 && value:<2000) {
    menuSort = 19;
}
apply ((VAR_SORTING_MENU_SORT_BY_VALUE || VAR_SORTING_MENU_SORT_BY_VALUE_STACKABLES_FIRST) && value:>=2000 && value:<3000) {
    menuSort = 20;
}
apply ((VAR_SORTING_MENU_SORT_BY_VALUE || VAR_SORTING_MENU_SORT_BY_VALUE_STACKABLES_FIRST) && value:>=3000 && value:<4000) {
    menuSort = 21;
}
apply ((VAR_SORTING_MENU_SORT_BY_VALUE || VAR_SORTING_MENU_SORT_BY_VALUE_STACKABLES_FIRST) && value:>=4000 && value:<5000) {
    menuSort = 22;
}
apply ((VAR_SORTING_MENU_SORT_BY_VALUE || VAR_SORTING_MENU_SORT_BY_VALUE_STACKABLES_FIRST) && value:>=5000 && value:<6000) {
    menuSort = 23;
}
apply ((VAR_SORTING_MENU_SORT_BY_VALUE || VAR_SORTING_MENU_SORT_BY_VALUE_STACKABLES_FIRST) && value:>=6000 && value:<7000) {
    menuSort = 24;
}
apply ((VAR_SORTING_MENU_SORT_BY_VALUE || VAR_SORTING_MENU_SORT_BY_VALUE_STACKABLES_FIRST) && value:>=7000 && value:<8000) {
    menuSort = 25;
}
apply ((VAR_SORTING_MENU_SORT_BY_VALUE || VAR_SORTING_MENU_SORT_BY_VALUE_STACKABLES_FIRST) && value:>=8000 && value:<9000) {
    menuSort = 26;
}
apply ((VAR_SORTING_MENU_SORT_BY_VALUE || VAR_SORTING_MENU_SORT_BY_VALUE_STACKABLES_FIRST) && value:>=9000 && value:<10000) {
    menuSort = 27;
}
apply ((VAR_SORTING_MENU_SORT_BY_VALUE || VAR_SORTING_MENU_SORT_BY_VALUE_STACKABLES_FIRST) && value:>=10000 && value:<20000) {
    menuSort = 28;
}
apply ((VAR_SORTING_MENU_SORT_BY_VALUE || VAR_SORTING_MENU_SORT_BY_VALUE_STACKABLES_FIRST) && value:>=20000 && value:<30000) {
    menuSort = 29;
}
apply ((VAR_SORTING_MENU_SORT_BY_VALUE || VAR_SORTING_MENU_SORT_BY_VALUE_STACKABLES_FIRST) && value:>=30000 && value:<40000) {
    menuSort = 30;
}
apply ((VAR_SORTING_MENU_SORT_BY_VALUE || VAR_SORTING_MENU_SORT_BY_VALUE_STACKABLES_FIRST) && value:>=40000 && value:<50000) {
    menuSort = 31;
}
apply ((VAR_SORTING_MENU_SORT_BY_VALUE || VAR_SORTING_MENU_SORT_BY_VALUE_STACKABLES_FIRST) && value:>=50000 && value:<60000) {
    menuSort = 32;
}
apply ((VAR_SORTING_MENU_SORT_BY_VALUE || VAR_SORTING_MENU_SORT_BY_VALUE_STACKABLES_FIRST) && value:>=60000 && value:<70000) {
    menuSort = 33;
}
apply ((VAR_SORTING_MENU_SORT_BY_VALUE || VAR_SORTING_MENU_SORT_BY_VALUE_STACKABLES_FIRST) && value:>=70000 && value:<80000) {
    menuSort = 34;
}
apply ((VAR_SORTING_MENU_SORT_BY_VALUE || VAR_SORTING_MENU_SORT_BY_VALUE_STACKABLES_FIRST) && value:>=80000 && value:<90000) {
    menuSort = 35;
}
apply ((VAR_SORTING_MENU_SORT_BY_VALUE || VAR_SORTING_MENU_SORT_BY_VALUE_STACKABLES_FIRST) && value:>=90000 && value:<100000) {
    menuSort = 36;
}
apply ((VAR_SORTING_MENU_SORT_BY_VALUE || VAR_SORTING_MENU_SORT_BY_VALUE_STACKABLES_FIRST) && value:>=100000 && value:<200000) {
    menuSort = 37;
}
apply ((VAR_SORTING_MENU_SORT_BY_VALUE || VAR_SORTING_MENU_SORT_BY_VALUE_STACKABLES_FIRST) && value:>=200000 && value:<300000) {
    menuSort = 38;
}
apply ((VAR_SORTING_MENU_SORT_BY_VALUE || VAR_SORTING_MENU_SORT_BY_VALUE_STACKABLES_FIRST) && value:>=300000 && value:<400000) {
    menuSort = 39;
}
apply ((VAR_SORTING_MENU_SORT_BY_VALUE || VAR_SORTING_MENU_SORT_BY_VALUE_STACKABLES_FIRST) && value:>=400000 && value:<500000) {
    menuSort = 40;
}
apply ((VAR_SORTING_MENU_SORT_BY_VALUE || VAR_SORTING_MENU_SORT_BY_VALUE_STACKABLES_FIRST) && value:>=500000 && value:<600000) {
    menuSort = 41;
}
apply ((VAR_SORTING_MENU_SORT_BY_VALUE || VAR_SORTING_MENU_SORT_BY_VALUE_STACKABLES_FIRST) && value:>=600000 && value:<700000) {
    menuSort = 42;
}
apply ((VAR_SORTING_MENU_SORT_BY_VALUE || VAR_SORTING_MENU_SORT_BY_VALUE_STACKABLES_FIRST) && value:>=700000 && value:<800000) {
    menuSort = 43;
}
apply ((VAR_SORTING_MENU_SORT_BY_VALUE || VAR_SORTING_MENU_SORT_BY_VALUE_STACKABLES_FIRST) && value:>=800000 && value:<900000) {
    menuSort = 44;
}
apply ((VAR_SORTING_MENU_SORT_BY_VALUE || VAR_SORTING_MENU_SORT_BY_VALUE_STACKABLES_FIRST) && value:>=900000 && value:<1000000) {
    menuSort = 45;
}
apply ((VAR_SORTING_MENU_SORT_BY_VALUE || VAR_SORTING_MENU_SORT_BY_VALUE_STACKABLES_FIRST) && value:>=1000000 && value:<2000000) {
    menuSort = 46;
}
apply ((VAR_SORTING_MENU_SORT_BY_VALUE || VAR_SORTING_MENU_SORT_BY_VALUE_STACKABLES_FIRST) && value:>=2000000 && value:<3000000) {
    menuSort = 47;
}
apply ((VAR_SORTING_MENU_SORT_BY_VALUE || VAR_SORTING_MENU_SORT_BY_VALUE_STACKABLES_FIRST) && value:>=3000000 && value:<4000000) {
    menuSort = 48;
}
apply ((VAR_SORTING_MENU_SORT_BY_VALUE || VAR_SORTING_MENU_SORT_BY_VALUE_STACKABLES_FIRST) && value:>=4000000 && value:<5000000) {
    menuSort = 49;
}
apply ((VAR_SORTING_MENU_SORT_BY_VALUE || VAR_SORTING_MENU_SORT_BY_VALUE_STACKABLES_FIRST) && value:>=5000000 && value:<6000000) {
    menuSort = 50;
}
apply ((VAR_SORTING_MENU_SORT_BY_VALUE || VAR_SORTING_MENU_SORT_BY_VALUE_STACKABLES_FIRST) && value:>=6000000 && value:<7000000) {
    menuSort = 51;
}
apply ((VAR_SORTING_MENU_SORT_BY_VALUE || VAR_SORTING_MENU_SORT_BY_VALUE_STACKABLES_FIRST) && value:>=7000000 && value:<8000000) {
    menuSort = 52;
}
apply ((VAR_SORTING_MENU_SORT_BY_VALUE || VAR_SORTING_MENU_SORT_BY_VALUE_STACKABLES_FIRST) && value:>=8000000 && value:<9000000) {
    menuSort = 53;
}
apply ((VAR_SORTING_MENU_SORT_BY_VALUE || VAR_SORTING_MENU_SORT_BY_VALUE_STACKABLES_FIRST) && value:>=9000000 && value:<10000000) {
    menuSort = 54;
}
apply ((VAR_SORTING_MENU_SORT_BY_VALUE || VAR_SORTING_MENU_SORT_BY_VALUE_STACKABLES_FIRST) && value:>=10000000 && value:<20000000) {
    menuSort = 55;
}
apply ((VAR_SORTING_MENU_SORT_BY_VALUE || VAR_SORTING_MENU_SORT_BY_VALUE_STACKABLES_FIRST) && value:>=20000000 && value:<30000000) {
    menuSort = 56;
}
apply ((VAR_SORTING_MENU_SORT_BY_VALUE || VAR_SORTING_MENU_SORT_BY_VALUE_STACKABLES_FIRST) && value:>=30000000 && value:<40000000) {
    menuSort = 57;
}
apply ((VAR_SORTING_MENU_SORT_BY_VALUE || VAR_SORTING_MENU_SORT_BY_VALUE_STACKABLES_FIRST) && value:>=40000000 && value:<50000000) {
    menuSort = 58;
}
apply ((VAR_SORTING_MENU_SORT_BY_VALUE || VAR_SORTING_MENU_SORT_BY_VALUE_STACKABLES_FIRST) && value:>=50000000 && value:<60000000) {
    menuSort = 59;
}
apply ((VAR_SORTING_MENU_SORT_BY_VALUE || VAR_SORTING_MENU_SORT_BY_VALUE_STACKABLES_FIRST) && value:>=60000000 && value:<70000000) {
    menuSort = 60;
}
apply ((VAR_SORTING_MENU_SORT_BY_VALUE || VAR_SORTING_MENU_SORT_BY_VALUE_STACKABLES_FIRST) && value:>=70000000 && value:<80000000) {
    menuSort = 61;
}
apply ((VAR_SORTING_MENU_SORT_BY_VALUE || VAR_SORTING_MENU_SORT_BY_VALUE_STACKABLES_FIRST) && value:>=80000000 && value:<90000000) {
    menuSort = 62;
}
apply ((VAR_SORTING_MENU_SORT_BY_VALUE || VAR_SORTING_MENU_SORT_BY_VALUE_STACKABLES_FIRST) && value:>=90000000 && value:<100000000) {
    menuSort = 63;
}
apply ((VAR_SORTING_MENU_SORT_BY_VALUE || VAR_SORTING_MENU_SORT_BY_VALUE_STACKABLES_FIRST) && value:>=100000000 && value:<200000000) {
    menuSort = 64;
}
apply ((VAR_SORTING_MENU_SORT_BY_VALUE || VAR_SORTING_MENU_SORT_BY_VALUE_STACKABLES_FIRST) && value:>=200000000 && value:<300000000) {
    menuSort = 65;
}
apply ((VAR_SORTING_MENU_SORT_BY_VALUE || VAR_SORTING_MENU_SORT_BY_VALUE_STACKABLES_FIRST) && value:>=300000000 && value:<400000000) {
    menuSort = 66;
}
apply ((VAR_SORTING_MENU_SORT_BY_VALUE || VAR_SORTING_MENU_SORT_BY_VALUE_STACKABLES_FIRST) && value:>=400000000 && value:<500000000) {
    menuSort = 67;
}
apply ((VAR_SORTING_MENU_SORT_BY_VALUE || VAR_SORTING_MENU_SORT_BY_VALUE_STACKABLES_FIRST) && value:>=500000000 && value:<600000000) {
    menuSort = 68;
}
apply ((VAR_SORTING_MENU_SORT_BY_VALUE || VAR_SORTING_MENU_SORT_BY_VALUE_STACKABLES_FIRST) && value:>=600000000 && value:<700000000) {
    menuSort = 69;
}
apply ((VAR_SORTING_MENU_SORT_BY_VALUE || VAR_SORTING_MENU_SORT_BY_VALUE_STACKABLES_FIRST) && value:>=700000000 && value:<800000000) {
    menuSort = 70;
}
apply ((VAR_SORTING_MENU_SORT_BY_VALUE || VAR_SORTING_MENU_SORT_BY_VALUE_STACKABLES_FIRST) && value:>=800000000 && value:<900000000) {
    menuSort = 71;
}
apply ((VAR_SORTING_MENU_SORT_BY_VALUE || VAR_SORTING_MENU_SORT_BY_VALUE_STACKABLES_FIRST) && value:>=900000000 && value:<1000000000) {
    menuSort = 72;
}
apply ((VAR_SORTING_MENU_SORT_BY_VALUE || VAR_SORTING_MENU_SORT_BY_VALUE_STACKABLES_FIRST) && value:>=1000000000 && value:<1100000000) {
    menuSort = 73;
}
apply ((VAR_SORTING_MENU_SORT_BY_VALUE || VAR_SORTING_MENU_SORT_BY_VALUE_STACKABLES_FIRST) && value:>=1100000000 && value:<1200000000) {
    menuSort = 74;
}
apply ((VAR_SORTING_MENU_SORT_BY_VALUE || VAR_SORTING_MENU_SORT_BY_VALUE_STACKABLES_FIRST) && value:>=1200000000 && value:<1300000000) {
    menuSort = 75;
}
apply ((VAR_SORTING_MENU_SORT_BY_VALUE || VAR_SORTING_MENU_SORT_BY_VALUE_STACKABLES_FIRST) && value:>=1300000000 && value:<1400000000) {
    menuSort = 76;
}
apply ((VAR_SORTING_MENU_SORT_BY_VALUE || VAR_SORTING_MENU_SORT_BY_VALUE_STACKABLES_FIRST) && value:>=1400000000 && value:<1500000000) {
    menuSort = 77;
}
apply ((VAR_SORTING_MENU_SORT_BY_VALUE || VAR_SORTING_MENU_SORT_BY_VALUE_STACKABLES_FIRST) && value:>=1500000000 && value:<1600000000) {
    menuSort = 78;
}
apply ((VAR_SORTING_MENU_SORT_BY_VALUE || VAR_SORTING_MENU_SORT_BY_VALUE_STACKABLES_FIRST) && value:>=1600000000 && value:<1700000000) {
    menuSort = 79;
}
apply ((VAR_SORTING_MENU_SORT_BY_VALUE || VAR_SORTING_MENU_SORT_BY_VALUE_STACKABLES_FIRST) && value:>=1700000000 && value:<1800000000) {
    menuSort = 80;
}
apply ((VAR_SORTING_MENU_SORT_BY_VALUE || VAR_SORTING_MENU_SORT_BY_VALUE_STACKABLES_FIRST) && value:>=1800000000 && value:<1900000000) {
    menuSort = 81;
}
apply ((VAR_SORTING_MENU_SORT_BY_VALUE || VAR_SORTING_MENU_SORT_BY_VALUE_STACKABLES_FIRST) && value:>=1900000000 && value:<2000000000) {
    menuSort = 82;
}
apply ((VAR_SORTING_MENU_SORT_BY_VALUE || VAR_SORTING_MENU_SORT_BY_VALUE_STACKABLES_FIRST) && value:>=2000000000) {
    menuSort = 83;
}

/* --- sorting menu by value with stackables first --- */

apply (VAR_SORTING_MENU_SORT_BY_VALUE_STACKABLES_FIRST && (stackable:true || noted:true) && value:>=0 && value:<10) {
    menuSort = 84;
}
apply (VAR_SORTING_MENU_SORT_BY_VALUE_STACKABLES_FIRST && (stackable:true || noted:true) && value:>=10 && value:<20) {
    menuSort = 85;
}
apply (VAR_SORTING_MENU_SORT_BY_VALUE_STACKABLES_FIRST && (stackable:true || noted:true) && value:>=20 && value:<30) {
    menuSort = 86;
}
apply (VAR_SORTING_MENU_SORT_BY_VALUE_STACKABLES_FIRST && (stackable:true || noted:true) && value:>=30 && value:<40) {
    menuSort = 87;
}
apply (VAR_SORTING_MENU_SORT_BY_VALUE_STACKABLES_FIRST && (stackable:true || noted:true) && value:>=40 && value:<50) {
    menuSort = 88;
}
apply (VAR_SORTING_MENU_SORT_BY_VALUE_STACKABLES_FIRST && (stackable:true || noted:true) && value:>=50 && value:<60) {
    menuSort = 89;
}
apply (VAR_SORTING_MENU_SORT_BY_VALUE_STACKABLES_FIRST && (stackable:true || noted:true) && value:>=60 && value:<70) {
    menuSort = 90;
}
apply (VAR_SORTING_MENU_SORT_BY_VALUE_STACKABLES_FIRST && (stackable:true || noted:true) && value:>=70 && value:<80) {
    menuSort = 91;
}
apply (VAR_SORTING_MENU_SORT_BY_VALUE_STACKABLES_FIRST && (stackable:true || noted:true) && value:>=80 && value:<90) {
    menuSort = 92;
}
apply (VAR_SORTING_MENU_SORT_BY_VALUE_STACKABLES_FIRST && (stackable:true || noted:true) && value:>=90 && value:<100) {
    menuSort = 93;
}
apply (VAR_SORTING_MENU_SORT_BY_VALUE_STACKABLES_FIRST && (stackable:true || noted:true) && value:>=100 && value:<200) {
    menuSort = 94;
}
apply (VAR_SORTING_MENU_SORT_BY_VALUE_STACKABLES_FIRST && (stackable:true || noted:true) && value:>=200 && value:<300) {
    menuSort = 95;
}
apply (VAR_SORTING_MENU_SORT_BY_VALUE_STACKABLES_FIRST && (stackable:true || noted:true) && value:>=300 && value:<400) {
    menuSort = 96;
}
apply (VAR_SORTING_MENU_SORT_BY_VALUE_STACKABLES_FIRST && (stackable:true || noted:true) && value:>=400 && value:<500) {
    menuSort = 97;
}
apply (VAR_SORTING_MENU_SORT_BY_VALUE_STACKABLES_FIRST && (stackable:true || noted:true) && value:>=500 && value:<600) {
    menuSort = 98;
}
apply (VAR_SORTING_MENU_SORT_BY_VALUE_STACKABLES_FIRST && (stackable:true || noted:true) && value:>=600 && value:<700) {
    menuSort = 99;
}
apply (VAR_SORTING_MENU_SORT_BY_VALUE_STACKABLES_FIRST && (stackable:true || noted:true) && value:>=700 && value:<800) {
    menuSort = 100;
}
apply (VAR_SORTING_MENU_SORT_BY_VALUE_STACKABLES_FIRST && (stackable:true || noted:true) && value:>=800 && value:<900) {
    menuSort = 101;
}
apply (VAR_SORTING_MENU_SORT_BY_VALUE_STACKABLES_FIRST && (stackable:true || noted:true) && value:>=900 && value:<1000) {
    menuSort = 102;
}
apply (VAR_SORTING_MENU_SORT_BY_VALUE_STACKABLES_FIRST && (stackable:true || noted:true) && value:>=1000 && value:<2000) {
    menuSort = 103;
}
apply (VAR_SORTING_MENU_SORT_BY_VALUE_STACKABLES_FIRST && (stackable:true || noted:true) && value:>=2000 && value:<3000) {
    menuSort = 104;
}
apply (VAR_SORTING_MENU_SORT_BY_VALUE_STACKABLES_FIRST && (stackable:true || noted:true) && value:>=3000 && value:<4000) {
    menuSort = 105;
}
apply (VAR_SORTING_MENU_SORT_BY_VALUE_STACKABLES_FIRST && (stackable:true || noted:true) && value:>=4000 && value:<5000) {
    menuSort = 106;
}
apply (VAR_SORTING_MENU_SORT_BY_VALUE_STACKABLES_FIRST && (stackable:true || noted:true) && value:>=5000 && value:<6000) {
    menuSort = 107;
}
apply (VAR_SORTING_MENU_SORT_BY_VALUE_STACKABLES_FIRST && (stackable:true || noted:true) && value:>=6000 && value:<7000) {
    menuSort = 108;
}
apply (VAR_SORTING_MENU_SORT_BY_VALUE_STACKABLES_FIRST && (stackable:true || noted:true) && value:>=7000 && value:<8000) {
    menuSort = 109;
}
apply (VAR_SORTING_MENU_SORT_BY_VALUE_STACKABLES_FIRST && (stackable:true || noted:true) && value:>=8000 && value:<9000) {
    menuSort = 110;
}
apply (VAR_SORTING_MENU_SORT_BY_VALUE_STACKABLES_FIRST && (stackable:true || noted:true) && value:>=9000 && value:<10000) {
    menuSort = 111;
}
apply (VAR_SORTING_MENU_SORT_BY_VALUE_STACKABLES_FIRST && (stackable:true || noted:true) && value:>=10000 && value:<20000) {
    menuSort = 112;
}
apply (VAR_SORTING_MENU_SORT_BY_VALUE_STACKABLES_FIRST && (stackable:true || noted:true) && value:>=20000 && value:<30000) {
    menuSort = 113;
}
apply (VAR_SORTING_MENU_SORT_BY_VALUE_STACKABLES_FIRST && (stackable:true || noted:true) && value:>=30000 && value:<40000) {
    menuSort = 114;
}
apply (VAR_SORTING_MENU_SORT_BY_VALUE_STACKABLES_FIRST && (stackable:true || noted:true) && value:>=40000 && value:<50000) {
    menuSort = 115;
}
apply (VAR_SORTING_MENU_SORT_BY_VALUE_STACKABLES_FIRST && (stackable:true || noted:true) && value:>=50000 && value:<60000) {
    menuSort = 116;
}
apply (VAR_SORTING_MENU_SORT_BY_VALUE_STACKABLES_FIRST && (stackable:true || noted:true) && value:>=60000 && value:<70000) {
    menuSort = 117;
}
apply (VAR_SORTING_MENU_SORT_BY_VALUE_STACKABLES_FIRST && (stackable:true || noted:true) && value:>=70000 && value:<80000) {
    menuSort = 118;
}
apply (VAR_SORTING_MENU_SORT_BY_VALUE_STACKABLES_FIRST && (stackable:true || noted:true) && value:>=80000 && value:<90000) {
    menuSort = 119;
}
apply (VAR_SORTING_MENU_SORT_BY_VALUE_STACKABLES_FIRST && (stackable:true || noted:true) && value:>=90000 && value:<100000) {
    menuSort = 120;
}
apply (VAR_SORTING_MENU_SORT_BY_VALUE_STACKABLES_FIRST && (stackable:true || noted:true) && value:>=100000 && value:<200000) {
    menuSort = 121;
}
apply (VAR_SORTING_MENU_SORT_BY_VALUE_STACKABLES_FIRST && (stackable:true || noted:true) && value:>=200000 && value:<300000) {
    menuSort = 122;
}
apply (VAR_SORTING_MENU_SORT_BY_VALUE_STACKABLES_FIRST && (stackable:true || noted:true) && value:>=300000 && value:<400000) {
    menuSort = 123;
}
apply (VAR_SORTING_MENU_SORT_BY_VALUE_STACKABLES_FIRST && (stackable:true || noted:true) && value:>=400000 && value:<500000) {
    menuSort = 124;
}
apply (VAR_SORTING_MENU_SORT_BY_VALUE_STACKABLES_FIRST && (stackable:true || noted:true) && value:>=500000 && value:<600000) {
    menuSort = 125;
}
apply (VAR_SORTING_MENU_SORT_BY_VALUE_STACKABLES_FIRST && (stackable:true || noted:true) && value:>=600000 && value:<700000) {
    menuSort = 126;
}
apply (VAR_SORTING_MENU_SORT_BY_VALUE_STACKABLES_FIRST && (stackable:true || noted:true) && value:>=700000 && value:<800000) {
    menuSort = 127;
}
apply (VAR_SORTING_MENU_SORT_BY_VALUE_STACKABLES_FIRST && (stackable:true || noted:true) && value:>=800000 && value:<900000) {
    menuSort = 128;
}
apply (VAR_SORTING_MENU_SORT_BY_VALUE_STACKABLES_FIRST && (stackable:true || noted:true) && value:>=900000 && value:<1000000) {
    menuSort = 129;
}
apply (VAR_SORTING_MENU_SORT_BY_VALUE_STACKABLES_FIRST && (stackable:true || noted:true) && value:>=1000000 && value:<2000000) {
    menuSort = 130;
}
apply (VAR_SORTING_MENU_SORT_BY_VALUE_STACKABLES_FIRST && (stackable:true || noted:true) && value:>=2000000 && value:<3000000) {
    menuSort = 131;
}
apply (VAR_SORTING_MENU_SORT_BY_VALUE_STACKABLES_FIRST && (stackable:true || noted:true) && value:>=3000000 && value:<4000000) {
    menuSort = 132;
}
apply (VAR_SORTING_MENU_SORT_BY_VALUE_STACKABLES_FIRST && (stackable:true || noted:true) && value:>=4000000 && value:<5000000) {
    menuSort = 133;
}
apply (VAR_SORTING_MENU_SORT_BY_VALUE_STACKABLES_FIRST && (stackable:true || noted:true) && value:>=5000000 && value:<6000000) {
    menuSort = 134;
}
apply (VAR_SORTING_MENU_SORT_BY_VALUE_STACKABLES_FIRST && (stackable:true || noted:true) && value:>=6000000 && value:<7000000) {
    menuSort = 135;
}
apply (VAR_SORTING_MENU_SORT_BY_VALUE_STACKABLES_FIRST && (stackable:true || noted:true) && value:>=7000000 && value:<8000000) {
    menuSort = 136;
}
apply (VAR_SORTING_MENU_SORT_BY_VALUE_STACKABLES_FIRST && (stackable:true || noted:true) && value:>=8000000 && value:<9000000) {
    menuSort = 137;
}
apply (VAR_SORTING_MENU_SORT_BY_VALUE_STACKABLES_FIRST && (stackable:true || noted:true) && value:>=9000000 && value:<10000000) {
    menuSort = 138;
}
apply (VAR_SORTING_MENU_SORT_BY_VALUE_STACKABLES_FIRST && (stackable:true || noted:true) && value:>=10000000 && value:<20000000) {
    menuSort = 139;
}
apply (VAR_SORTING_MENU_SORT_BY_VALUE_STACKABLES_FIRST && (stackable:true || noted:true) && value:>=20000000 && value:<30000000) {
    menuSort = 140;
}
apply (VAR_SORTING_MENU_SORT_BY_VALUE_STACKABLES_FIRST && (stackable:true || noted:true) && value:>=30000000 && value:<40000000) {
    menuSort = 141;
}
apply (VAR_SORTING_MENU_SORT_BY_VALUE_STACKABLES_FIRST && (stackable:true || noted:true) && value:>=40000000 && value:<50000000) {
    menuSort = 142;
}
apply (VAR_SORTING_MENU_SORT_BY_VALUE_STACKABLES_FIRST && (stackable:true || noted:true) && value:>=50000000 && value:<60000000) {
    menuSort = 143;
}
apply (VAR_SORTING_MENU_SORT_BY_VALUE_STACKABLES_FIRST && (stackable:true || noted:true) && value:>=60000000 && value:<70000000) {
    menuSort = 144;
}
apply (VAR_SORTING_MENU_SORT_BY_VALUE_STACKABLES_FIRST && (stackable:true || noted:true) && value:>=70000000 && value:<80000000) {
    menuSort = 145;
}
apply (VAR_SORTING_MENU_SORT_BY_VALUE_STACKABLES_FIRST && (stackable:true || noted:true) && value:>=80000000 && value:<90000000) {
    menuSort = 146;
}
apply (VAR_SORTING_MENU_SORT_BY_VALUE_STACKABLES_FIRST && (stackable:true || noted:true) && value:>=90000000 && value:<100000000) {
    menuSort = 147;
}
apply (VAR_SORTING_MENU_SORT_BY_VALUE_STACKABLES_FIRST && (stackable:true || noted:true) && value:>=100000000 && value:<200000000) {
    menuSort = 148;
}
apply (VAR_SORTING_MENU_SORT_BY_VALUE_STACKABLES_FIRST && (stackable:true || noted:true) && value:>=200000000 && value:<300000000) {
    menuSort = 149;
}
apply (VAR_SORTING_MENU_SORT_BY_VALUE_STACKABLES_FIRST && (stackable:true || noted:true) && value:>=300000000 && value:<400000000) {
    menuSort = 150;
}
apply (VAR_SORTING_MENU_SORT_BY_VALUE_STACKABLES_FIRST && (stackable:true || noted:true) && value:>=400000000 && value:<500000000) {
    menuSort = 151;
}
apply (VAR_SORTING_MENU_SORT_BY_VALUE_STACKABLES_FIRST && (stackable:true || noted:true) && value:>=500000000 && value:<600000000) {
    menuSort = 152;
}
apply (VAR_SORTING_MENU_SORT_BY_VALUE_STACKABLES_FIRST && (stackable:true || noted:true) && value:>=600000000 && value:<700000000) {
    menuSort = 153;
}
apply (VAR_SORTING_MENU_SORT_BY_VALUE_STACKABLES_FIRST && (stackable:true || noted:true) && value:>=700000000 && value:<800000000) {
    menuSort = 154;
}
apply (VAR_SORTING_MENU_SORT_BY_VALUE_STACKABLES_FIRST && (stackable:true || noted:true) && value:>=800000000 && value:<900000000) {
    menuSort = 155;
}
apply (VAR_SORTING_MENU_SORT_BY_VALUE_STACKABLES_FIRST && (stackable:true || noted:true) && value:>=900000000 && value:<1000000000) {
    menuSort = 156;
}
apply (VAR_SORTING_MENU_SORT_BY_VALUE_STACKABLES_FIRST && (stackable:true || noted:true) && value:>=1000000000 && value:<1100000000) {
    menuSort = 157;
}
apply (VAR_SORTING_MENU_SORT_BY_VALUE_STACKABLES_FIRST && (stackable:true || noted:true) && value:>=1100000000 && value:<1200000000) {
    menuSort = 158;
}
apply (VAR_SORTING_MENU_SORT_BY_VALUE_STACKABLES_FIRST && (stackable:true || noted:true) && value:>=1200000000 && value:<1300000000) {
    menuSort = 159;
}
apply (VAR_SORTING_MENU_SORT_BY_VALUE_STACKABLES_FIRST && (stackable:true || noted:true) && value:>=1300000000 && value:<1400000000) {
    menuSort = 160;
}
apply (VAR_SORTING_MENU_SORT_BY_VALUE_STACKABLES_FIRST && (stackable:true || noted:true) && value:>=1400000000 && value:<1500000000) {
    menuSort = 161;
}
apply (VAR_SORTING_MENU_SORT_BY_VALUE_STACKABLES_FIRST && (stackable:true || noted:true) && value:>=1500000000 && value:<1600000000) {
    menuSort = 162;
}
apply (VAR_SORTING_MENU_SORT_BY_VALUE_STACKABLES_FIRST && (stackable:true || noted:true) && value:>=1600000000 && value:<1700000000) {
    menuSort = 163;
}
apply (VAR_SORTING_MENU_SORT_BY_VALUE_STACKABLES_FIRST && (stackable:true || noted:true) && value:>=1700000000 && value:<1800000000) {
    menuSort = 164;
}
apply (VAR_SORTING_MENU_SORT_BY_VALUE_STACKABLES_FIRST && (stackable:true || noted:true) && value:>=1800000000 && value:<1900000000) {
    menuSort = 165;
}
apply (VAR_SORTING_MENU_SORT_BY_VALUE_STACKABLES_FIRST && (stackable:true || noted:true) && value:>=1900000000 && value:<2000000000) {
    menuSort = 166;
}
apply (VAR_SORTING_MENU_SORT_BY_VALUE_STACKABLES_FIRST && (stackable:true || noted:true) && value:>=2000000000) {
    menuSort = 167;
}

/* --- handling menu sort for untradeables --- */

apply (VAR_SORTING_MENU_SORT_UNTRADEABLE_FIRST && tradeable:false && value:>=0 && value:<10) {
    menuSort = 201;
}
apply (VAR_SORTING_MENU_SORT_UNTRADEABLE_FIRST && tradeable:false && value:>=10 && value:<20) {
    menuSort = 202;
}
apply (VAR_SORTING_MENU_SORT_UNTRADEABLE_FIRST && tradeable:false && value:>=20 && value:<30) {
    menuSort = 203;
}
apply (VAR_SORTING_MENU_SORT_UNTRADEABLE_FIRST && tradeable:false && value:>=30 && value:<40) {
    menuSort = 204;
}
apply (VAR_SORTING_MENU_SORT_UNTRADEABLE_FIRST && tradeable:false && value:>=40 && value:<50) {
    menuSort = 205;
}
apply (VAR_SORTING_MENU_SORT_UNTRADEABLE_FIRST && tradeable:false && value:>=50 && value:<60) {
    menuSort = 206;
}
apply (VAR_SORTING_MENU_SORT_UNTRADEABLE_FIRST && tradeable:false && value:>=60 && value:<70) {
    menuSort = 207;
}
apply (VAR_SORTING_MENU_SORT_UNTRADEABLE_FIRST && tradeable:false && value:>=70 && value:<80) {
    menuSort = 208;
}
apply (VAR_SORTING_MENU_SORT_UNTRADEABLE_FIRST && tradeable:false && value:>=80 && value:<90) {
    menuSort = 209;
}
apply (VAR_SORTING_MENU_SORT_UNTRADEABLE_FIRST && tradeable:false && value:>=90 && value:<100) {
    menuSort = 210;
}
apply (VAR_SORTING_MENU_SORT_UNTRADEABLE_FIRST && tradeable:false && value:>=100 && value:<200) {
    menuSort = 211;
}
apply (VAR_SORTING_MENU_SORT_UNTRADEABLE_FIRST && tradeable:false && value:>=200 && value:<300) {
    menuSort = 212;
}
apply (VAR_SORTING_MENU_SORT_UNTRADEABLE_FIRST && tradeable:false && value:>=300 && value:<400) {
    menuSort = 213;
}
apply (VAR_SORTING_MENU_SORT_UNTRADEABLE_FIRST && tradeable:false && value:>=400 && value:<500) {
    menuSort = 214;
}
apply (VAR_SORTING_MENU_SORT_UNTRADEABLE_FIRST && tradeable:false && value:>=500 && value:<600) {
    menuSort = 215;
}
apply (VAR_SORTING_MENU_SORT_UNTRADEABLE_FIRST && tradeable:false && value:>=600 && value:<700) {
    menuSort = 216;
}
apply (VAR_SORTING_MENU_SORT_UNTRADEABLE_FIRST && tradeable:false && value:>=700 && value:<800) {
    menuSort = 217;
}
apply (VAR_SORTING_MENU_SORT_UNTRADEABLE_FIRST && tradeable:false && value:>=800 && value:<900) {
    menuSort = 218;
}
apply (VAR_SORTING_MENU_SORT_UNTRADEABLE_FIRST && tradeable:false && value:>=900 && value:<1000) {
    menuSort = 219;
}
apply (VAR_SORTING_MENU_SORT_UNTRADEABLE_FIRST && tradeable:false && value:>=1000 && value:<2000) {
    menuSort = 220;
}
apply (VAR_SORTING_MENU_SORT_UNTRADEABLE_FIRST && tradeable:false && value:>=2000 && value:<3000) {
    menuSort = 221;
}
apply (VAR_SORTING_MENU_SORT_UNTRADEABLE_FIRST && tradeable:false && value:>=3000 && value:<4000) {
    menuSort = 222;
}
apply (VAR_SORTING_MENU_SORT_UNTRADEABLE_FIRST && tradeable:false && value:>=4000 && value:<5000) {
    menuSort = 223;
}
apply (VAR_SORTING_MENU_SORT_UNTRADEABLE_FIRST && tradeable:false && value:>=5000 && value:<6000) {
    menuSort = 224;
}
apply (VAR_SORTING_MENU_SORT_UNTRADEABLE_FIRST && tradeable:false && value:>=6000 && value:<7000) {
    menuSort = 225;
}
apply (VAR_SORTING_MENU_SORT_UNTRADEABLE_FIRST && tradeable:false && value:>=7000 && value:<8000) {
    menuSort = 226;
}
apply (VAR_SORTING_MENU_SORT_UNTRADEABLE_FIRST && tradeable:false && value:>=8000 && value:<9000) {
    menuSort = 227;
}
apply (VAR_SORTING_MENU_SORT_UNTRADEABLE_FIRST && tradeable:false && value:>=9000 && value:<10000) {
    menuSort = 228;
}
apply (VAR_SORTING_MENU_SORT_UNTRADEABLE_FIRST && tradeable:false && value:>=10000 && value:<20000) {
    menuSort = 229;
}
apply (VAR_SORTING_MENU_SORT_UNTRADEABLE_FIRST && tradeable:false && value:>=20000 && value:<30000) {
    menuSort = 230;
}
apply (VAR_SORTING_MENU_SORT_UNTRADEABLE_FIRST && tradeable:false && value:>=30000 && value:<40000) {
    menuSort = 231;
}
apply (VAR_SORTING_MENU_SORT_UNTRADEABLE_FIRST && tradeable:false && value:>=40000 && value:<50000) {
    menuSort = 232;
}
apply (VAR_SORTING_MENU_SORT_UNTRADEABLE_FIRST && tradeable:false && value:>=50000 && value:<60000) {
    menuSort = 233;
}
apply (VAR_SORTING_MENU_SORT_UNTRADEABLE_FIRST && tradeable:false && value:>=60000 && value:<70000) {
    menuSort = 234;
}
apply (VAR_SORTING_MENU_SORT_UNTRADEABLE_FIRST && tradeable:false && value:>=70000 && value:<80000) {
    menuSort = 235;
}
apply (VAR_SORTING_MENU_SORT_UNTRADEABLE_FIRST && tradeable:false && value:>=80000 && value:<90000) {
    menuSort = 236;
}
apply (VAR_SORTING_MENU_SORT_UNTRADEABLE_FIRST && tradeable:false && value:>=90000 && value:<100000) {
    menuSort = 237;
}
apply (VAR_SORTING_MENU_SORT_UNTRADEABLE_FIRST && tradeable:false && value:>=100000 && value:<200000) {
    menuSort = 238;
}
apply (VAR_SORTING_MENU_SORT_UNTRADEABLE_FIRST && tradeable:false && value:>=200000 && value:<300000) {
    menuSort = 239;
}
apply (VAR_SORTING_MENU_SORT_UNTRADEABLE_FIRST && tradeable:false && value:>=300000 && value:<400000) {
    menuSort = 240;
}
apply (VAR_SORTING_MENU_SORT_UNTRADEABLE_FIRST && tradeable:false && value:>=400000 && value:<500000) {
    menuSort = 241;
}
apply (VAR_SORTING_MENU_SORT_UNTRADEABLE_FIRST && tradeable:false && value:>=500000 && value:<600000) {
    menuSort = 242;
}
apply (VAR_SORTING_MENU_SORT_UNTRADEABLE_FIRST && tradeable:false && value:>=600000 && value:<700000) {
    menuSort = 243;
}
apply (VAR_SORTING_MENU_SORT_UNTRADEABLE_FIRST && tradeable:false && value:>=700000 && value:<800000) {
    menuSort = 244;
}
apply (VAR_SORTING_MENU_SORT_UNTRADEABLE_FIRST && tradeable:false && value:>=800000 && value:<900000) {
    menuSort = 245;
}
apply (VAR_SORTING_MENU_SORT_UNTRADEABLE_FIRST && tradeable:false && value:>=900000 && value:<1000000) {
    menuSort = 246;
}
apply (VAR_SORTING_MENU_SORT_UNTRADEABLE_FIRST && tradeable:false && value:>=1000000 && value:<2000000) {
    menuSort = 247;
}
apply (VAR_SORTING_MENU_SORT_UNTRADEABLE_FIRST && tradeable:false && value:>=2000000 && value:<3000000) {
    menuSort = 248;
}
apply (VAR_SORTING_MENU_SORT_UNTRADEABLE_FIRST && tradeable:false && value:>=3000000 && value:<4000000) {
    menuSort = 249;
}
apply (VAR_SORTING_MENU_SORT_UNTRADEABLE_FIRST && tradeable:false && value:>=4000000 && value:<5000000) {
    menuSort = 250;
}
apply (VAR_SORTING_MENU_SORT_UNTRADEABLE_FIRST && tradeable:false && value:>=5000000 && value:<6000000) {
    menuSort = 251;
}
apply (VAR_SORTING_MENU_SORT_UNTRADEABLE_FIRST && tradeable:false && value:>=6000000 && value:<7000000) {
    menuSort = 252;
}
apply (VAR_SORTING_MENU_SORT_UNTRADEABLE_FIRST && tradeable:false && value:>=7000000 && value:<8000000) {
    menuSort = 253;
}
apply (VAR_SORTING_MENU_SORT_UNTRADEABLE_FIRST && tradeable:false && value:>=8000000 && value:<9000000) {
    menuSort = 254;
}
apply (VAR_SORTING_MENU_SORT_UNTRADEABLE_FIRST && tradeable:false && value:>=9000000 && value:<10000000) {
    menuSort = 255;
}
apply (VAR_SORTING_MENU_SORT_UNTRADEABLE_FIRST && tradeable:false && value:>=10000000 && value:<20000000) {
    menuSort = 256;
}
apply (VAR_SORTING_MENU_SORT_UNTRADEABLE_FIRST && tradeable:false && value:>=20000000 && value:<30000000) {
    menuSort = 257;
}
apply (VAR_SORTING_MENU_SORT_UNTRADEABLE_FIRST && tradeable:false && value:>=30000000 && value:<40000000) {
    menuSort = 258;
}
apply (VAR_SORTING_MENU_SORT_UNTRADEABLE_FIRST && tradeable:false && value:>=40000000 && value:<50000000) {
    menuSort = 259;
}
apply (VAR_SORTING_MENU_SORT_UNTRADEABLE_FIRST && tradeable:false && value:>=50000000 && value:<60000000) {
    menuSort = 260;
}
apply (VAR_SORTING_MENU_SORT_UNTRADEABLE_FIRST && tradeable:false && value:>=60000000 && value:<70000000) {
    menuSort = 261;
}
apply (VAR_SORTING_MENU_SORT_UNTRADEABLE_FIRST && tradeable:false && value:>=70000000 && value:<80000000) {
    menuSort = 262;
}
apply (VAR_SORTING_MENU_SORT_UNTRADEABLE_FIRST && tradeable:false && value:>=80000000 && value:<90000000) {
    menuSort = 263;
}
apply (VAR_SORTING_MENU_SORT_UNTRADEABLE_FIRST && tradeable:false && value:>=90000000 && value:<100000000) {
    menuSort = 264;
}
apply (VAR_SORTING_MENU_SORT_UNTRADEABLE_FIRST && tradeable:false && value:>=100000000 && value:<200000000) {
    menuSort = 265;
}
apply (VAR_SORTING_MENU_SORT_UNTRADEABLE_FIRST && tradeable:false && value:>=200000000 && value:<300000000) {
    menuSort = 266;
}
apply (VAR_SORTING_MENU_SORT_UNTRADEABLE_FIRST && tradeable:false && value:>=300000000 && value:<400000000) {
    menuSort = 267;
}
apply (VAR_SORTING_MENU_SORT_UNTRADEABLE_FIRST && tradeable:false && value:>=400000000 && value:<500000000) {
    menuSort = 268;
}
apply (VAR_SORTING_MENU_SORT_UNTRADEABLE_FIRST && tradeable:false && value:>=500000000 && value:<600000000) {
    menuSort = 269;
}
apply (VAR_SORTING_MENU_SORT_UNTRADEABLE_FIRST && tradeable:false && value:>=600000000 && value:<700000000) {
    menuSort = 270;
}
apply (VAR_SORTING_MENU_SORT_UNTRADEABLE_FIRST && tradeable:false && value:>=700000000 && value:<800000000) {
    menuSort = 271;
}
apply (VAR_SORTING_MENU_SORT_UNTRADEABLE_FIRST && tradeable:false && value:>=800000000 && value:<900000000) {
    menuSort = 272;
}
apply (VAR_SORTING_MENU_SORT_UNTRADEABLE_FIRST && tradeable:false && value:>=900000000 && value:<1000000000) {
    menuSort = 273;
}
apply (VAR_SORTING_MENU_SORT_UNTRADEABLE_FIRST && tradeable:false && value:>=1000000000 && value:<1100000000) {
    menuSort = 274;
}
apply (VAR_SORTING_MENU_SORT_UNTRADEABLE_FIRST && tradeable:false && value:>=1100000000 && value:<1200000000) {
    menuSort = 275;
}
apply (VAR_SORTING_MENU_SORT_UNTRADEABLE_FIRST && tradeable:false && value:>=1200000000 && value:<1300000000) {
    menuSort = 276;
}
apply (VAR_SORTING_MENU_SORT_UNTRADEABLE_FIRST && tradeable:false && value:>=1300000000 && value:<1400000000) {
    menuSort = 277;
}
apply (VAR_SORTING_MENU_SORT_UNTRADEABLE_FIRST && tradeable:false && value:>=1400000000 && value:<1500000000) {
    menuSort = 278;
}
apply (VAR_SORTING_MENU_SORT_UNTRADEABLE_FIRST && tradeable:false && value:>=1500000000 && value:<1600000000) {
    menuSort = 279;
}
apply (VAR_SORTING_MENU_SORT_UNTRADEABLE_FIRST && tradeable:false && value:>=1600000000 && value:<1700000000) {
    menuSort = 280;
}
apply (VAR_SORTING_MENU_SORT_UNTRADEABLE_FIRST && tradeable:false && value:>=1700000000 && value:<1800000000) {
    menuSort = 281;
}
apply (VAR_SORTING_MENU_SORT_UNTRADEABLE_FIRST && tradeable:false && value:>=1800000000 && value:<1900000000) {
    menuSort = 282;
}
apply (VAR_SORTING_MENU_SORT_UNTRADEABLE_FIRST && tradeable:false && value:>=1900000000 && value:<2000000000) {
    menuSort = 283;
}
apply (VAR_SORTING_MENU_SORT_UNTRADEABLE_FIRST && tradeable:false && value:>=2000000000) {
    menuSort = 284;
}

/* --- putting certain items first in the menu sorting --- */

apply (name:VAR_MENU_SORT_ITEMS_FIRST) {
    menuSort = 300;
}





/*@ define:module:constants
hidden: true
name: Constants
*/

#define CONST_ACCOUNT_TYPE_MAIN 0
#define CONST_ACCOUNT_TYPE_IRONMAN 1
#define CONST_ACCOUNT_TYPE_ULTIMATE_IRONMAN 2
#define CONST_ACCOUNT_TYPE_HARDCORE_IRONMAN 3
#define CONST_ACCOUNT_TYPE_GROUP_IRONMAN 4
#define CONST_ACCOUNT_TYPE_HARDCORE_GROUP_IRONMAN 5
#define CONST_ACCOUNT_TYPE_UNRANKED_GROUP_IRONMAN 6

#define CONST_SPINDEL_AREA [1595, 11520, 2, 1672, 11588, 2]
#define CONST_CALVARION_AREA [1871, 11530, 1, 1901, 11564, 1]
#define CONST_ARTIO_AREA [1735, 11519, 0, 1783, 11568, 0]
#define CONST_VENENATIS_AREA [3391, 10181, 2, 3457, 10241, 2]
#define CONST_VETION_AREA [3283, 10189, 1, 3307, 10217, 1]
#define CONST_CALLISTO_AREA [3335, 10305, 0, 3383, 10353, 0]

#define CONST_COX_AREA [3200, 5120, 0, 3391, 5759, 2]

#define CONST_COX_OLM_AREA [3211, 5703, 0, 3254, 5761, 0]
#define CONST_COX_VASA_AREA [3263, 5279, 0, 3360, 5312, 0]
#define CONST_COX_SHAMANS_AREA [3263, 5247, 0, 3362, 5279, 0]
#define CONST_COX_MUTADILE_AREA [3263, 5309, 1, 3360, 5344, 1]
#define CONST_COX_TEKTON_AREA [3263, 5278, 1, 3361, 5311, 1]
#define CONST_COX_TIGHTROPE_AREA [3263, 5341, 1, 3361, 5375, 1]
#define CONST_COX_ICE_DEMON_AREA [3263, 5341, 0, 3361, 5375, 0]
#define CONST_COX_THIEVING_AREA [3263, 5374, 0, 3360, 5408, 0]

#define CONST_TOB_AREA [3153, 4233, 0, 3322, 4479, 0]

#define CONST_TOA_AREA [3515, 5126, 0, 3965, 5432, 0]

#define CONST_GOD_WARS_DUNGEON_AREA [2816, 5184, 0, 2943, 5375, 3]
#define CONST_COMMANDER_ZILYANA_AREA [2884, 5257, 0, 2908, 5276, 0]
#define CONST_GENERAL_GRAARDOR_AREA [2863, 5350, 2, 2877, 5373, 2]
#define CONST_KREEARRA_AREA [2820, 5295, 2, 2843, 5309, 2]
#define CONST_KRIL_TSUTSAROTH_AREA [2917, 5317, 2, 2941, 5332, 2]
#define CONST_NEX_AREA [2900, 5188, 0, 2943, 5218, 0]

#define CONST_AMOXLIATL_AREA [1347, 4493, 0, 1388, 4530, 0]

#define CONST_HUEYCOATL_AREA [1502, 3275, 0, 1521, 3294, 0]
#define CONST_MUSPAH_AREA [2831, 4242, 0, 2862, 4275, 0]
#define CONST_THE_WHISPERER_AREA [2631, 6337, 0, 2682, 6394, 0]
#define CONST_VARDORVIS_AREA [1122, 3411, 0, 1137, 3426, 0]
#define CONST_DUKE_SUCELLUS_AREA [3027, 6432, 0, 3052, 6460, 0]
#define CONST_THE_LEVIATHAN_AREA [2068, 6360, 0, 2095, 6386, 0]

#define CONST_YAMA_AREA [1485, 10063, 0, 1524, 10092, 0]

#define CONST_ANCIENT_GUTHIXIAN_TEMPLE_AREA [4020, 4350, 0, 4163, 4484, 0]

#define CONST_GAUNTLET_AREA [1856, 5632, 0, 1983, 5695, 3]

#define CONST_LAST_MAN_STANDING_DESERT_ISLAND_AREA [3391, 5758, 0, 3521, 5889, 3]
#define CONST_LAST_MAN_STANDING_WILD_VARROCK_AREA [3457, 6017, 0, 3646, 6205, 3]

#define CONST_SLAYER_WILDERNESS_SLAYER_CAVE_AREA [3323, 10044, 0, 3458, 10178, 0]
#define CONST_SLAYER_HYDRAS_AREA [1291, 10221, 0, 1341, 10279, 0]
#define CONST_SLAYER_SMOKE_DEVILS_AREA [2376, 9408, 0, 2432, 9472, 0]
#define CONST_SLAYER_ARAXYTES_AREA [3650, 9793, 0, 3716, 9870, 0]
#define CONST_SLAYER_DARK_BEASTS_MOURNER_TUNNELS_AREA [1979, 4629, 0, 2043, 4678, 0]
#define CONST_SLAYER_DARK_BEASTS_IORWERTH_DUNGEON_1_AREA [3151, 12415, 0, 3182, 12439, 0]
#define CONST_SLAYER_DARK_BEASTS_IORWERTH_DUNGEON_2_AREA [3200, 12381, 0, 3243, 12407, 0]
#define CONST_SLAYER_CAVE_KRAKEN_AREA [2238, 9983, 0, 2304, 10022, 0]
#define CONST_SLAYER_ABYSSAL_DEMONS_ABYSSAL_AREA_AREA [3007, 4865, 0, 3070, 4926, 0]
#define CONST_SLAYER_ABYSSAL_DEMONS_CATACOMBS_CENTER_AREA [1667, 10049, 0, 1685, 10065, 0]
#define CONST_SLAYER_ABYSSAL_DEMONS_CATACOMBS_NORTH_AREA [1667, 10083, 0, 1681, 10102, 0]
#define CONST_SLAYER_ABYSSAL_DEMONS_SLAYER_TOWER_TOP_AREA [3404, 3555, 2, 3431, 3581, 2]
#define CONST_SLAYER_ABYSSAL_DEMONS_SLAYER_TOWER_BASEMENT_AREA [3429, 9953, 3, 3449, 9977, 3]
#define CONST_SLAYER_ABYSSAL_DEMONS_WILDERNESS_SLAYER_CAVE_AREA [3331, 10151, 0, 3353, 10174, 0]
#define CONST_SLAYER_DRAKES_AREA [1297, 10224, 1, 1363, 10260, 1]
#define CONST_SLAYER_NECHRYAEL_SLAYER_TOWER_TOP_AREA [3431, 3555, 2, 3453, 3580, 2]
#define CONST_SLAYER_NECHRYAEL_SLAYER_TOWER_BASEMENT_AREA [3399, 9977, 3, 3429, 9954, 3]
#define CONST_SLAYER_GREATER_NECHRYAEL_CATACOMBS_AREA [1689, 10087, 0, 1712, 10075, 0]
#define CONST_SLAYER_GREATER_NECHRYAEL_IORWERTH_NORTH_AREA [3216, 12449, 0, 3241, 12469, 0]
#define CONST_SLAYER_GREATER_NECHRYAEL_IORWERTH_SOUTH_AREA [3213, 12410, 0, 3233, 12432, 0]
#define CONST_SLAYER_GREATER_NECHRYAEL_WILDERNESS_SLAYER_CAVE_AREA [3329, 10095, 0, 3345, 10120, 0]
#define CONST_SLAYER_GARGOYLES_AREA [0000, 0000, 0, 0000, 0000, 0]
#define CONST_SLAYER_SKELETAL_WYVERNS_AREA [0000, 0000, 0, 0000, 0000, 0]
#define CONST_SLAYER_KURASKS_AREA [0000, 0000, 0, 0000, 0000, 0]
#define CONST_SLAYER_FOSSIL_ISLAND_WYVERNS_AREA [0000, 0000, 0, 0000, 0000, 0]
#define CONST_SLAYER_DUST_DEVILS_AREA [0000, 0000, 0, 0000, 0000, 0]
#define CONST_SLAYER_WYRMS_AREA [0000, 0000, 0, 0000, 0000, 0]
#define CONST_SLAYER_CAVE_HORRORS_AREA [0000, 0000, 0, 0000, 0000, 0]
#define CONST_SLAYER_ZYGOMITES_AREA [0000, 0000, 0, 0000, 0000, 0]
#define CONST_SLAYER_WARPED_CREATURES_AREA [0000, 0000, 0, 0000, 0000, 0]
#define CONST_SLAYER_TUROTHS_AREA [0000, 0000, 0, 0000, 0000, 0]
#define CONST_SLAYER_JELLIES_AREA [0000, 0000, 0, 0000, 0000, 0]
#define CONST_SLAYER_BLOODVELDS_AREA [0000, 0000, 0, 0000, 0000, 0]

#define CONST_PRIF_SPAWN_AREA [3238, 6066, 0, 3284, 6102, 0]
#define CONST_FALADOR_SPAWN_AREA [2958, 3335, 0, 2983, 3355, 0]
#define CONST_EDGEVILLE_NETTLES_AREA [3088, 3468, 0, 3092, 3470, 0]
#define CONST_EDGEVILLE_MONASTERY_SECOND_FLOOR_AREA [3042, 3480, 1, 3062, 3501, 1]
#define CONST_ARDY_MARKET_CHEST_AREA [2672, 3305, 0, 2678, 3312, 0]
#define CONST_COLO_LOBBY_AREA [1794, 9479, 0, 1856, 9538, 0]
#define CONST_LUMBRIDGE_BASEMENT_CAVE_EXIT_AREA [3206, 9600, 0, 3237, 9628, 0]



#define CONST_GLOBAL_TRADEABLE_NON_TRADEABLE_ITEMS [     "1/2 anchovy pizza",     "1/2 meat pizza",     "1/2 pineapple pizza",     "1/2 plain pizza",     "2/3 cake",     "2/3 chocolate cake",     "Adamant fire arrow",     "Air rune pack",     "Amethyst fire arrow",     "An empty box",     "Anchovy paste",     "Apples(1)",     "Apples(2)",     "Apples(3)",     "Apples(4)",     "Astronomy book",     "Bailing bucket",     "Bananas(1)",     "Bananas(2)",     "Bananas(3)",     "Bananas(4)",     "Bandages",     "Barricade",     "Basket pack",     "Black mask (1)",     "Black mask (10)",     "Black mask (2)",     "Black mask (3)",     "Black mask (4)",     "Black mask (5)",     "Black mask (6)",     "Black mask (7)",     "Black mask (8)",     "Black mask (9)",     "Black satchel",     "Blue flowers",     "Broken pole",     "Bronze fire arrow",     "Bruised banana",     "Bucket of rubble",     "Burnt anglerfish",     "Burnt bat",     "Burnt batta",     "Burnt beast meat",     "Burnt bird meat",     "Burnt bread",     "Burnt cake",     "Burnt cave eel",     "Burnt chicken",     "Burnt crunchies",     "Burnt curry",     "Burnt dark crab",     "Burnt eel",     "Burnt egg",     "Burnt fish",     "Burnt fish",     "Burnt fish",     "Burnt fish",     "Burnt fish",     "Burnt fish",     "Burnt gnomebowl",     "Burnt jubbly",     "Burnt karambwan",     "Burnt lobster",     "Burnt manta ray",     "Burnt meat",     "Burnt monkfish",     "Burnt mushroom",     "Burnt onion",     "Burnt oomlie",     "Burnt oomlie wrap",     "Burnt pie",     "Burnt pizza",     "Burnt potato",     "Burnt rabbit",     "Burnt rainbow fish",     "Burnt sea turtle",     "Burnt shark",     "Burnt shrimp",     "Burnt snail",     "Burnt spider (stick)",     "Burnt stew",     "Burnt sweetcorn",     "Burnt swordfish",     "Cadarn lineage",     "Cat training medal",     "Chaos rune pack",     "Chaotic handegg",     "Chocolate slice",     "Climbing rope",     "Coconut shell",     "Coins",     "Cooked chicken",     "Cooked meat",     "Crate",     "Crushed gem",     "Crystal singing for beginners",     "Damp egg",     "Damp tinderbox",     "Dragon fire arrow",     "Earth rune pack",     "Empty oyster",     "Explosive potion",     "Feather pack",     "Field ration",     "Fire rune pack",     "Flyer",     "Fossilised Dung",     "Glassblowing book",     "Gold satchel",     "Green satchel",     "Ground bat bones",     "Guthix balance (unf)",     "Half a admiral pie",     "Half a apple pie",     "Half a botanical pie",     "Half a dragonfruit pie",     "Half a fish pie",     "Half a garden pie",     "Half a meat pie",     "Half a mud pie",     "Half a mushroom pie",     "Half a redberry pie",     "Half a summer pie",     "Half a wild pie",     "Half certificate (left)",     "Half certificate (right)",     "Half coconut",     "Holy handegg",     "Incomplete pizza",     "Iron fire arrow",     "Iron sickle",     "Mind rune pack",     "Miscellaneous key",     "Mithril fire arrow",     "Mud",     "Muddy rock",     "Newcomer map",     "Newspaper",     "Old wool",     "Oranges(1)",     "Oranges(2)",     "Oranges(3)",     "Oranges(4)",     "Part admiral pie",     "Part fish pie",     "Part garden pie",     "Part mud pie",     "Part summer pie",     "Part wild pie",     "Peaceful handegg",     "Pete's candlestick",     "Phoenix crossbow",     "Plain satchel",     "Plant pot pack",     "Platinum token",     "Potion",     "Raw beef",     "Raw chicken",     "Raw swamp paste",     "Red flowers",     "Red satchel",     "Rock",     "Rock",     "Rotten food",     "Rotten tomato",     "Ruined chompy",     "Ruined herb tea",     "Rune fire arrow",     "Rune satchel",     "Sack pack",     "Sample bottle",     "Shayzien supply crate",     "Slice of cake",     "Smashed glass",     "Smelly sock",     "Spare controls",     "Spider on shaft",     "Spooky egg",     "Steel fire arrow",     "Strawberries(1)",     "Strawberries(2)",     "Strawberries(3)",     "Strawberries(4)",     "Strip of cloth",     "Sulphur",     "Tankard",     "Tea leaves",     "Tile",     "Tomatoes(1)",     "Tomatoes(2)",     "Tomatoes(3)",     "Tomatoes(4)",     "Toolkit",     "Tzhaar air rune pack",     "Tzhaar earth rune pack",     "Tzhaar fire rune pack",     "Tzhaar water rune pack",     "Ugthanki kebab",     "Uncooked pizza",     "Unfinished broad bolt pack",     "Washing bowl",     "Water rune pack",     "Water-filled vial pack",     "Weapon store key",     "Ensouled goblin head",     "Ensouled monkey head",     "Ensouled imp head",     "Ensouled minotaur head",     "Ensouled scorpion head",     "Ensouled bear head",     "Ensouled unicorn head",     "Ensouled dog head",     "Ensouled chaos druid head",     "Ensouled giant head",     "Ensouled ogre head",     "Ensouled elf head",     "Ensouled troll head",     "Ensouled horror head",     "Ensouled kalphite head",     "Ensouled dagannoth head",     "Ensouled bloodveld head",     "Ensouled tzHaar head",     "Ensouled demon head",     "Ensouled hellhound head",     "Ensouled aviansie head",     "Ensouled abyssal head",     "Ensouled dragon head",     "Waterskin(1)",     "Waterskin(2)",     "Waterskin(3)", ]

#define CONST_FARMING_SEEDS_ALLOTMENT_LIST [   "Potato seed",   "Onion seed",   "Cabbage seed",   "Tomato seed",   "Sweetcorn seed",   "Strawberry seed",   "Watermelon seed",   "Snape grass seed", ]

#define CONST_FARMING_SEEDS_FLOWER_LIST [   "Marigold seed",   "Rosemary seed",   "Nasturtium seed",   "Woad seed",   "Limpwurt seed",   "White lily seed", ]

#define CONST_FARMING_SEEDS_HERB_LIST [   "Guam seed",   "Marrentill seed",   "Tarromin seed",   "Harralander seed",   "Ranarr seed",   "Toadflax seed",   "Irit seed",   "Avantoe seed",   "Kwuarm seed",   "Snapdragon seed",   "Huasca seed",   "Cadantine seed",   "Lantadyme seed",   "Dwarf weed seed",   "Torstol seed", ]

#define CONST_FARMING_SEEDS_HOPS_LIST [   "Barley seed",   "Hammerstone seed",   "Asgarnian seed",   "Jute seed",   "Yanillian seed",   "Krandorian seed",   "Wildblood seed", ]

#define CONST_FARMING_SEEDS_BUSH_LIST [   "Redberry seed",   "Cadavaberry seed",   "Dwellberry seed",   "Jangerberry seed",   "Whiteberry seed",   "Poison ivy seed", ]

#define CONST_FARMING_SEEDS_TREE_LIST [   "Acorn",   "Willow seed",   "Maple seed",   "Yew seed",   "Magic seed", ]

#define CONST_FARMING_SEEDS_FRUIT_TREE_LIST [   "Apple seed",   "Banana seed",   "Orange seed",   "Curry seed",   "Pineapple seed",   "Papaya seed",   "Palm tree seed",   "Dragonfruit seed", ]

#define CONST_FARMING_SEEDS_SPECIAL_TREE_LIST [   "Teak seed",   "Mahogany seed",   "Calquat tree seed",   "Crystal acorn",   "Spirit seed",   "Celastrus seed",   "Redwood tree seed", ]

#define CONST_FARMING_SEEDS_SPECIAL_LIST [   "Seaweed spore",   "Grape seed",   "Mushroom spore",   "Belladonna seed",   "Hespori seed",   "Cactus seed",   "Potato cactus seed", ]

#define CONST_FARMING_SEEDS_ANIMA_LIST [   "Kronos seed",   "Iasor seed",   "Attas seed", ]

#define CONST_CURRENCY_LIST [   "Abyssal pearls",   "Agility arena ticket",   "Anima-infused bark",   "Archery ticket",   "Barronite shards",   "Blood money",   "Brimhaven voucher",   "Castle wars ticket",   "Coins",   "Ecto-token",   "Frog token",   "Glistening tear",   "Golden nugget",   "Hallowed mark",   "Intelligence",   "Mark of grace",   "Mermaid's tear",   "Minnow",   "Molch pearl",   "Mole claw",   "Mole skin",   "Nuggets",   "Numulite",   "Paramaya ticket",   "Platinum token",   "Rare creature parts",   "Reward token credits",   "Shantay pass",   "Ship ticket",   "Stardust",   "Termites",   "Tokkul",   "Trading sticks",   "Unidentified minerals",   "Warrior guild token", ]

#define CONST_FISHING_EQUIPMENT_LIST [   "Small fishing net",   "Big fishing net",   "Drift net",   "Fishing rod",   "Fly fishing rod",   "Oily fishing rod",   "Harpoon",   "Lobster pot",   "Karambwan vessel", ]

#define CONST_FISHING_BAIT_LIST [   "Sandworms",   "Fishing bait",   "Feather",   "Stripy feather",   "Dark fishing bait",   "King worm",   "Fish chunks",   "Raw karambwanji",   "Diabolic worms", ]

#define CONST_FISHING_RAW_FISH_LIST [   "Raw shrimps",   "Raw anchovies",   "Raw guppy",   "Raw cavefish",   "Raw tetra",   "Frog spawn",   "Raw monkfish",   "Minnow",   "Raw mackerel",   "Raw cod",   "Raw bass",   "Raw catfish",   "Raw sardine",   "Raw herring",   "Raw pike",   "Raw slimy eel",   "Raw cave eel",   "Raw anglerfish",   "Sacred eel",   "Raw trout",   "Raw salmon",   "Raw rainbow fish",   "Raw lava eel",   "Infernal eel",   "Leaping trout",   "Leaping salmon",   "Leaping sturgeon",   "Raw tuna",   "Raw swordfish",   "Raw shark",   "Raw lobster",   "Raw dark crab",   "Bluegill",   "Common tench",   "Mottled eel",   "Greater siren",   "Raw karambwan", ]

#define CONST_ALL_HERBS [   "*guam leaf",   "*marrentill",   "*tarromin",   "*harralander",   "*ranarr weed",   "*toadflax",   "*irit leaf",   "*avantoe",   "*kwuarm",   "*huasca",   "*snapdragon",   "*cadantine",   "*lantadyme",   "*dwarf weed",   "*torstol", ]

#define CONST_ALL_HERBLORE_EQUIPMENT [   "Pestle and mortar",   "Vial",   "Vial of water",   "Alchemist gloves",   "Alchemist pants",   "Alchemist labcoat",   "Prescription goggles",   "Alchemist's amulet", ]

#define CONST_HUNTER_FOODS_LIST [   "Cooked wild kebbit",   "Cooked larupia",   "Cooked barb-tailed kebbit",   "Cooked graahk",   "Cooked kyatt",   "Cooked pyre fox",   "Cooked sunlight antelope",   "Cooked dashing kebbit",   "Cooked moonlight antelope", ]

#define CONST_FISH_FOODS_LIST [   "Shrimps",   "Sardine",   "Karambwanji",   "Herring",   "Anchovies",   "Mackerel",   "Trout",   "Cod",   "Pike",   "Cooked slimy eel",   "Salmon",   "Tuna",   "Rainbow fish",   "Cave eel",   "Lobster",   "Bass",   "Swordfish",   "Lava eel",   "Monkfish",   "Cooked karambwan",   "Shark",   "Sea turtle",   "Manta ray",   "Anglerfish",   "Dark crab", ]

#define CONST_POTATOES_FOODS_LIST [   "Baked potato",   "Potato with butter",   "Chilli potato",   "Potato with cheese",   "Egg potato",   "Mushroom potato",   "Tuna potato", ]

#define CONST_PIE_FOODS_LIST [   "Redberry pie",   "Half a redberry pie",   "Meat pie",   "Half a meat pie",   "Apple pie",   "Half a apple pie",   "Garden pie",   "Half a garden pie",   "Fish pie",   "Half a fish pie",   "Botanical pie",   "Half a botanical pie",   "Mushroom pie",   "Half a mushroom pie",   "Admiral pie",   "Half a admiral pie",   "Dragonfruit pie",   "Half a dragonfruit pie",   "Wild pie",   "Half a wild pie",   "Summer pie",   "Half a summer pie", ]

#define CONST_PIZZA_FOODS_LIST [   "1/2 Plain pizza",   "Plain pizza",   "1/2 Meat pizza",   "Meat pizza",   "1/2 Anchovy pizza",   "Anchovy pizza",   "1/2 Pineapple pizza",   "Pineapple pizza", ]

#define CONST_CAKE_FOODS_LIST [   "Cake",   "2/3 Cake",   "Slice of Cake",   "Chocolate cake",   "2/3 Chocolate cake",   "Chocolate Slice", ]

#define CONST_DEFENDERS_LIST [   "Bronze defender",   "Bronze defender (broken)",   "Bronze defender (l)",   "Iron defender",   "Iron defender (broken)",   "Iron defender (l)",   "Steel defender",   "Steel defender (broken)",   "Steel defender (l)",   "Black defender",   "Black defender (broken)",   "Black defender (l)",   "Mithril defender",   "Mithril defender (broken)",   "Mithril defender (l)",   "Adamant defender",   "Adamant defender (broken)",   "Adamant defender (l)",   "Rune defender",   "Rune defender (broken)",   "Rune defender (l)",   "Dragon defender",   "Dragon defender (broken)",   "Dragon defender (l)",   "Rune defender (t)",   "Dragon defender (t)",   "Avernic defender",   "Avernic defender (broken)",   "Avernic defender (l)",   "Ghommal's avernic defender 5",   "Ghommal's avernic defender 5 (l)",   "Ghommal's avernic defender 6",   "Ghommal's avernic defender 6 (l)", ]

#define CONST_BRONZE_ONE_HANDED_MELEE_WEAPONS [   "Bronze dagger",   "Bronze axe",   "Bronze mace",   "Bronze sword",   "Bronze pickaxe",   "Bronze scimitar",   "Bronze hasta",   "Bronze longsword",   "Bronze warhammer",   "Bronze battleaxe", ]

#define CONST_BRONZE_TWO_HANDED_MELEE_WEAPONS [   "Bronze claws",   "Bronze spear",   "Bronze halberd",   "Bronze 2h sword", ]

#define CONST_BRONZE_RANGED_WEAPONS [   "Bronze crossbow", ]

#define CONST_BRONZE_AMMO [   "Bronze dart",   "Bronze knife",   "Bronze thrownaxe",   "Bronze arrow",   "Bronze bolts",   "Bronze brutal",   "Bronze javelin", ]

#define CONST_BRONZE_ARMOUR [   "Bronze boots",   "Bronze gloves",   "Bronze defender",   "Bronze defender (broken)",   "Bronze defender (l)",   "Bronze med helm",   "Bronze full helm",   "Bronze sq shield",   "Bronze platelegs",   "Bronze plateskirt",   "Bronze kiteshield",   "Bronze chainbody",   "Bronze platebody", ]

#define CONST_BRONZE_TRIMMED_ARMOUR [   "Bronze full helm (t)",   "Bronze platebody (t)",   "Bronze platelegs (t)",   "Bronze kiteshield (t)",   "Bronze plateskirt (t)", ]

#define CONST_BRONZE_GOLD_TRIMMED_ARMOUR [   "Bronze full helm (g)",   "Bronze platebody (g)",   "Bronze platelegs (g)",   "Bronze kiteshield (g)",   "Bronze plateskirt (g)", ]

#define CONST_BRONZE_OTHER [   "Bronze Nails",   "Bronze Javelin heads",   "Bronze Arrowtips",   "Bronze Dart tips",   "Bronze Unfinished bolts", ]

#define CONST_IRON_ONE_HANDED_MELEE_WEAPONS [   "Iron dagger",   "Iron axe",   "Iron mace",   "Iron sword",   "Iron pickaxe",   "Iron scimitar",   "Iron hasta",   "Iron longsword",   "Iron warhammer",   "Iron battleaxe", ]

#define CONST_IRON_TWO_HANDED_MELEE_WEAPONS [   "Iron claws",   "Iron spear",   "Iron halberd",   "Iron 2h sword", ]

#define CONST_IRON_RANGED_WEAPONS [   "Iron crossbow", ]

#define CONST_IRON_AMMO [   "Iron dart",   "Iron knife",   "Iron thrownaxe",   "Iron arrow",   "Iron bolts",   "Iron brutal",   "Iron javelin", ]

#define CONST_IRON_ARMOUR [   "Iron boots",   "Iron gloves",   "Iron defender",   "Iron defender (broken)",   "Iron defender (l)",   "Iron med helm",   "Iron full helm",   "Iron sq shield",   "Iron platelegs",   "Iron plateskirt",   "Iron kiteshield",   "Iron chainbody",   "Iron platebody", ]

#define CONST_IRON_TRIMMED_ARMOUR [   "Iron full helm (t)",   "Iron platebody (t)",   "Iron platelegs (t)",   "Iron kiteshield (t)",   "Iron plateskirt (t)", ]

#define CONST_IRON_GOLD_TRIMMED_ARMOUR [   "Iron full helm (g)",   "Iron platebody (g)",   "Iron platelegs (g)",   "Iron kiteshield (g)",   "Iron plateskirt (g)", ]

#define CONST_IRON_OTHER [   "Iron Nails",   "Iron Javelin heads",   "Iron Arrowtips",   "Iron Dart tips",   "Iron Unfinished bolts",   "Oil lantern frame",   "Cooking spit", ]

#define CONST_STEEL_ONE_HANDED_MELEE_WEAPONS [   "Steel dagger",   "Steel axe",   "Steel mace",   "Steel sword",   "Steel pickaxe",   "Steel scimitar",   "Steel hasta",   "Steel longsword",   "Steel warhammer",   "Steel battleaxe", ]

#define CONST_STEEL_TWO_HANDED_MELEE_WEAPONS [   "Steel claws",   "Steel spear",   "Steel halberd",   "Steel 2h sword", ]

#define CONST_STEEL_RANGED_WEAPONS [   "Steel crossbow", ]

#define CONST_STEEL_AMMO [   "Steel dart",   "Steel knife",   "Steel thrownaxe",   "Steel arrow",   "Steel bolts",   "Steel brutal",   "Steel javelin", ]

#define CONST_STEEL_ARMOUR [   "Steel boots",   "Steel gloves",   "Steel defender",   "Steel defender (broken)",   "Steel defender (l)",   "Steel med helm",   "Steel full helm",   "Steel sq shield",   "Steel platelegs",   "Steel plateskirt",   "Steel kiteshield",   "Steel chainbody",   "Steel platebody", ]

#define CONST_STEEL_TRIMMED_ARMOUR [   "Steel full helm (t)",   "Steel platebody (t)",   "Steel platelegs (t)",   "Steel kiteshield (t)",   "Steel plateskirt (t)", ]

#define CONST_STEEL_GOLD_TRIMMED_ARMOUR [   "Steel full helm (g)",   "Steel platebody (g)",   "Steel platelegs (g)",   "Steel kiteshield (g)",   "Steel plateskirt (g)", ]

#define CONST_STEEL_OTHER [   "Steel Nails",   "Steel Javelin heads",   "Steel Arrowtips",   "Steel Dart tips",   "Steel Unfinished bolts",   "Steel studs", ]

#define CONST_BLACK_ONE_HANDED_MELEE_WEAPONS [   "Black dagger",   "Black pickaxe",   "Black axe",   "Black sword",   "Black mace",   "Black scimitar",   "Black longsword",   "Black warhammer",   "Black battleaxe", ]

#define CONST_BLACK_TWO_HANDED_MELEE_WEAPONS [   "Black claws",   "Black spear",   "Black halberd",   "Black 2h sword", ]

#define CONST_BLACK_RANGED_WEAPONS [ ]

#define CONST_BLACK_AMMO [   "Black dart",   "Black knife",   "Black brutal", ]

#define CONST_BLACK_ARMOUR [   "Black gloves",   "Black boots",   "Black defender",   "Black defender (broken)",   "Black defender (l)",   "Black med helm",   "Black full helm",   "Black sq shield",   "Black kiteshield",   "Black platelegs",   "Black plateskirt",   "Black chainbody",   "Black platebody", ]

#define CONST_BLACK_TRIMMED_ARMOUR [   "Black full helm (t)",   "Black platebody (t)",   "Black platelegs (t)",   "Black kiteshield (t)",   "Black plateskirt (t)", ]

#define CONST_BLACK_GOLD_TRIMMED_ARMOUR [   "Black full helm (g)",   "Black platebody (g)",   "Black platelegs (g)",   "Black kiteshield (g)",   "Black plateskirt (g)", ]

#define CONST_BLACK_OTHER [   "Black Nails",   "Elite black full helm",   "Elite black platelegs",   "Elite black platebody", ]

#define CONST_BLACK_HERALDIC_ARMOUR [   "Black helm (h1)",   "Black helm (h2)",   "Black helm (h3)",   "Black helm (h4)",   "Black helm (h5)",   "Black platebody (h1)",   "Black platebody (h2)",   "Black platebody (h3)",   "Black platebody (h4)",   "Black platebody (h5)",   "Black shield (h1)",   "Black shield (h2)",   "Black shield (h3)",   "Black shield (h4)",   "Black shield (h5)", ]

#define CONST_MITHRIL_ONE_HANDED_MELEE_WEAPONS [   "Mithril dagger",   "Mithril axe",   "Mithril mace",   "Mithril sword",   "Mithril pickaxe",   "Mithril scimitar",   "Mithril hasta",   "Mithril longsword",   "Mithril warhammer",   "Mithril battleaxe", ]

#define CONST_MITHRIL_TWO_HANDED_MELEE_WEAPONS [   "Mithril claws",   "Mithril spear",   "Mithril halberd",   "Mithril 2h sword", ]

#define CONST_MITHRIL_RANGED_WEAPONS [   "Mithril crossbow", ]

#define CONST_MITHRIL_AMMO [   "Mithril dart",   "Mithril knife",   "Mithril thrownaxe",   "Mithril arrow",   "Mithril bolts",   "Mithril brutal",   "Mithril javelin", ]

#define CONST_MITHRIL_ARMOUR [   "Mithril boots",   "Mithril gloves",   "Mithril defender",   "Mithril defender (broken)",   "Mithril defender (l)",   "Mithril med helm",   "Mithril full helm",   "Mithril sq shield",   "Mithril platelegs",   "Mithril plateskirt",   "Mithril kiteshield",   "Mithril chainbody",   "Mithril platebody", ]

#define CONST_MITHRIL_TRIMMED_ARMOUR [   "Mithril full helm (t)",   "Mithril platebody (t)",   "Mithril platelegs (t)",   "Mithril kiteshield (t)",   "Mithril plateskirt (t)", ]

#define CONST_MITHRIL_GOLD_TRIMMED_ARMOUR [   "Mithril full helm (g)",   "Mithril platebody (g)",   "Mithril platelegs (g)",   "Mithril kiteshield (g)",   "Mithril plateskirt (g)", ]

#define CONST_MITHRIL_OTHER [   "Mithril Nails",   "Mithril Javelin heads",   "Mithril Arrowtips",   "Mithril Dart tips",   "Mithril Unfinished bolts",   "Mith grapple tip",   "Mith grapple", ]

#define CONST_ADAMANT_ONE_HANDED_MELEE_WEAPONS [   "Adamant dagger",   "Adamant axe",   "Adamant mace",   "Adamant cane",   "Adamant sword",   "Adamant pickaxe",   "Adamant scimitar",   "Adamant hasta",   "Adamant longsword",   "Adamant warhammer",   "Adamant battleaxe", ]

#define CONST_ADAMANT_TWO_HANDED_MELEE_WEAPONS [   "Adamant claws",   "Adamant spear",   "Adamant halberd",   "Adamant 2h sword", ]

#define CONST_ADAMANT_RANGED_WEAPONS [   "Adamant crossbow", ]

#define CONST_ADAMANT_AMMO [   "Adamant dart",   "Adamant knife",   "Adamant thrownaxe",   "Adamant arrow",   "Adamant bolts",   "Adamant brutal",   "Adamant javelin", ]

#define CONST_ADAMANT_ARMOUR [   "Adamant boots",   "Adamant gloves",   "Adamant defender",   "Adamant defender (broken)",   "Adamant defender (l)",   "Adamant med helm",   "Adamant full helm",   "Adamant sq shield",   "Adamant platelegs",   "Adamant plateskirt",   "Adamant kiteshield",   "Adamant chainbody",   "Adamant platebody", ]

#define CONST_ADAMANT_TRIMMED_ARMOUR [   "Adamant full helm (t)",   "Adamant platebody (t)",   "Adamant platelegs (t)",   "Adamant kiteshield (t)",   "Adamant plateskirt (t)", ]

#define CONST_ADAMANT_GOLD_TRIMMED_ARMOUR [   "Adamant full helm (g)",   "Adamant platebody (g)",   "Adamant platelegs (g)",   "Adamant kiteshield (g)",   "Adamant plateskirt (g)", ]

#define CONST_ADAMANT_OTHER [   "Adamant Nails",   "Adamant Javelin heads",   "Adamant Arrowtips",   "Adamant Dart tips",   "Adamant Unfinished bolts", ]

#define CONST_ADAMANT_HERALDIC_ARMOUR [   "Adamant helm (h1)",   "Adamant helm (h2)",   "Adamant helm (h3)",   "Adamant helm (h4)",   "Adamant helm (h5)",   "Adamant platebody (h1)",   "Adamant platebody (h2)",   "Adamant platebody (h3)",   "Adamant platebody (h4)",   "Adamant platebody (h5)",   "Adamant shield (h1)",   "Adamant shield (h2)",   "Adamant shield (h3)",   "Adamant shield (h4)",   "Adamant shield (h5)", ]

#define CONST_RUNE_ONE_HANDED_MELEE_WEAPONS [   "Rune dagger",   "Rune axe",   "Rune mace",   "Rune sword",   "Rune pickaxe",   "Rune scimitar",   "Rune hasta",   "Rune longsword",   "Rune warhammer",   "Rune battleaxe", ]

#define CONST_RUNE_TWO_HANDED_MELEE_WEAPONS [   "Rune claws",   "Rune spear",   "Rune halberd",   "Rune 2h sword", ]

#define CONST_RUNE_RANGED_WEAPONS [   "Rune crossbow", ]

#define CONST_RUNE_AMMO [   "Rune dart",   "Rune knife",   "Rune thrownaxe",   "Rune arrow",   "Rune bolts",   "Rune brutal",   "Rune javelin", ]

#define CONST_RUNE_ARMOUR [   "Rune boots",   "Rune gloves",   "Rune defender",   "Rune defender (broken)",   "Rune defender (l)",   "Rune med helm",   "Rune full helm",   "Rune sq shield",   "Rune platelegs",   "Rune plateskirt",   "Rune kiteshield",   "Rune chainbody",   "Rune platebody", ]

#define CONST_RUNE_TRIMMED_ARMOUR [   "Rune full helm (t)",   "Rune platebody (t)",   "Rune platelegs (t)",   "Rune kiteshield (t)",   "Rune plateskirt (t)", ]

#define CONST_RUNE_GOLD_TRIMMED_ARMOUR [   "Rune full helm (g)",   "Rune platebody (g)",   "Rune platelegs (g)",   "Rune kiteshield (g)",   "Rune plateskirt (g)", ]

#define CONST_RUNE_OTHER [   "Rune Nails",   "Rune Javelin heads",   "Rune Arrowtips",   "Rune Dart tips",   "Rune Unfinished bolts", ]

#define CONST_RUNE_HERALDIC_ARMOUR [   "Rune helm (h1)",   "Rune helm (h2)",   "Rune helm (h3)",   "Rune helm (h4)",   "Rune helm (h5)",   "Rune platebody (h1)",   "Rune platebody (h2)",   "Rune platebody (h3)",   "Rune platebody (h4)",   "Rune platebody (h5)",   "Rune shield (h1)",   "Rune shield (h2)",   "Rune shield (h3)",   "Rune shield (h4)",   "Rune shield (h5)", ]

#define CONST_RUNE_GILDED [   "Gilded med helm",   "Gilded full helm",   "Gilded chainbody",   "Gilded platebody",   "Gilded platelegs",   "Gilded plateskirt",   "Gilded boots",   "Gilded sq shield",   "Gilded kiteshield",   "Gilded hasta",   "Gilded spear",   "Gilded scimitar",   "Gilded 2h sword", ]

#define CONST_RUNE_ANCIENT_TRIMMED_ARMOUR [   "Ancient full helm",   "Ancient platebody",   "Ancient platelegs",   "Ancient kiteshield",   "Ancient plateskirt", ]

#define CONST_RUNE_ARMADYL_TRIMMED_ARMOUR [   "Armadyl full helm",   "Armadyl platebody",   "Armadyl platelegs",   "Armadyl kiteshield",   "Armadyl plateskirt", ]

#define CONST_RUNE_BANDOS_TRIMMED_ARMOUR [   "Bandos full helm",   "Bandos platebody",   "Bandos platelegs",   "Bandos kiteshield",   "Bandos plateskirt", ]

#define CONST_RUNE_GUTHIX_TRIMMED_ARMOUR [   "Guthix full helm",   "Guthix platebody",   "Guthix platelegs",   "Guthix kiteshield",   "Guthix plateskirt", ]

#define CONST_RUNE_SARADOMIN_TRIMMED_ARMOUR [   "Saradomin full helm",   "Saradomin platebody",   "Saradomin platelegs",   "Saradomin kiteshield",   "Saradomin plateskirt", ]

#define CONST_RUNE_ZAMORAK_TRIMMED_ARMOUR [   "Zamorak full helm",   "Zamorak platebody",   "Zamorak platelegs",   "Zamorak kiteshield",   "Zamorak plateskirt", ]

#define CONST_DRAGON_ONE_HANDED_MELEE_WEAPONS [   "Dragon dagger",   "Dragon axe",   "Dragon pickaxe",   "Dragon harpoon",   "Dragon mace",   "Dragon cane",   "Dragon hasta",   "Dragon sword",   "Dragon scimitar",   "Dragon longsword",   "Dragon warhammer",   "Dragon battleaxe", ]

#define CONST_DRAGON_TWO_HANDED_MELEE_WEAPONS [   "Dragon claws",   "Dragon spear",   "Dragon halberd",   "Dragon 2h sword", ]

#define CONST_DRAGON_RANGED_WEAPONS [   "Dragon crossbow", ]

#define CONST_DRAGON_AMMO [   "Dragon knife",   "Dragon dart",   "Dragon thrownaxe",   "Dragon arrow",   "Dragon bolts",   "Dragon javelin", ]

#define CONST_DRAGON_ARMOUR [   "Dragon med helm",   "Dragon full helm",   "Dragon chainbody",   "Dragon platebody",   "Dragon platelegs",   "Dragon plateskirt",   "Dragon gloves",   "Dragon boots",   "Dragon sq shield",   "Dragon kiteshield",   "Dragon defender",   "Dragon defender (broken)",   "Dragon defender (l)", ]

#define CONST_LAST_MAN_STANDING_STARTER_GEAR_LIST [   "Abyssal whip",   "Ahrim's staff",   "Amulet of glory",   "Ancient staff",   "Barrows gloves",   "Berserker helm",   "Berserker ring",   "Black d'hide body",   "Black d'hide chaps",   "Climbing boots",   "Diamond bolts (e)",   "Dragon dagger",   "Dragon defender",   "Dragon scimitar",   "Ghostly hood",   "Ghostly robe (bottom)",   "Ghostly robe (top)",   "Helm of neitiznot",   "Imbued guthix cape",   "Imbued saradomin cape",   "Imbued zamorak cape",   "Mithril gloves",   "Mystic robe bottom",   "Mystic robe bottom (dark)",   "Mystic robe bottom (light)",   "Mystic robe top",   "Mystic robe top (dark)",   "Mystic robe top (light)",   "Occult necklace",   "Rune crossbow",   "Rune defender",   "Rune platelegs",   "Spirit shield",   "Tome of fire",   "Unholy book",  ]

#define CONST_LAST_MAN_STANDING_AMMO_LIST [   "Atlatl dart",   "Diamond bolts (e)",   "Dragon arrows",   "Dragon javelins",   "Dragon knife",   "Morrigan's javelin",   "Opal dragon bolts (e)", ]

#define CONST_BONES_LIST [   "Bones",   "Wolf bones",   "Burnt bones",   "Monkey bones",   "Bat bones",   "Big bones",   "Jogre bones",   "Wyrmling bones",   "Zogre bones",   "Shaikahan bones",   "Babydragon bones",   "Wyrm bones",   "Wyvern bones",   "Dragon bones",   "Drake bones",   "Fayrg bones",   "Lava dragon bones",   "Raurg bones",   "Hydra bones",   "Dagannoth bones",   "Ourg bones",   "Superior dragon bones",   "Bleached bones",   "Small zombie monkey bones",   "Large zombie monkey bones",   "Small ninja monkey bones",   "Medium ninja monkey bones",   "Gorilla bones",   "Bearded gorilla bones", ]

#define CONST_ASHES_LIST [   "Fiendish ashes",   "Vile ashes",   "Malicious ashes",   "Abyssal ashes",   "Infernal ashes", ]

#define CONST_SHADES_REMAINS_LIST [   "Loar remains",   "Phrin remains",   "Riyl remains",   "Asyn remains",   "Fiyr remains",   "Urium remains", ]

#define CONST_ENSOULED_HEAD_LIST [   "Ensouled goblin head",   "Ensouled monkey head",   "Ensouled imp head",   "Ensouled minotaur head",   "Ensouled scorpion head",   "Ensouled bear head",   "Ensouled unicorn head",   "Ensouled dog head",   "Ensouled chaos druid head",   "Ensouled giant head",   "Ensouled ogre head",   "Ensouled elf head",   "Ensouled troll head",   "Ensouled horror head",   "Ensouled kalphite head",   "Ensouled dagannoth head",   "Ensouled bloodveld head",   "Ensouled tzHaar head",   "Ensouled demon head",   "Ensouled hellhound head",   "Ensouled aviansie head",   "Ensouled abyssal head",   "Ensouled dragon head", ]

#define CONST_RUNE_NAMES [   "Air rune",   "Mind rune",   "Water rune",   "Earth rune",   "Fire rune",   "Body rune",   "Cosmic rune",   "Chaos rune",   "Nature rune",   "Law rune",   "Death rune",   "Sunfire rune",   "Astral rune",   "Blood rune",   "Soul rune",   "Wrath rune",   "Mist rune",   "Dust rune",   "Mud rune",   "Smoke rune",   "Steam rune",   "Lava rune", ]

#define CONST_SECONDARIES_LIST [   "Eye of newt",   "Unicorn horn dust",   "Limpwurt root",   "Volcanic ash",   "Red spiders' eggs",   "Chocolate dust",   "White berries",   "Toad's legs",   "Goat horn dust",   "Snape grass",   "Mort myre fungus",   "Kebbit teeth dust",   "Dragon scale dust",   "Nail beast nails",   "Yew roots",   "Wine of zamorak",   "Potato cactus",   "Jangerberries",   "Magic roots",   "Crushed nest",   "Poison ivy berries",   "Nihil dust",   "Lily of the sands",   "Aldarium",   "Araxyte venom sack", ]

#define CONST_AMMO_STANDARD_ARROWS_LIST [   "Bronze Arrow*",   "Iron Arrow*",   "Steel Arrow*",   "Mithril Arrow*",   "Adamant Arrow*",   "Rune Arrow*",   "Amethyst Arrow*",   "Dragon Arrow*",   "Bronze fire arrow",   "Iron fire arrow",   "Steel fire arrow",   "Mithril fire arrow",   "Adamant fire arrow",   "Rune fire arrow",   "Amethyst fire arrow",   "Dragon fire arrow", ]

#define CONST_AMMO_DARTS_LIST [   "Bronze dart*",   "Iron dart*",   "Steel dart*",   "Black dart*",   "Mithril dart*",   "Adamant dart*",   "Rune dart*",   "Amethyst dart*",   "Dragon dart*",   "Atlatl dart", ]

#define CONST_AMMO_BOLTS_LIST [   "Bronze bolts*",   "Blurite bolts*",   "Silver bolts*",   "Iron bolts*",   "Steel bolts*",   "Mithril bolts*",   "Adamant bolts*",   "Runite bolts*",   "Dragon bolts*", ]

#define CONST_AMMO_BOLTS_E_LIST [   "Opal bolts (e)",   "Jade bolts (e)",   "Pearl bolts (e)",   "Topaz bolts (e)",   "Sapphire bolts (e)",   "Emerald bolts (e)",   "Ruby bolts (e)",   "Diamond bolts (e)",   "Dragonstone bolts (e)",   "Onyx bolts (e)", ]

#define CONST_AMMO_DRAGON_BOLTS_E_LIST [   "Opal dragon bolts (e)",   "Jade dragon bolts (e)",   "Pearl dragon bolts (e)",   "Topaz dragon bolts (e)",   "Sapphire dragon bolts (e)",   "Emerald dragon bolts (e)",   "Ruby dragon bolts (e)",   "Diamond dragon bolts (e)",   "Dragonstone dragon bolts (e)",   "Onyx dragon bolts (e)", ]

#define CONST_AMMO_JAVELINS_LIST [   "Bronze javelin*",   "Iron javelin*",   "Steel javelin*",   "Mithril javelin*",   "Adamant javelin*",   "Rune javelin*",   "Amethyst javelin*",   "Dragon javelin*",   "Morrigan's javelin (bh)*", ]

#define CONST_AMMO_SPECIAL_BOLTS_LIST [   "Moonlight antler bolts",   "Sunlight antler bolts",   "Kebbit bolts",   "Long kebbit bolts",   "Broad bolts",   "Amethyst broad bolts",   "Barbed bolts",   "Bone bolts", ]

#define CONST_AMMO_BRUTAL_ARROWS_LIST [   "Bronze brutal",   "Iron brutal",   "Steel brutal",   "Black brutal",   "Mithril brutal",   "Adamant brutal",   "Rune brutal", ]

#define CONST_AMMO_SPECIAL_ARROWS_LIST [   "Training Arrow",   "Ogre Arrow",   "Ice Arrow",   "Broad Arrow", ]

#define CONST_AMMO_KNIVES_LIST [   "Bronze knife",   "Iron knife",   "Steel knife",   "Black knife",   "Mithril knife",   "Adamant knife",   "Rune knife",   "Dragon knife", ]

#define CONST_AMMO_THROWING_AXES_LIST [   "Bronze thrownaxe",   "Iron thrownaxe",   "Steel thrownaxe",   "Mithril thrownaxe",   "Adamant thrownaxe",   "Rune thrownaxe",   "Dragon thrownaxe",   "Morrigan's throwing axe (bh)*", ]

#define CONST_AMMO_CHINCHOMPAS_LIST [   "Chinchompa",   "Red chinchompa",   "Black chinchompa", ]

#define CONST_AMMO_MISC_LIST [   "Atlatl dart",   "Toktz-xil-ul",   "Hunter's spear",   "Holy water",   "Mud pie", ]

#define CONST_LOGS_LIST [   "Logs",   "Oak logs",   "Willow logs",   "Maple logs",   "Yew logs",   "Magic logs",   "Redwood logs",   "Teak logs",   "Mahogany logs",   "Achey tree logs",   "Arctic pine logs",   "Scrapey tree logs",   "Juniper logs",   "Bark",   "Blisterwood logs", ]

#define CONST_BARS_LIST [   "Bronze bar",   "Iron bar",   "Silver bar",   "Steel bar",   "Gold bar",   "Mithril bar",   "Adamantite bar",   "Runite bar",   "Elemental metal",   "Primed bar",   "Primed mind bar",   "Blurite bar",   "Enchanted bar",   "Lovakite bar",   "'Perfect' gold bar", ]

#define CONST_ORES_LIST [   "copper ore",   "tin ore",   "iron ore",   "silver ore",   "coal",   "gold ore",   "mithril ore",   "adamantite ore",   "runite ore",   "daeyalt ore",   "blasted ore",   "blurite ore",   "lovakite ore", ]

#define CONST_RUNES_LIST [   "Air rune",   "Mind rune",   "Water rune",   "Earth rune",   "Fire rune",   "Body rune",   "Cosmic rune",   "Chaos rune",   "Nature rune",   "Law rune",   "Death rune",   "Sunfire rune",   "Astral rune",   "Blood rune",   "Soul rune",   "Wrath rune",   "Mist rune",   "Dust rune",   "Mud rune",   "Smoke rune",   "Steam rune",   "Lava rune",   "Aether rune", ]

#define CONST_RUNES_ELEMENTAL_LIST [   "Air rune",   "Water rune",   "Earth rune",   "Fire rune",   "Sunfire rune", ]

#define CONST_RUNES_CATALYTIC_LIST [   "Mind rune",   "Body rune",   "Cosmic rune",   "Chaos rune",   "Nature rune",   "Law rune",   "Death rune",   "Astral rune",   "Blood rune",   "Soul rune",   "Wrath rune", ]

#define CONST_RUNES_COMBINATION_LIST [   "Mist rune",   "Dust rune",   "Mud rune",   "Smoke rune",   "Steam rune",   "Lava rune",   "Aether rune", ]

#define CONST_POTIONS_LIST [   "Attack potion(*",   "Antipoison(*",   "Strength potion(*",   "Serum 207(*",   "Compost potion(*",   "Restore potion(*",   "Energy potion(*",   "Defence potion(*",   "Agility potion(*",   "Combat potion(*",   "Prayer potion(*",   "Super attack(*",   "Superantipoison(*",   "Fishing potion(*",   "Super energy(*",   "Hunter potion(*",   "Goading potion(*",   "Super strength(*",   "Prayer regeneration potion(*",   "Super restore(*",   "Sanfew serum(*",   "Super defence(*",   "Antidote+(*",   "Antifire potion(*",   "Divine super attack potion(*",   "Divine super defence potion(*",   "Divine super strength potion(*",   "Ranging potion(*",   "Divine ranging potion(*",   "Magic potion(*",   "Stamina potion(*",   "Zamorak brew(*",   "Divine magic potion(*",   "Antidote++(*",   "Bastion potion(*",   "Battlemage potion(*",   "Saradomin brew(*",   "Extended antifire(*",   "Ancient brew(*",   "Divine bastion potion(*",   "Divine battlemage potion(*",   "Anti-venom(*",   "Menaphite remedy(*",   "Super combat potion(*",   "Forgotten brew(*",   "Super antifire potion(*",   "Anti-venom+(*",   "Extended anti-venom+(*",   "Divine super combat potion(*",   "Extended super antifire(*",   "Surge potion(*",   "Blighted super restore(*", ]

#define CONST_BARB_POTIONS_LIST [   "Attack mix*",   "Antipoison mix*",   "Relicym's mix*",   "Strength mix*",   "Restore mix*",   "Energy mix*",   "Defence mix*",   "Agility mix*",   "Combat mix*",   "Prayer mix*",   "Superattack mix*",   "Anti-poison supermix*",   "Fishing mix*",   "Super energy mix*",   "Hunting mix*",   "Super str. mix*",   "Magic essence mix*",   "Super restore mix*",   "Super def. mix*",   "Antidote+ mix*",   "Antifire mix*",   "Ranging mix*",   "Magic mix*",   "Zamorak mix*",   "Stamina mix*",   "Extended antifire mix*",   "Ancient mix*",   "Super antifire mix*",   "Extended super antifire mix*", ]

#define CONST_FLETCHING_UNSTRUNG_SHORTBOW_LIST [   "Shortbow (u)",   "Oak shortbow (u)",   "Willow shortbow (u)",   "Maple shortbow (u)",   "Yew shortbow (u)",   "Magic shortbow (u)", ]

#define CONST_FLETCHING_UNSTRUNG_LONGBOW_LIST [   "Longbow (u)",   "Oak Longbow (u)",   "Willow Longbow (u)",   "Maple Longbow (u)",   "Yew Longbow (u)",   "Magic Longbow (u)", ]

#define CONST_FLETCHING_CROSSBOW_STOCK_LIST [   "Wooden stock",   "Oak stock",   "Willow stock",   "Teak stock",   "Maple stock",   "Mahogany stock",   "Yew stock",   "Magic stock", ]

#define CONST_FLETCHING_CROSSBOW_LIMBS_LIST [   "Bronze limbs",   "Blurite limbs",   "Iron limbs",   "Steel limbs",   "Mithril limbs",   "Adamantite limbs",   "Runite limbs", ]

#define CONST_FLETCHING_UNSTRUNG_CROSSBOW_LIST [   "Bronze crossbow (u)",   "Blurite crossbow (u)",   "Iron crossbow (u)",   "Steel crossbow (u)",   "Mithril crossbow (u)",   "Adamant crossbow (u)",   "Runite crossbow (u)", ]

#define CONST_FLETCHING_ARROW_TIPS_LIST [   "Bronze arrowtips",   "Iron arrowtips",   "Steel arrowtips",   "Mithril arrowtips",   "Adamant arrowtips",   "Rune arrowtips",   "Amethyst arrowtips",   "Dragon arrowtips",   "Broad arrowheads",   "Wolfbone arrowtips", ]

#define CONST_FLETCHING_DART_TIP_LIST [   "Bronze dart tip",   "Iron dart tip",   "Steel dart tip",   "Mithril dart tip",   "Adamant dart tip",   "Rune dart tip",   "Amethyst dart tip",   "Dragon dart tip", ]

#define CONST_FLETCHING_JAVELIN_HEADS_LIST [   "Bronze javelin heads",   "Iron javelin heads",   "Steel javelin heads",   "Mithril javelin heads",   "Adamant javelin heads",   "Rune javelin heads",   "Amethyst javelin heads",   "Dragon javelin heads", ]

#define CONST_FLETCHING_UNFINISHED_BOLTS_LIST [   "Bronze bolts (unf)",   "Iron bolts (unf)",   "Steel bolts (unf)",   "Mithril bolts (unf)",   "Adamant bolts(unf)",   "Runite bolts (unf)",   "Dragon bolts (unf)",   "Blurite bolts (unf)",   "Silver bolts (unf)",   "Unfinished broad bolts", ]

#define CONST_FLETCHING_BOLT_TIPS_LIST [   "Opal bolt tips",   "Jade bolt tips",   "Pearl bolt tips",   "Red topaz bolt tips",   "Sapphire bolt tips",   "Emerald bolt tips",   "Ruby bolt tips",   "Diamond bolt tips",   "Amethyst bolt tips",   "Dragonstone bolt tips",   "Onyx bolt tips", ]

#define CONST_FLETCHING_MISC_LIST [   "Bow string",   "Crossbow string",   "Unstrung comp bow",   "Javelin shaft",   "Arrow shaft",   "Ogre arrow shaft",   "Headless arrow",   "Flighted ogre arrow", ]

#define CONST_CONSTRUCTION_PLANKS_LIST [   "Plank",   "Oak Plank",   "Teak Plank",   "Mahogany Plank", ]

#define CONST_CONSTRUCTION_NAILS_LIST [   "Bronze Nails",   "Iron Nails",   "Steel Nails",   "Black Nails",   "Mithril Nails",   "Adamant Nails",   "Rune Nails", ]

#define CONST_CONSTRUCTION_STONEMASON_LIST [   "Limestone brick",   "Marble block",   "Gold leaf",   "Condensed gold",   "Magic stone", ]

#define CONST_CONSTRUCTION_MISC_LIST [   "Bolt of cloth",   "Saw", ]